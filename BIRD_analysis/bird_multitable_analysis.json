{
  "analysis_summary": {
    "total_databases_with_joins": 69,
    "total_join_queries": 7212
  },
  "ranked_databases": [
    {
      "db_id": "works_cycles",
      "score": 771.0000000000001,
      "join_count": 344,
      "unique_tables": 65,
      "avg_tables_per_join": 2.241279069767442,
      "most_common_tables": [
        {
          "table": "Product",
          "count": 123
        },
        {
          "table": "Person",
          "count": 106
        },
        {
          "table": "Employee",
          "count": 104
        },
        {
          "table": "ProductVendor",
          "count": 40
        },
        {
          "table": "EmployeePayHistory",
          "count": 39
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Employee",
            "Person"
          ],
          "count": 62
        },
        {
          "tables": [
            "Employee",
            "EmployeePayHistory"
          ],
          "count": 34
        },
        {
          "tables": [
            "Product",
            "ProductReview"
          ],
          "count": 28
        },
        {
          "tables": [
            "Department",
            "EmployeeDepartmentHistory"
          ],
          "count": 27
        },
        {
          "tables": [
            "ProductVendor",
            "Vendor"
          ],
          "count": 22
        }
      ]
    },
    {
      "db_id": "public_review_platform",
      "score": 738.0,
      "join_count": 274,
      "unique_tables": 20,
      "avg_tables_per_join": 2.6934306569343067,
      "most_common_tables": [
        {
          "table": "Business",
          "count": 226
        },
        {
          "table": "Categories",
          "count": 99
        },
        {
          "table": "Business_Categories",
          "count": 98
        },
        {
          "table": "Reviews",
          "count": 75
        },
        {
          "table": "Business_Hours",
          "count": 72
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Business_Categories",
            "Categories"
          ],
          "count": 100
        },
        {
          "tables": [
            "Business",
            "Categories"
          ],
          "count": 77
        },
        {
          "tables": [
            "Business",
            "Business_Categories"
          ],
          "count": 77
        },
        {
          "tables": [
            "Business",
            "Business_Hours"
          ],
          "count": 50
        },
        {
          "tables": [
            "Attributes",
            "Business_Attributes"
          ],
          "count": 48
        }
      ]
    },
    {
      "db_id": "movie_3",
      "score": 695.0,
      "join_count": 238,
      "unique_tables": 18,
      "avg_tables_per_join": 2.9201680672268906,
      "most_common_tables": [
        {
          "table": "film",
          "count": 180
        },
        {
          "table": "customer",
          "count": 92
        },
        {
          "table": "actor",
          "count": 69
        },
        {
          "table": "film_actor",
          "count": 67
        },
        {
          "table": "film_category",
          "count": 56
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "actor",
            "film_actor"
          ],
          "count": 63
        },
        {
          "tables": [
            "film",
            "film_actor"
          ],
          "count": 54
        },
        {
          "tables": [
            "category",
            "film_category"
          ],
          "count": 53
        },
        {
          "tables": [
            "actor",
            "film"
          ],
          "count": 51
        },
        {
          "tables": [
            "film",
            "film_category"
          ],
          "count": 40
        }
      ]
    },
    {
      "db_id": "retail_world",
      "score": 630.0000000000001,
      "join_count": 269,
      "unique_tables": 15,
      "avg_tables_per_join": 2.342007434944238,
      "most_common_tables": [
        {
          "table": "Products",
          "count": 157
        },
        {
          "table": "Employees",
          "count": 128
        },
        {
          "table": "Orders",
          "count": 112
        },
        {
          "table": "Suppliers",
          "count": 79
        },
        {
          "table": "`Order",
          "count": 72
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Products",
            "Suppliers"
          ],
          "count": 78
        },
        {
          "tables": [
            "Products",
            "`Order"
          ],
          "count": 46
        },
        {
          "tables": [
            "Orders",
            "`Order"
          ],
          "count": 37
        },
        {
          "tables": [
            "EmployeeTerritories",
            "Employees"
          ],
          "count": 36
        },
        {
          "tables": [
            "Employees",
            "Orders"
          ],
          "count": 35
        }
      ]
    },
    {
      "db_id": "mondial_geo",
      "score": 609.0,
      "join_count": 238,
      "unique_tables": 32,
      "avg_tables_per_join": 2.5588235294117645,
      "most_common_tables": [
        {
          "table": "country",
          "count": 199
        },
        {
          "table": "economy",
          "count": 45
        },
        {
          "table": "city",
          "count": 40
        },
        {
          "table": "politics",
          "count": 39
        },
        {
          "table": "organization",
          "count": 31
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "country",
            "economy"
          ],
          "count": 35
        },
        {
          "tables": [
            "country",
            "ethnicGroup"
          ],
          "count": 25
        },
        {
          "tables": [
            "country",
            "politics"
          ],
          "count": 25
        },
        {
          "tables": [
            "country",
            "encompasses"
          ],
          "count": 22
        },
        {
          "tables": [
            "continent",
            "country"
          ],
          "count": 20
        }
      ]
    },
    {
      "db_id": "soccer_2016",
      "score": 480.0,
      "join_count": 194,
      "unique_tables": 26,
      "avg_tables_per_join": 2.4742268041237114,
      "most_common_tables": [
        {
          "table": "Player",
          "count": 112
        },
        {
          "table": "Match",
          "count": 80
        },
        {
          "table": "Team",
          "count": 53
        },
        {
          "table": "`Match`",
          "count": 45
        },
        {
          "table": "Player_Match",
          "count": 41
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Match",
            "Team"
          ],
          "count": 41
        },
        {
          "tables": [
            "Player",
            "Player_Match"
          ],
          "count": 34
        },
        {
          "tables": [
            "Country",
            "Player"
          ],
          "count": 25
        },
        {
          "tables": [
            "Match",
            "Player"
          ],
          "count": 22
        },
        {
          "tables": [
            "Player_Match",
            "Rolee"
          ],
          "count": 18
        }
      ]
    },
    {
      "db_id": "video_games",
      "score": 475.0,
      "join_count": 156,
      "unique_tables": 9,
      "avg_tables_per_join": 3.0448717948717947,
      "most_common_tables": [
        {
          "table": "game",
          "count": 96
        },
        {
          "table": "game_publisher",
          "count": 94
        },
        {
          "table": "game_platform",
          "count": 85
        },
        {
          "table": "publisher",
          "count": 57
        },
        {
          "table": "region_sales",
          "count": 52
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "game",
            "game_publisher"
          ],
          "count": 57
        },
        {
          "tables": [
            "game_publisher",
            "publisher"
          ],
          "count": 54
        },
        {
          "tables": [
            "game_platform",
            "game_publisher"
          ],
          "count": 46
        },
        {
          "tables": [
            "game",
            "genre"
          ],
          "count": 43
        },
        {
          "tables": [
            "game_platform",
            "platform"
          ],
          "count": 40
        }
      ]
    },
    {
      "db_id": "olympics",
      "score": 450.0,
      "join_count": 158,
      "unique_tables": 12,
      "avg_tables_per_join": 2.848101265822785,
      "most_common_tables": [
        {
          "table": "games_competitor",
          "count": 85
        },
        {
          "table": "person",
          "count": 81
        },
        {
          "table": "games",
          "count": 66
        },
        {
          "table": "person_region",
          "count": 41
        },
        {
          "table": "noc_region",
          "count": 37
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "games_competitor",
            "person"
          ],
          "count": 51
        },
        {
          "tables": [
            "games",
            "games_competitor"
          ],
          "count": 49
        },
        {
          "tables": [
            "noc_region",
            "person_region"
          ],
          "count": 36
        },
        {
          "tables": [
            "city",
            "games_city"
          ],
          "count": 34
        },
        {
          "tables": [
            "person",
            "person_region"
          ],
          "count": 31
        }
      ]
    },
    {
      "db_id": "books",
      "score": 433.0,
      "join_count": 167,
      "unique_tables": 15,
      "avg_tables_per_join": 2.592814371257485,
      "most_common_tables": [
        {
          "table": "book",
          "count": 120
        },
        {
          "table": "order_line",
          "count": 45
        },
        {
          "table": "publisher",
          "count": 42
        },
        {
          "table": "cust_order",
          "count": 42
        },
        {
          "table": "customer",
          "count": 42
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "book",
            "publisher"
          ],
          "count": 41
        },
        {
          "tables": [
            "author",
            "book_author"
          ],
          "count": 37
        },
        {
          "tables": [
            "book",
            "book_author"
          ],
          "count": 34
        },
        {
          "tables": [
            "author",
            "book"
          ],
          "count": 34
        },
        {
          "tables": [
            "book",
            "order_line"
          ],
          "count": 33
        }
      ]
    },
    {
      "db_id": "retails",
      "score": 415.0,
      "join_count": 174,
      "unique_tables": 9,
      "avg_tables_per_join": 2.3850574712643677,
      "most_common_tables": [
        {
          "table": "customer",
          "count": 86
        },
        {
          "table": "lineitem",
          "count": 76
        },
        {
          "table": "nation",
          "count": 76
        },
        {
          "table": "orders",
          "count": 68
        },
        {
          "table": "part",
          "count": 62
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "customer",
            "nation"
          ],
          "count": 43
        },
        {
          "tables": [
            "part",
            "partsupp"
          ],
          "count": 37
        },
        {
          "tables": [
            "customer",
            "orders"
          ],
          "count": 33
        },
        {
          "tables": [
            "nation",
            "supplier"
          ],
          "count": 26
        },
        {
          "tables": [
            "lineitem",
            "orders"
          ],
          "count": 26
        }
      ]
    },
    {
      "db_id": "movies_4",
      "score": 380.0,
      "join_count": 136,
      "unique_tables": 18,
      "avg_tables_per_join": 2.7941176470588234,
      "most_common_tables": [
        {
          "table": "movie",
          "count": 121
        },
        {
          "table": "person",
          "count": 42
        },
        {
          "table": "movie_crew",
          "count": 30
        },
        {
          "table": "movie_company",
          "count": 27
        },
        {
          "table": "movie_cast",
          "count": 27
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "movie_company",
            "production_company"
          ],
          "count": 31
        },
        {
          "tables": [
            "movie",
            "movie_company"
          ],
          "count": 27
        },
        {
          "tables": [
            "movie",
            "person"
          ],
          "count": 27
        },
        {
          "tables": [
            "movie",
            "production_company"
          ],
          "count": 25
        },
        {
          "tables": [
            "movie_crew",
            "person"
          ],
          "count": 24
        }
      ]
    },
    {
      "db_id": "synthea",
      "score": 371.0,
      "join_count": 177,
      "unique_tables": 12,
      "avg_tables_per_join": 2.096045197740113,
      "most_common_tables": [
        {
          "table": "patients",
          "count": 160
        },
        {
          "table": "conditions",
          "count": 51
        },
        {
          "table": "careplans",
          "count": 32
        },
        {
          "table": "medications",
          "count": 30
        },
        {
          "table": "observations",
          "count": 25
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "conditions",
            "patients"
          ],
          "count": 38
        },
        {
          "tables": [
            "careplans",
            "patients"
          ],
          "count": 28
        },
        {
          "tables": [
            "medications",
            "patients"
          ],
          "count": 26
        },
        {
          "tables": [
            "observations",
            "patients"
          ],
          "count": 22
        },
        {
          "tables": [
            "allergies",
            "patients"
          ],
          "count": 20
        }
      ]
    },
    {
      "db_id": "hockey",
      "score": 322.99999999999994,
      "join_count": 145,
      "unique_tables": 18,
      "avg_tables_per_join": 2.2275862068965515,
      "most_common_tables": [
        {
          "table": "Master",
          "count": 133
        },
        {
          "table": "Teams",
          "count": 73
        },
        {
          "table": "Goalies",
          "count": 56
        },
        {
          "table": "Coaches",
          "count": 31
        },
        {
          "table": "Scoring",
          "count": 22
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Goalies",
            "Master"
          ],
          "count": 40
        },
        {
          "tables": [
            "Master",
            "Teams"
          ],
          "count": 27
        },
        {
          "tables": [
            "Coaches",
            "Master"
          ],
          "count": 23
        },
        {
          "tables": [
            "Coaches",
            "Teams"
          ],
          "count": 18
        },
        {
          "tables": [
            "Master",
            "Scoring"
          ],
          "count": 17
        }
      ]
    },
    {
      "db_id": "chicago_crime",
      "score": 320.0,
      "join_count": 139,
      "unique_tables": 9,
      "avg_tables_per_join": 2.302158273381295,
      "most_common_tables": [
        {
          "table": "Crime",
          "count": 136
        },
        {
          "table": "Community_Area",
          "count": 67
        },
        {
          "table": "District",
          "count": 43
        },
        {
          "table": "FBI_Code",
          "count": 39
        },
        {
          "table": "IUCR",
          "count": 38
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Community_Area",
            "Crime"
          ],
          "count": 41
        },
        {
          "tables": [
            "Crime",
            "District"
          ],
          "count": 35
        },
        {
          "tables": [
            "Crime",
            "Ward"
          ],
          "count": 33
        },
        {
          "tables": [
            "Crime",
            "FBI_Code"
          ],
          "count": 33
        },
        {
          "tables": [
            "Crime",
            "IUCR"
          ],
          "count": 31
        }
      ]
    },
    {
      "db_id": "address",
      "score": 318.0,
      "join_count": 148,
      "unique_tables": 10,
      "avg_tables_per_join": 2.1486486486486487,
      "most_common_tables": [
        {
          "table": "zip_data",
          "count": 133
        },
        {
          "table": "country",
          "count": 45
        },
        {
          "table": "state",
          "count": 26
        },
        {
          "table": "congress",
          "count": 26
        },
        {
          "table": "area_code",
          "count": 25
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "country",
            "zip_data"
          ],
          "count": 34
        },
        {
          "tables": [
            "area_code",
            "zip_data"
          ],
          "count": 25
        },
        {
          "tables": [
            "congress",
            "zip_congress"
          ],
          "count": 21
        },
        {
          "tables": [
            "CBSA",
            "zip_data"
          ],
          "count": 19
        },
        {
          "tables": [
            "state",
            "zip_data"
          ],
          "count": 18
        }
      ]
    },
    {
      "db_id": "talkingdata",
      "score": 315.0,
      "join_count": 140,
      "unique_tables": 12,
      "avg_tables_per_join": 2.25,
      "most_common_tables": [
        {
          "table": "gender_age",
          "count": 109
        },
        {
          "table": "phone_brand_device_model2",
          "count": 84
        },
        {
          "table": "events",
          "count": 44
        },
        {
          "table": "label_categories",
          "count": 41
        },
        {
          "table": "app_labels",
          "count": 38
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "gender_age",
            "phone_brand_device_model2"
          ],
          "count": 56
        },
        {
          "tables": [
            "app_labels",
            "label_categories"
          ],
          "count": 36
        },
        {
          "tables": [
            "events_relevant",
            "gender_age"
          ],
          "count": 14
        },
        {
          "tables": [
            "events",
            "phone_brand_device_model2"
          ],
          "count": 13
        },
        {
          "tables": [
            "(",
            "gender_age"
          ],
          "count": 12
        }
      ]
    },
    {
      "db_id": "simpson_episodes",
      "score": 306.0,
      "join_count": 150,
      "unique_tables": 11,
      "avg_tables_per_join": 2.04,
      "most_common_tables": [
        {
          "table": "Episode",
          "count": 105
        },
        {
          "table": "Award",
          "count": 84
        },
        {
          "table": "Vote",
          "count": 53
        },
        {
          "table": "Person",
          "count": 48
        },
        {
          "table": "Credit",
          "count": 38
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Episode",
            "Vote"
          ],
          "count": 39
        },
        {
          "tables": [
            "Award",
            "Episode"
          ],
          "count": 29
        },
        {
          "tables": [
            "Award",
            "Person"
          ],
          "count": 17
        },
        {
          "tables": [
            "Episode",
            "Keyword"
          ],
          "count": 17
        },
        {
          "tables": [
            "Credit",
            "Episode"
          ],
          "count": 17
        }
      ]
    },
    {
      "db_id": "retail_complains",
      "score": 301.0,
      "join_count": 140,
      "unique_tables": 7,
      "avg_tables_per_join": 2.15,
      "most_common_tables": [
        {
          "table": "client",
          "count": 120
        },
        {
          "table": "events",
          "count": 83
        },
        {
          "table": "callcenterlogs",
          "count": 54
        },
        {
          "table": "district",
          "count": 45
        },
        {
          "table": "reviews",
          "count": 21
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "client",
            "events"
          ],
          "count": 64
        },
        {
          "tables": [
            "callcenterlogs",
            "client"
          ],
          "count": 27
        },
        {
          "tables": [
            "client",
            "district"
          ],
          "count": 26
        },
        {
          "tables": [
            "callcenterlogs",
            "events"
          ],
          "count": 20
        },
        {
          "tables": [
            "district",
            "reviews"
          ],
          "count": 20
        }
      ]
    },
    {
      "db_id": "authors",
      "score": 295.0,
      "join_count": 137,
      "unique_tables": 7,
      "avg_tables_per_join": 2.153284671532847,
      "most_common_tables": [
        {
          "table": "Paper",
          "count": 145
        },
        {
          "table": "PaperAuthor",
          "count": 73
        },
        {
          "table": "Journal",
          "count": 49
        },
        {
          "table": "Conference",
          "count": 45
        },
        {
          "table": "Author",
          "count": 18
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Paper",
            "PaperAuthor"
          ],
          "count": 66
        },
        {
          "tables": [
            "Journal",
            "Paper"
          ],
          "count": 45
        },
        {
          "tables": [
            "Conference",
            "Paper"
          ],
          "count": 39
        },
        {
          "tables": [
            "Journal",
            "PaperAuthor"
          ],
          "count": 9
        },
        {
          "tables": [
            "Conference",
            "PaperAuthor"
          ],
          "count": 7
        }
      ]
    },
    {
      "db_id": "student_loan",
      "score": 294.0,
      "join_count": 133,
      "unique_tables": 10,
      "avg_tables_per_join": 2.210526315789474,
      "most_common_tables": [
        {
          "table": "enlist",
          "count": 77
        },
        {
          "table": "longest_absense_from_school",
          "count": 69
        },
        {
          "table": "male",
          "count": 51
        },
        {
          "table": "disabled",
          "count": 49
        },
        {
          "table": "no_payment_due",
          "count": 35
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "enlist",
            "male"
          ],
          "count": 16
        },
        {
          "tables": [
            "disabled",
            "longest_absense_from_school"
          ],
          "count": 16
        },
        {
          "tables": [
            "male",
            "person"
          ],
          "count": 11
        },
        {
          "tables": [
            "disabled",
            "male"
          ],
          "count": 10
        },
        {
          "tables": [
            "enlist",
            "longest_absense_from_school"
          ],
          "count": 10
        }
      ]
    },
    {
      "db_id": "food_inspection_2",
      "score": 277.0,
      "join_count": 118,
      "unique_tables": 6,
      "avg_tables_per_join": 2.347457627118644,
      "most_common_tables": [
        {
          "table": "inspection",
          "count": 108
        },
        {
          "table": "establishment",
          "count": 71
        },
        {
          "table": "employee",
          "count": 65
        },
        {
          "table": "violation",
          "count": 33
        },
        {
          "table": "inspection_point",
          "count": 18
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "establishment",
            "inspection"
          ],
          "count": 66
        },
        {
          "tables": [
            "employee",
            "inspection"
          ],
          "count": 53
        },
        {
          "tables": [
            "inspection",
            "violation"
          ],
          "count": 18
        },
        {
          "tables": [
            "inspection_point",
            "violation"
          ],
          "count": 17
        },
        {
          "tables": [
            "establishment",
            "violation"
          ],
          "count": 13
        }
      ]
    },
    {
      "db_id": "regional_sales",
      "score": 273.0,
      "join_count": 124,
      "unique_tables": 6,
      "avg_tables_per_join": 2.2016129032258065,
      "most_common_tables": [
        {
          "table": "`Sales",
          "count": 173
        },
        {
          "table": "`Store",
          "count": 55
        },
        {
          "table": "Products",
          "count": 45
        },
        {
          "table": "(",
          "count": 42
        },
        {
          "table": "Customers",
          "count": 37
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Products",
            "`Sales"
          ],
          "count": 51
        },
        {
          "tables": [
            "Customers",
            "`Sales"
          ],
          "count": 39
        },
        {
          "tables": [
            "`Sales",
            "`Store"
          ],
          "count": 37
        },
        {
          "tables": [
            "`Sales",
            "`Sales"
          ],
          "count": 35
        },
        {
          "tables": [
            "(",
            "`Sales"
          ],
          "count": 29
        }
      ]
    },
    {
      "db_id": "superstore",
      "score": 268.0,
      "join_count": 111,
      "unique_tables": 7,
      "avg_tables_per_join": 2.4144144144144146,
      "most_common_tables": [
        {
          "table": "product",
          "count": 79
        },
        {
          "table": "people",
          "count": 68
        },
        {
          "table": "central_superstore",
          "count": 55
        },
        {
          "table": "east_superstore",
          "count": 30
        },
        {
          "table": "west_superstore",
          "count": 25
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "central_superstore",
            "product"
          ],
          "count": 37
        },
        {
          "tables": [
            "people",
            "product"
          ],
          "count": 36
        },
        {
          "tables": [
            "central_superstore",
            "people"
          ],
          "count": 32
        },
        {
          "tables": [
            "east_superstore",
            "product"
          ],
          "count": 18
        },
        {
          "tables": [
            "east_superstore",
            "people"
          ],
          "count": 16
        }
      ]
    },
    {
      "db_id": "beer_factory",
      "score": 264.0,
      "join_count": 109,
      "unique_tables": 8,
      "avg_tables_per_join": 2.4220183486238533,
      "most_common_tables": [
        {
          "table": "rootbeerbrand",
          "count": 71
        },
        {
          "table": "`transaction`",
          "count": 57
        },
        {
          "table": "customers",
          "count": 51
        },
        {
          "table": "rootbeer",
          "count": 46
        },
        {
          "table": "rootbeerreview",
          "count": 38
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "rootbeer",
            "rootbeerbrand"
          ],
          "count": 43
        },
        {
          "tables": [
            "`transaction`",
            "customers"
          ],
          "count": 28
        },
        {
          "tables": [
            "`transaction`",
            "rootbeer"
          ],
          "count": 25
        },
        {
          "tables": [
            "rootbeerbrand",
            "rootbeerreview"
          ],
          "count": 23
        },
        {
          "tables": [
            "`transaction`",
            "rootbeerbrand"
          ],
          "count": 22
        }
      ]
    },
    {
      "db_id": "professional_basketball",
      "score": 257.0,
      "join_count": 117,
      "unique_tables": 11,
      "avg_tables_per_join": 2.1965811965811968,
      "most_common_tables": [
        {
          "table": "players",
          "count": 69
        },
        {
          "table": "teams",
          "count": 60
        },
        {
          "table": "players_teams",
          "count": 51
        },
        {
          "table": "player_allstar",
          "count": 35
        },
        {
          "table": "coaches",
          "count": 26
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "players_teams",
            "teams"
          ],
          "count": 26
        },
        {
          "tables": [
            "players",
            "players_teams"
          ],
          "count": 25
        },
        {
          "tables": [
            "player_allstar",
            "players"
          ],
          "count": 23
        },
        {
          "tables": [
            "awards_players",
            "players"
          ],
          "count": 13
        },
        {
          "tables": [
            "coaches",
            "teams"
          ],
          "count": 11
        }
      ]
    },
    {
      "db_id": "legislator",
      "score": 253.0,
      "join_count": 122,
      "unique_tables": 7,
      "avg_tables_per_join": 2.0737704918032787,
      "most_common_tables": [
        {
          "table": "current",
          "count": 123
        },
        {
          "table": "`current-terms`",
          "count": 74
        },
        {
          "table": "historical",
          "count": 40
        },
        {
          "table": "`social-media`",
          "count": 36
        },
        {
          "table": "`historical-terms`",
          "count": 29
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "`current-terms`",
            "current"
          ],
          "count": 64
        },
        {
          "tables": [
            "`social-media`",
            "current"
          ],
          "count": 32
        },
        {
          "tables": [
            "`historical-terms`",
            "historical"
          ],
          "count": 25
        },
        {
          "tables": [
            "(",
            "current"
          ],
          "count": 8
        },
        {
          "tables": [
            "(",
            "`current-terms`"
          ],
          "count": 6
        }
      ]
    },
    {
      "db_id": "car_retails",
      "score": 251.0,
      "join_count": 105,
      "unique_tables": 9,
      "avg_tables_per_join": 2.3904761904761904,
      "most_common_tables": [
        {
          "table": "customers",
          "count": 64
        },
        {
          "table": "employees",
          "count": 47
        },
        {
          "table": "orderdetails",
          "count": 45
        },
        {
          "table": "orders",
          "count": 38
        },
        {
          "table": "products",
          "count": 37
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "orderdetails",
            "products"
          ],
          "count": 33
        },
        {
          "tables": [
            "customers",
            "orders"
          ],
          "count": 25
        },
        {
          "tables": [
            "orderdetails",
            "orders"
          ],
          "count": 25
        },
        {
          "tables": [
            "customers",
            "employees"
          ],
          "count": 23
        },
        {
          "tables": [
            "employees",
            "offices"
          ],
          "count": 23
        }
      ]
    },
    {
      "db_id": "donor",
      "score": 250.0,
      "join_count": 117,
      "unique_tables": 6,
      "avg_tables_per_join": 2.1367521367521367,
      "most_common_tables": [
        {
          "table": "projects",
          "count": 118
        },
        {
          "table": "donations",
          "count": 79
        },
        {
          "table": "essays",
          "count": 56
        },
        {
          "table": "resources",
          "count": 47
        },
        {
          "table": "(",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "donations",
            "projects"
          ],
          "count": 44
        },
        {
          "tables": [
            "projects",
            "resources"
          ],
          "count": 39
        },
        {
          "tables": [
            "essays",
            "projects"
          ],
          "count": 37
        },
        {
          "tables": [
            "donations",
            "essays"
          ],
          "count": 25
        },
        {
          "tables": [
            "essays",
            "resources"
          ],
          "count": 5
        }
      ]
    },
    {
      "db_id": "movie_platform",
      "score": 244.00000000000003,
      "join_count": 117,
      "unique_tables": 5,
      "avg_tables_per_join": 2.0854700854700856,
      "most_common_tables": [
        {
          "table": "movies",
          "count": 120
        },
        {
          "table": "ratings",
          "count": 95
        },
        {
          "table": "lists",
          "count": 48
        },
        {
          "table": "lists_users",
          "count": 37
        },
        {
          "table": "ratings_users",
          "count": 4
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "movies",
            "ratings"
          ],
          "count": 93
        },
        {
          "tables": [
            "lists",
            "lists_users"
          ],
          "count": 28
        },
        {
          "tables": [
            "lists_users",
            "ratings"
          ],
          "count": 6
        },
        {
          "tables": [
            "movies",
            "movies"
          ],
          "count": 5
        },
        {
          "tables": [
            "lists",
            "ratings"
          ],
          "count": 5
        }
      ]
    },
    {
      "db_id": "university",
      "score": 243.00000000000003,
      "join_count": 105,
      "unique_tables": 6,
      "avg_tables_per_join": 2.3142857142857145,
      "most_common_tables": [
        {
          "table": "university",
          "count": 92
        },
        {
          "table": "university_year",
          "count": 74
        },
        {
          "table": "university_ranking_year",
          "count": 45
        },
        {
          "table": "ranking_criteria",
          "count": 38
        },
        {
          "table": "country",
          "count": 33
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "university",
            "university_year"
          ],
          "count": 42
        },
        {
          "tables": [
            "university",
            "university_ranking_year"
          ],
          "count": 33
        },
        {
          "tables": [
            "country",
            "university"
          ],
          "count": 31
        },
        {
          "tables": [
            "ranking_criteria",
            "university_ranking_year"
          ],
          "count": 25
        },
        {
          "tables": [
            "ranking_criteria",
            "university"
          ],
          "count": 21
        }
      ]
    },
    {
      "db_id": "world_development_indicators",
      "score": 242.0,
      "join_count": 109,
      "unique_tables": 18,
      "avg_tables_per_join": 2.220183486238532,
      "most_common_tables": [
        {
          "table": "Country",
          "count": 126
        },
        {
          "table": "Indicators",
          "count": 71
        },
        {
          "table": "CountryNotes",
          "count": 35
        },
        {
          "table": "Series",
          "count": 26
        },
        {
          "table": "country",
          "count": 14
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Country",
            "Indicators"
          ],
          "count": 60
        },
        {
          "tables": [
            "Country",
            "CountryNotes"
          ],
          "count": 34
        },
        {
          "tables": [
            "Country",
            "FootNotes"
          ],
          "count": 14
        },
        {
          "tables": [
            "Indicators",
            "Series"
          ],
          "count": 10
        },
        {
          "tables": [
            "Country",
            "Series"
          ],
          "count": 10
        }
      ]
    },
    {
      "db_id": "image_and_language",
      "score": 237.00000000000003,
      "join_count": 102,
      "unique_tables": 9,
      "avg_tables_per_join": 2.323529411764706,
      "most_common_tables": [
        {
          "table": "IMG_OBJ",
          "count": 90
        },
        {
          "table": "OBJ_CLASSES",
          "count": 66
        },
        {
          "table": "IMG_REL",
          "count": 29
        },
        {
          "table": "ATT_CLASSES",
          "count": 29
        },
        {
          "table": "IMG_OBJ_ATT",
          "count": 26
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "IMG_OBJ",
            "OBJ_CLASSES"
          ],
          "count": 61
        },
        {
          "tables": [
            "ATT_CLASSES",
            "IMG_OBJ_ATT"
          ],
          "count": 22
        },
        {
          "tables": [
            "IMG_REL",
            "PRED_CLASSES"
          ],
          "count": 21
        },
        {
          "tables": [
            "ATT_CLASSES",
            "IMG_OBJ"
          ],
          "count": 13
        },
        {
          "tables": [
            "IMG_OBJ",
            "IMG_OBJ_ATT"
          ],
          "count": 11
        }
      ]
    },
    {
      "db_id": "law_episode",
      "score": 232.00000000000003,
      "join_count": 105,
      "unique_tables": 7,
      "avg_tables_per_join": 2.2095238095238097,
      "most_common_tables": [
        {
          "table": "Episode",
          "count": 72
        },
        {
          "table": "Person",
          "count": 56
        },
        {
          "table": "Credit",
          "count": 42
        },
        {
          "table": "Award",
          "count": 40
        },
        {
          "table": "Vote",
          "count": 20
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Credit",
            "Person"
          ],
          "count": 35
        },
        {
          "tables": [
            "Credit",
            "Episode"
          ],
          "count": 23
        },
        {
          "tables": [
            "Award",
            "Person"
          ],
          "count": 22
        },
        {
          "tables": [
            "Episode",
            "Vote"
          ],
          "count": 18
        },
        {
          "tables": [
            "Episode",
            "Person"
          ],
          "count": 17
        }
      ]
    },
    {
      "db_id": "shipping",
      "score": 220.0,
      "join_count": 99,
      "unique_tables": 6,
      "avg_tables_per_join": 2.2222222222222223,
      "most_common_tables": [
        {
          "table": "shipment",
          "count": 100
        },
        {
          "table": "customer",
          "count": 37
        },
        {
          "table": "driver",
          "count": 37
        },
        {
          "table": "city",
          "count": 34
        },
        {
          "table": "truck",
          "count": 19
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "driver",
            "shipment"
          ],
          "count": 38
        },
        {
          "tables": [
            "customer",
            "shipment"
          ],
          "count": 33
        },
        {
          "tables": [
            "city",
            "shipment"
          ],
          "count": 31
        },
        {
          "tables": [
            "shipment",
            "truck"
          ],
          "count": 18
        },
        {
          "tables": [
            "city",
            "driver"
          ],
          "count": 7
        }
      ]
    },
    {
      "db_id": "shakespeare",
      "score": 219.0,
      "join_count": 86,
      "unique_tables": 5,
      "avg_tables_per_join": 2.546511627906977,
      "most_common_tables": [
        {
          "table": "works",
          "count": 73
        },
        {
          "table": "chapters",
          "count": 70
        },
        {
          "table": "paragraphs",
          "count": 57
        },
        {
          "table": "characters",
          "count": 43
        },
        {
          "table": "(",
          "count": 3
        }
      ],
      "most_common_joined_pairs": [
        
        {
          "tables": [
            "chapters",
            "works"
          ],
          "count": 59
        },
        {
          "tables": [
            "characters",
            "paragraphs"
          ],
          "count": 38
        },
        {
          "tables": [
            "chapters",
            "paragraphs"
          ],
          "count": 35
        },
        {
          "tables": [
            "paragraphs",
            "works"
          ],
          "count": 24
        },
        {
          "tables": [
            "chapters",
            "characters"
          ],
          "count": 20
        }
      ]
    },
    {
      "db_id": "cs_semester",
      "score": 213.0,
      "join_count": 83,
      "unique_tables": 9,
      "avg_tables_per_join": 2.566265060240964,
      "most_common_tables": [
        {
          "table": "student",
          "count": 73
        },
        {
          "table": "course",
          "count": 58
        },
        {
          "table": "registration",
          "count": 54
        },
        {
          "table": "RA",
          "count": 47
        },
        {
          "table": "prof",
          "count": 35
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "course",
            "registration"
          ],
          "count": 45
        },
        {
          "tables": [
            "registration",
            "student"
          ],
          "count": 32
        },
        {
          "tables": [
            "RA",
            "student"
          ],
          "count": 28
        },
        {
          "tables": [
            "course",
            "student"
          ],
          "count": 27
        },
        {
          "tables": [
            "RA",
            "prof"
          ],
          "count": 25
        }
      ]
    },
    {
      "db_id": "movielens",
      "score": 212.0,
      "join_count": 92,
      "unique_tables": 8,
      "avg_tables_per_join": 2.3043478260869565,
      "most_common_tables": [
        {
          "table": "movies",
          "count": 52
        },
        {
          "table": "u2base",
          "count": 49
        },
        {
          "table": "movies2directors",
          "count": 43
        },
        {
          "table": "movies2actors",
          "count": 28
        },
        {
          "table": "users",
          "count": 21
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "u2base",
            "users"
          ],
          "count": 21
        },
        {
          "tables": [
            "movies",
            "u2base"
          ],
          "count": 21
        },
        {
          "tables": [
            "movies",
            "movies2directors"
          ],
          "count": 18
        },
        {
          "tables": [
            "movies",
            "movies2actors"
          ],
          "count": 16
        },
        {
          "tables": [
            "actors",
            "movies2actors"
          ],
          "count": 14
        }
      ]
    },
    {
      "db_id": "cars",
      "score": 203.99999999999997,
      "join_count": 84,
      "unique_tables": 4,
      "avg_tables_per_join": 2.4285714285714284,
      "most_common_tables": [
        {
          "table": "data",
          "count": 71
        },
        {
          "table": "production",
          "count": 52
        },
        {
          "table": "price",
          "count": 48
        },
        {
          "table": "country",
          "count": 36
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "data",
            "price"
          ],
          "count": 43
        },
        {
          "tables": [
            "data",
            "production"
          ],
          "count": 40
        },
        {
          "tables": [
            "country",
            "production"
          ],
          "count": 36
        },
        {
          "tables": [
            "country",
            "data"
          ],
          "count": 22
        },
        {
          "tables": [
            "price",
            "production"
          ],
          "count": 14
        }
      ]
    },
    {
      "db_id": "codebase_comments",
      "score": 203.0,
      "join_count": 99,
      "unique_tables": 5,
      "avg_tables_per_join": 2.0505050505050506,
      "most_common_tables": [
        {
          "table": "Solution",
          "count": 102
        },
        {
          "table": "Repo",
          "count": 76
        },
        {
          "table": "Method",
          "count": 64
        },
        {
          "table": "solution",
          "count": 1
        },
        {
          "table": "the",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Repo",
            "Solution"
          ],
          "count": 64
        },
        {
          "tables": [
            "Method",
            "Solution"
          ],
          "count": 47
        },
        {
          "tables": [
            "Repo",
            "Repo"
          ],
          "count": 7
        },
        {
          "tables": [
            "Method",
            "Repo"
          ],
          "count": 4
        },
        {
          "tables": [
            "Solution",
            "the"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "menu",
      "score": 194.00000000000003,
      "join_count": 79,
      "unique_tables": 4,
      "avg_tables_per_join": 2.4556962025316458,
      "most_common_tables": [
        {
          "table": "MenuItem",
          "count": 59
        },
        {
          "table": "Menu",
          "count": 58
        },
        {
          "table": "Dish",
          "count": 56
        },
        {
          "table": "MenuPage",
          "count": 50
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Dish",
            "MenuItem"
          ],
          "count": 47
        },
        {
          "tables": [
            "Menu",
            "MenuPage"
          ],
          "count": 40
        },
        {
          "tables": [
            "MenuItem",
            "MenuPage"
          ],
          "count": 28
        },
        {
          "tables": [
            "Dish",
            "MenuPage"
          ],
          "count": 18
        },
        {
          "tables": [
            "Menu",
            "MenuItem"
          ],
          "count": 18
        }
      ]
    },
    {
      "db_id": "sales",
      "score": 184.0,
      "join_count": 81,
      "unique_tables": 5,
      "avg_tables_per_join": 2.271604938271605,
      "most_common_tables": [
        {
          "table": "Sales",
          "count": 91
        },
        {
          "table": "Products",
          "count": 69
        },
        {
          "table": "Customers",
          "count": 36
        },
        {
          "table": "Employees",
          "count": 24
        },
        {
          "table": "(",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Products",
            "Sales"
          ],
          "count": 52
        },
        {
          "tables": [
            "Customers",
            "Sales"
          ],
          "count": 34
        },
        {
          "tables": [
            "Employees",
            "Sales"
          ],
          "count": 20
        },
        {
          "tables": [
            "Customers",
            "Products"
          ],
          "count": 12
        },
        {
          "tables": [
            "Employees",
            "Products"
          ],
          "count": 7
        }
      ]
    },
    {
      "db_id": "ice_hockey_draft",
      "score": 169.0,
      "join_count": 79,
      "unique_tables": 5,
      "avg_tables_per_join": 2.1392405063291138,
      "most_common_tables": [
        {
          "table": "PlayerInfo",
          "count": 91
        },
        {
          "table": "SeasonStatus",
          "count": 50
        },
        {
          "table": "height_info",
          "count": 22
        },
        {
          "table": "weight_info",
          "count": 22
        },
        {
          "table": "(",
          "count": 5
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "PlayerInfo",
            "SeasonStatus"
          ],
          "count": 54
        },
        {
          "tables": [
            "PlayerInfo",
            "height_info"
          ],
          "count": 27
        },
        {
          "tables": [
            "PlayerInfo",
            "weight_info"
          ],
          "count": 26
        },
        {
          "tables": [
            "PlayerInfo",
            "PlayerInfo"
          ],
          "count": 8
        },
        {
          "tables": [
            "(",
            "SeasonStatus"
          ],
          "count": 8
        }
      ]
    },
    {
      "db_id": "bike_share_1",
      "score": 166.0,
      "join_count": 82,
      "unique_tables": 4,
      "avg_tables_per_join": 2.024390243902439,
      "most_common_tables": [
        {
          "table": "trip",
          "count": 99
        },
        {
          "table": "station",
          "count": 64
        },
        {
          "table": "weather",
          "count": 45
        },
        {
          "table": "status",
          "count": 10
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "station",
            "trip"
          ],
          "count": 57
        },
        {
          "tables": [
            "trip",
            "weather"
          ],
          "count": 38
        },
        {
          "tables": [
            "station",
            "status"
          ],
          "count": 10
        },
        {
          "tables": [
            "station",
            "station"
          ],
          "count": 7
        },
        {
          "tables": [
            "trip",
            "trip"
          ],
          "count": 6
        }
      ]
    },
    {
      "db_id": "cookbook",
      "score": 162.00000000000003,
      "join_count": 69,
      "unique_tables": 4,
      "avg_tables_per_join": 2.347826086956522,
      "most_common_tables": [
        {
          "table": "Recipe",
          "count": 54
        },
        {
          "table": "Quantity",
          "count": 41
        },
        {
          "table": "Nutrition",
          "count": 35
        },
        {
          "table": "Ingredient",
          "count": 34
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Ingredient",
            "Quantity"
          ],
          "count": 36
        },
        {
          "tables": [
            "Nutrition",
            "Recipe"
          ],
          "count": 30
        },
        {
          "tables": [
            "Quantity",
            "Recipe"
          ],
          "count": 25
        },
        {
          "tables": [
            "Ingredient",
            "Recipe"
          ],
          "count": 19
        },
        {
          "tables": [
            "Nutrition",
            "Quantity"
          ],
          "count": 6
        }
      ]
    },
    {
      "db_id": "disney",
      "score": 161.00000000000003,
      "join_count": 74,
      "unique_tables": 7,
      "avg_tables_per_join": 2.175675675675676,
      "most_common_tables": [
        {
          "table": "characters",
          "count": 55
        },
        {
          "table": "movies_total_gross",
          "count": 52
        },
        {
          "table": "director",
          "count": 50
        },
        {
          "table": "`voice-actors`",
          "count": 35
        },
        {
          "table": "revenue",
          "count": 5
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "director",
            "movies_total_gross"
          ],
          "count": 24
        },
        {
          "tables": [
            "characters",
            "director"
          ],
          "count": 20
        },
        {
          "tables": [
            "characters",
            "movies_total_gross"
          ],
          "count": 20
        },
        {
          "tables": [
            "`voice-actors`",
            "characters"
          ],
          "count": 14
        },
        {
          "tables": [
            "`voice-actors`",
            "director"
          ],
          "count": 8
        }
      ]
    },
    {
      "db_id": "restaurant",
      "score": 159.0,
      "join_count": 78,
      "unique_tables": 3,
      "avg_tables_per_join": 2.0384615384615383,
      "most_common_tables": [
        {
          "table": "generalinfo",
          "count": 85
        },
        {
          "table": "location",
          "count": 64
        },
        {
          "table": "geographic",
          "count": 53
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "generalinfo",
            "location"
          ],
          "count": 43
        },
        {
          "tables": [
            "generalinfo",
            "geographic"
          ],
          "count": 28
        },
        {
          "tables": [
            "geographic",
            "location"
          ],
          "count": 13
        }
      ]
    },
    {
      "db_id": "world",
      "score": 156.0,
      "join_count": 76,
      "unique_tables": 4,
      "avg_tables_per_join": 2.0526315789473686,
      "most_common_tables": [
        {
          "table": "Country",
          "count": 90
        },
        {
          "table": "City",
          "count": 47
        },
        {
          "table": "CountryLanguage",
          "count": 44
        },
        {
          "table": "(",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "City",
            "Country"
          ],
          "count": 40
        },
        {
          "tables": [
            "Country",
            "CountryLanguage"
          ],
          "count": 39
        },
        {
          "tables": [
            "City",
            "CountryLanguage"
          ],
          "count": 6
        },
        {
          "tables": [
            "Country",
            "Country"
          ],
          "count": 3
        },
        {
          "tables": [
            "(",
            "City"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "airline",
      "score": 144.0,
      "join_count": 66,
      "unique_tables": 4,
      "avg_tables_per_join": 2.1818181818181817,
      "most_common_tables": [
        {
          "table": "Airlines",
          "count": 88
        },
        {
          "table": "`Air",
          "count": 50
        },
        {
          "table": "Airports",
          "count": 39
        },
        {
          "table": "(",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Airlines",
            "`Air"
          ],
          "count": 49
        },
        {
          "tables": [
            "Airlines",
            "Airports"
          ],
          "count": 40
        },
        {
          "tables": [
            "Airports",
            "`Air"
          ],
          "count": 11
        },
        {
          "tables": [
            "Airlines",
            "Airlines"
          ],
          "count": 8
        },
        {
          "tables": [
            "Airports",
            "Airports"
          ],
          "count": 2
        }
      ]
    },
    {
      "db_id": "book_publishing_company",
      "score": 140.0,
      "join_count": 62,
      "unique_tables": 10,
      "avg_tables_per_join": 2.2580645161290325,
      "most_common_tables": [
        {
          "table": "titles",
          "count": 46
        },
        {
          "table": "publishers",
          "count": 25
        },
        {
          "table": "sales",
          "count": 22
        },
        {
          "table": "employee",
          "count": 21
        },
        {
          "table": "jobs",
          "count": 13
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "sales",
            "titles"
          ],
          "count": 19
        },
        {
          "tables": [
            "publishers",
            "titles"
          ],
          "count": 19
        },
        {
          "tables": [
            "employee",
            "jobs"
          ],
          "count": 13
        },
        {
          "tables": [
            "sales",
            "stores"
          ],
          "count": 10
        },
        {
          "tables": [
            "roysched",
            "titles"
          ],
          "count": 9
        }
      ]
    },
    {
      "db_id": "food_inspection",
      "score": 140.0,
      "join_count": 65,
      "unique_tables": 4,
      "avg_tables_per_join": 2.1538461538461537,
      "most_common_tables": [
        {
          "table": "businesses",
          "count": 71
        },
        {
          "table": "inspections",
          "count": 47
        },
        {
          "table": "violations",
          "count": 44
        },
        {
          "table": "(",
          "count": 5
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "businesses",
            "violations"
          ],
          "count": 40
        },
        {
          "tables": [
            "businesses",
            "inspections"
          ],
          "count": 37
        },
        {
          "tables": [
            "inspections",
            "violations"
          ],
          "count": 10
        },
        {
          "tables": [
            "(",
            "businesses"
          ],
          "count": 5
        },
        {
          "tables": [
            "inspections",
            "inspections"
          ],
          "count": 3
        }
      ]
    },
    {
      "db_id": "language_corpus",
      "score": 137.0,
      "join_count": 61,
      "unique_tables": 6,
      "avg_tables_per_join": 2.2459016393442623,
      "most_common_tables": [
        {
          "table": "words",
          "count": 88
        },
        {
          "table": "pages",
          "count": 71
        },
        {
          "table": "biwords",
          "count": 41
        },
        {
          "table": "pages_words",
          "count": 37
        },
        {
          "table": "langs",
          "count": 15
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "biwords",
            "words"
          ],
          "count": 29
        },
        {
          "tables": [
            "pages",
            "pages_words"
          ],
          "count": 25
        },
        {
          "tables": [
            "pages_words",
            "words"
          ],
          "count": 21
        },
        {
          "tables": [
            "words",
            "words"
          ],
          "count": 16
        },
        {
          "tables": [
            "pages",
            "words"
          ],
          "count": 13
        }
      ]
    },
    {
      "db_id": "college_completion",
      "score": 136.0,
      "join_count": 67,
      "unique_tables": 5,
      "avg_tables_per_join": 2.029850746268657,
      "most_common_tables": [
        {
          "table": "institution_details",
          "count": 74
        },
        {
          "table": "institution_grads",
          "count": 44
        },
        {
          "table": "state_sector_grads",
          "count": 25
        },
        {
          "table": "state_sector_details",
          "count": 21
        },
        {
          "table": "(",
          "count": 6
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "institution_details",
            "institution_grads"
          ],
          "count": 56
        },
        {
          "tables": [
            "institution_details",
            "state_sector_grads"
          ],
          "count": 19
        },
        {
          "tables": [
            "institution_details",
            "state_sector_details"
          ],
          "count": 14
        },
        {
          "tables": [
            "institution_details",
            "institution_details"
          ],
          "count": 9
        },
        {
          "tables": [
            "state_sector_details",
            "state_sector_grads"
          ],
          "count": 9
        }
      ]
    },
    {
      "db_id": "sales_in_weather",
      "score": 131.0,
      "join_count": 53,
      "unique_tables": 4,
      "avg_tables_per_join": 2.4716981132075473,
      "most_common_tables": [
        {
          "table": "relation",
          "count": 68
        },
        {
          "table": "weather",
          "count": 66
        },
        {
          "table": "sales_in_weather",
          "count": 44
        },
        {
          "table": "(",
          "count": 4
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "relation",
            "weather"
          ],
          "count": 62
        },
        {
          "tables": [
            "relation",
            "sales_in_weather"
          ],
          "count": 47
        },
        {
          "tables": [
            "sales_in_weather",
            "weather"
          ],
          "count": 37
        },
        {
          "tables": [
            "relation",
            "relation"
          ],
          "count": 7
        },
        {
          "tables": [
            "weather",
            "weather"
          ],
          "count": 6
        }
      ]
    },
    {
      "db_id": "computer_student",
      "score": 122.0,
      "join_count": 53,
      "unique_tables": 5,
      "avg_tables_per_join": 2.30188679245283,
      "most_common_tables": [
        {
          "table": "taughtBy",
          "count": 45
        },
        {
          "table": "person",
          "count": 39
        },
        {
          "table": "course",
          "count": 35
        },
        {
          "table": "advisedBy",
          "count": 21
        },
        {
          "table": "(",
          "count": 2
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "course",
            "taughtBy"
          ],
          "count": 29
        },
        {
          "tables": [
            "person",
            "taughtBy"
          ],
          "count": 21
        },
        {
          "tables": [
            "advisedBy",
            "person"
          ],
          "count": 16
        },
        {
          "tables": [
            "course",
            "person"
          ],
          "count": 11
        },
        {
          "tables": [
            "advisedBy",
            "taughtBy"
          ],
          "count": 4
        }
      ]
    },
    {
      "db_id": "social_media",
      "score": 121.99999999999999,
      "join_count": 56,
      "unique_tables": 4,
      "avg_tables_per_join": 2.1785714285714284,
      "most_common_tables": [
        {
          "table": "twitter",
          "count": 74
        },
        {
          "table": "location",
          "count": 39
        },
        {
          "table": "user",
          "count": 29
        },
        {
          "table": "(",
          "count": 4
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "location",
            "twitter"
          ],
          "count": 35
        },
        {
          "tables": [
            "twitter",
            "user"
          ],
          "count": 28
        },
        {
          "tables": [
            "location",
            "user"
          ],
          "count": 7
        },
        {
          "tables": [
            "(",
            "twitter"
          ],
          "count": 4
        },
        {
          "tables": [
            "(",
            "location"
          ],
          "count": 3
        }
      ]
    },
    {
      "db_id": "movie",
      "score": 112.0,
      "join_count": 42,
      "unique_tables": 4,
      "avg_tables_per_join": 2.6666666666666665,
      "most_common_tables": [
        {
          "table": "characters",
          "count": 42
        },
        {
          "table": "movie",
          "count": 37
        },
        {
          "table": "actor",
          "count": 37
        },
        {
          "table": "actor)",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "actor",
            "characters"
          ],
          "count": 36
        },
        {
          "tables": [
            "characters",
            "movie"
          ],
          "count": 34
        },
        {
          "tables": [
            "actor",
            "movie"
          ],
          "count": 28
        },
        {
          "tables": [
            "actor)",
            "characters"
          ],
          "count": 1
        },
        {
          "tables": [
            "actor",
            "actor)"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "software_company",
      "score": 101.0,
      "join_count": 46,
      "unique_tables": 4,
      "avg_tables_per_join": 2.1956521739130435,
      "most_common_tables": [
        {
          "table": "Customers",
          "count": 63
        },
        {
          "table": "Demog",
          "count": 48
        },
        {
          "table": "Mailings1_2",
          "count": 23
        },
        {
          "table": "mailings3",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Customers",
            "Demog"
          ],
          "count": 37
        },
        {
          "tables": [
            "Customers",
            "Mailings1_2"
          ],
          "count": 18
        },
        {
          "tables": [
            "Demog",
            "Mailings1_2"
          ],
          "count": 10
        },
        {
          "tables": [
            "Mailings1_2",
            "Mailings1_2"
          ],
          "count": 1
        },
        {
          "tables": [
            "Customers",
            "mailings3"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "music_platform_2",
      "score": 98.0,
      "join_count": 46,
      "unique_tables": 5,
      "avg_tables_per_join": 2.130434782608696,
      "most_common_tables": [
        {
          "table": "podcasts",
          "count": 47
        },
        {
          "table": "reviews",
          "count": 47
        },
        {
          "table": "categories",
          "count": 37
        },
        {
          "table": "runs",
          "count": 2
        },
        {
          "table": "(",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "podcasts",
            "reviews"
          ],
          "count": 26
        },
        {
          "tables": [
            "categories",
            "reviews"
          ],
          "count": 17
        },
        {
          "tables": [
            "categories",
            "podcasts"
          ],
          "count": 15
        }
      ]
    },
    {
      "db_id": "human_resources",
      "score": 95.0,
      "join_count": 43,
      "unique_tables": 3,
      "avg_tables_per_join": 2.2093023255813953,
      "most_common_tables": [
        {
          "table": "employee",
          "count": 53
        },
        {
          "table": "position",
          "count": 36
        },
        {
          "table": "location",
          "count": 26
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "employee",
            "position"
          ],
          "count": 32
        },
        {
          "tables": [
            "employee",
            "location"
          ],
          "count": 26
        },
        {
          "tables": [
            "location",
            "position"
          ],
          "count": 12
        },
        {
          "tables": [
            "employee",
            "employee"
          ],
          "count": 1
        },
        {
          "tables": [
            "position",
            "position"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "mental_health_survey",
      "score": 84.0,
      "join_count": 39,
      "unique_tables": 4,
      "avg_tables_per_join": 2.1538461538461537,
      "most_common_tables": [
        {
          "table": "Answer",
          "count": 55
        },
        {
          "table": "Question",
          "count": 41
        },
        {
          "table": "Survey",
          "count": 10
        },
        {
          "table": "(",
          "count": 3
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Answer",
            "Question"
          ],
          "count": 52
        },
        {
          "tables": [
            "Answer",
            "Survey"
          ],
          "count": 14
        },
        {
          "tables": [
            "Answer",
            "Answer"
          ],
          "count": 8
        },
        {
          "tables": [
            "(",
            "Answer"
          ],
          "count": 6
        },
        {
          "tables": [
            "Question",
            "Survey"
          ],
          "count": 6
        }
      ]
    },
    {
      "db_id": "coinmarketcap",
      "score": 84.0,
      "join_count": 42,
      "unique_tables": 2,
      "avg_tables_per_join": 2.0,
      "most_common_tables": [
        {
          "table": "coins",
          "count": 50
        },
        {
          "table": "historical",
          "count": 50
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "coins",
            "historical"
          ],
          "count": 52
        },
        {
          "tables": [
            "historical",
            "historical"
          ],
          "count": 8
        },
        {
          "tables": [
            "coins",
            "coins"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "european_football_1",
      "score": 81.0,
      "join_count": 40,
      "unique_tables": 3,
      "avg_tables_per_join": 2.025,
      "most_common_tables": [
        {
          "table": "matchs",
          "count": 58
        },
        {
          "table": "divisions",
          "count": 45
        },
        {
          "table": "(",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "divisions",
            "matchs"
          ],
          "count": 49
        },
        {
          "tables": [
            "matchs",
            "matchs"
          ],
          "count": 4
        },
        {
          "tables": [
            "(",
            "matchs"
          ],
          "count": 3
        },
        {
          "tables": [
            "(",
            "divisions"
          ],
          "count": 3
        },
        {
          "tables": [
            "divisions",
            "divisions"
          ],
          "count": 3
        }
      ]
    },
    {
      "db_id": "app_store",
      "score": 80.0,
      "join_count": 40,
      "unique_tables": 2,
      "avg_tables_per_join": 2.0,
      "most_common_tables": [
        {
          "table": "playstore",
          "count": 63
        },
        {
          "table": "user_reviews",
          "count": 50
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "playstore",
            "user_reviews"
          ],
          "count": 50
        },
        {
          "tables": [
            "playstore",
            "playstore"
          ],
          "count": 4
        },
        {
          "tables": [
            "user_reviews",
            "user_reviews"
          ],
          "count": 4
        }
      ]
    },
    {
      "db_id": "trains",
      "score": 68.0,
      "join_count": 28,
      "unique_tables": 4,
      "avg_tables_per_join": 2.4285714285714284,
      "most_common_tables": [
        {
          "table": "cars",
          "count": 41
        },
        {
          "table": "trains",
          "count": 33
        },
        {
          "table": "(",
          "count": 13
        },
        {
          "table": "(SELECT",
          "count": 2
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "cars",
            "trains"
          ],
          "count": 35
        },
        {
          "tables": [
            "(",
            "cars"
          ],
          "count": 25
        },
        {
          "tables": [
            "(",
            "trains"
          ],
          "count": 15
        },
        {
          "tables": [
            "cars",
            "cars"
          ],
          "count": 8
        },
        {
          "tables": [
            "(",
            "("
          ],
          "count": 4
        }
      ]
    },
    {
      "db_id": "music_tracker",
      "score": 60.0,
      "join_count": 30,
      "unique_tables": 2,
      "avg_tables_per_join": 2.0,
      "most_common_tables": [
        {
          "table": "torrents",
          "count": 46
        },
        {
          "table": "tags",
          "count": 31
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "tags",
            "torrents"
          ],
          "count": 30
        }
      ]
    },
    {
      "db_id": "genes",
      "score": 38.0,
      "join_count": 19,
      "unique_tables": 4,
      "avg_tables_per_join": 2.0,
      "most_common_tables": [
        {
          "table": "Genes",
          "count": 23
        },
        {
          "table": "Interactions",
          "count": 18
        },
        {
          "table": "Classification",
          "count": 5
        },
        {
          "table": "Genes;",
          "count": 1
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "Genes",
            "Interactions"
          ],
          "count": 20
        },
        {
          "tables": [
            "Classification",
            "Genes"
          ],
          "count": 4
        },
        {
          "tables": [
            "Genes",
            "Genes"
          ],
          "count": 3
        },
        {
          "tables": [
            "Interactions",
            "Interactions"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "citeseer",
      "score": 30.0,
      "join_count": 15,
      "unique_tables": 3,
      "avg_tables_per_join": 2.0,
      "most_common_tables": [
        {
          "table": "paper",
          "count": 15
        },
        {
          "table": "content",
          "count": 15
        },
        {
          "table": "cites",
          "count": 6
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "content",
            "paper"
          ],
          "count": 12
        },
        {
          "tables": [
            "cites",
            "content"
          ],
          "count": 2
        },
        {
          "tables": [
            "cites",
            "paper"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "shooting",
      "score": 29.000000000000004,
      "join_count": 14,
      "unique_tables": 3,
      "avg_tables_per_join": 2.0714285714285716,
      "most_common_tables": [
        {
          "table": "incidents",
          "count": 24
        },
        {
          "table": "officers",
          "count": 10
        },
        {
          "table": "subjects",
          "count": 9
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "incidents",
            "subjects"
          ],
          "count": 8
        },
        {
          "tables": [
            "incidents",
            "officers"
          ],
          "count": 7
        },
        {
          "tables": [
            "officers",
            "subjects"
          ],
          "count": 1
        }
      ]
    },
    {
      "db_id": "craftbeer",
      "score": 12.0,
      "join_count": 6,
      "unique_tables": 2,
      "avg_tables_per_join": 2.0,
      "most_common_tables": [
        {
          "table": "beers",
          "count": 7
        },
        {
          "table": "breweries",
          "count": 6
        }
      ],
      "most_common_joined_pairs": [
        {
          "tables": [
            "beers",
            "breweries"
          ],
          "count": 7
        },
        {
          "tables": [
            "beers",
            "beers"
          ],
          "count": 1
        }
      ]
    }
  ],
  "database_details": {
    "movie_platform": {
      "unique_tables": [
        "ratings_users",
        "movies",
        "ratings",
        "lists_users",
        "lists"
      ],
      "table_frequency": {
        "movies": 120,
        "ratings": 95,
        "ratings_users": 4,
        "lists": 48,
        "lists_users": 37
      },
      "table_pairs": {
        "('movies', 'ratings')": 93,
        "('movies', 'ratings_users')": 2,
        "('ratings', 'ratings_users')": 3,
        "('lists', 'lists_users')": 28,
        "('movies', 'movies')": 5,
        "('lists', 'ratings')": 5,
        "('lists', 'movies')": 4,
        "('lists_users', 'ratings')": 6,
        "('lists', 'lists')": 1,
        "('lists_users', 'movies')": 3
      },
      "join_examples": [
        {
          "question": "What is the average rating for movie titled 'When Will I Be Loved'?",
          "sql": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'",
          "tables_involved": [
            "movies",
            "ratings"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "What is the user avatar url for user 41579158? What is the latest movie rated by him / her?",
          "sql": "SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1",
          "tables_involved": [
            "movies",
            "ratings",
            "ratings_users"
          ],
          "join_conditions": [
            "T1.movi",
            "T3.us"
          ]
        },
        {
          "question": "List all movie title rated in April 2020 from user who was a trialist.",
          "sql": "SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'",
          "tables_involved": [
            "movies",
            "ratings"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "List ther users who gave the worst rating for movie 'Love Will Tear Us Apart'.",
          "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Love Will Tear Us Apart' AND T1.rating_score = 1",
          "tables_involved": [
            "ratings",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "List all movies with the best rating score. State the movie title and number of Mubi user who loves the movie.",
          "sql": "SELECT DISTINCT T2.movie_title, T2.movie_popularity FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5",
          "tables_involved": [
            "ratings",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "For all ratings which are rated in year 2020, name the movies which has the rating scored 4 and above.",
          "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTR(T1.rating_timestamp_utc, 1, 4) AS INTEGER) = 2020 AND CAST(SUBSTR(T1.rating_timestamp_utc, 6, 2) AS INTEGER) > 4",
          "tables_involved": [
            "ratings",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "For all movies where users left a critic, find the movie name, user, rating and critics comments from the user.",
          "sql": "SELECT T2.movie_title, T1.user_id, T1.rating_score, T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic IS NOT NULL",
          "tables_involved": [
            "ratings",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "For movie titled 'Welcome to the Dollhouse', how many percentage of the ratings were rated with highest score.",
          "sql": "SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'",
          "tables_involved": [
            "movies",
            "ratings"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "What is the percentage of rated movies were released in year 2021?",
          "sql": "SELECT CAST(SUM(CASE WHEN T1.movie_release_year = 2021 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id",
          "tables_involved": [
            "movies",
            "ratings"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "How many users gave \"Pavee Lackeen: The Traveller Girl\" movie a rating score of 4?",
          "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Pavee Lackeen: The Traveller Girl' AND T2.rating_score = 4",
          "tables_involved": [
            "movies",
            "ratings"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        }
      ]
    },
    "book_publishing_company": {
      "unique_tables": [
        "titleauthor",
        "jobs",
        "employee",
        "titles",
        "authors",
        "stores",
        "roysched",
        "sales",
        "publishers",
        "pub_info"
      ],
      "table_frequency": {
        "sales": 22,
        "titles": 46,
        "roysched": 9,
        "publishers": 25,
        "stores": 9,
        "employee": 21,
        "jobs": 13,
        "titleauthor": 5,
        "authors": 5,
        "pub_info": 2
      },
      "table_pairs": {
        "('sales', 'titles')": 19,
        "('roysched', 'titles')": 9,
        "('publishers', 'titles')": 19,
        "('stores', 'titles')": 5,
        "('sales', 'stores')": 10,
        "('sales', 'sales')": 3,
        "('publishers', 'roysched')": 3,
        "('employee', 'jobs')": 13,
        "('employee', 'publishers')": 4,
        "('jobs', 'publishers')": 2,
        "('titleauthor', 'titles')": 5,
        "('authors', 'titles')": 5,
        "('authors', 'titleauthor')": 5,
        "('titles', 'titles')": 2,
        "('pub_info', 'publishers')": 2,
        "('roysched', 'roysched')": 1,
        "('publishers', 'sales')": 2
      },
      "join_examples": [
        {
          "question": "What is the title with the most ordered quantity in year 1992?",
          "sql": "SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1",
          "tables_involved": [
            "sales",
            "titles"
          ],
          "join_conditions": [
            "T1.titl"
          ]
        },
        {
          "question": "List the title, price and publication date for all sales with 'ON invoice' payment terms.",
          "sql": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'",
          "tables_involved": [
            "sales",
            "titles"
          ],
          "join_conditions": [
            "T1.titl",
            "invoic"
          ]
        },
        {
          "question": "What is the title that have at least 10% royalty without minimum range amount.",
          "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange = 0 AND T2.royalty >= 10",
          "tables_involved": [
            "titles",
            "roysched"
          ],
          "join_conditions": [
            "T1.titl"
          ]
        },
        {
          "question": "State the title and royalty percentage for title ID BU2075 between 10000 to 50000 range.",
          "sql": "SELECT T1.title, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 10000 AND T2.hirange < 50000 AND T1.title_ID = 'BU2075'",
          "tables_involved": [
            "titles",
            "roysched"
          ],
          "join_conditions": [
            "T1.titl"
          ]
        },
        {
          "question": "Among the titles with royalty percentage, which title has the greatest royalty percentage. State it's minimum range to enjoy this royalty percentage.",
          "sql": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1",
          "tables_involved": [
            "titles",
            "roysched"
          ],
          "join_conditions": [
            "T1.titl"
          ]
        },
        {
          "question": "Provide a list of titles together with its publisher name for all publishers located in the USA.",
          "sql": "SELECT T1.title, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA'",
          "tables_involved": [
            "titles",
            "publishers"
          ],
          "join_conditions": [
            "T1.pub_id = T2.pub_id "
          ]
        },
        {
          "question": "State the royalty percentage for the most year to date sale title within the 20000 range.",
          "sql": "SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000",
          "tables_involved": [
            "titles",
            "roysched"
          ],
          "join_conditions": [
            "T1.titl"
          ]
        },
        {
          "question": "List all titles published in year 1991. Also provide notes details of the title and the publisher's name.",
          "sql": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'",
          "tables_involved": [
            "titles",
            "publishers"
          ],
          "join_conditions": [
            "T1.pub_id = T2.pub_id "
          ]
        },
        {
          "question": "List all titles with sales of quantity more than 20 and store located in the CA state.",
          "sql": "SELECT T1.title, T2.qty FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T2.stor_id = T3.stor_id WHERE T2.qty > 20 AND T3.state = 'CA'",
          "tables_involved": [
            "titles",
            "sales",
            "stores"
          ],
          "join_conditions": [
            "T1.titl",
            "T2.sto"
          ]
        },
        {
          "question": "Name the store with the highest quantity in sales? What is the least quantity title from the store's sale?",
          "sql": "SELECT T3.stor_id, T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE T3.stor_id = ( SELECT stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1 ) GROUP BY T3.stor_id, T2.title ORDER BY SUM(T1.qty) ASC LIMIT 1",
          "tables_involved": [
            "sales",
            "titles",
            "stores",
            "sales"
          ],
          "join_conditions": [
            "T1.titl",
            "T3.sto"
          ]
        }
      ]
    },
    "retail_complains": {
      "unique_tables": [
        "events",
        "(",
        "state",
        "district",
        "callcenterlogs",
        "reviews",
        "client"
      ],
      "table_frequency": {
        "callcenterlogs": 54,
        "client": 120,
        "events": 83,
        "district": 45,
        "reviews": 21,
        "(": 1,
        "state": 14
      },
      "table_pairs": {
        "('client', 'events')": 64,
        "('callcenterlogs', 'client')": 27,
        "('client', 'district')": 26,
        "('callcenterlogs', 'events')": 20,
        "('district', 'reviews')": 20,
        "('client', 'state')": 10,
        "('district', 'state')": 13,
        "('reviews', 'reviews')": 1,
        "('district', 'district')": 1,
        "('callcenterlogs', 'district')": 2,
        "('callcenterlogs', 'state')": 2,
        "('reviews', 'state')": 3,
        "('district', 'events')": 1,
        "('client', 'reviews')": 2,
        "('callcenterlogs', 'callcenterlogs')": 2,
        "('client', 'client')": 1
      },
      "join_examples": [
        {
          "question": "How many complaints have the client Diesel Galloway filed?",
          "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "What is the detailed product of the complaint filed by Diesel Galloway on 2014/7/3?",
          "sql": "SELECT T2.`Sub-product` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway' AND T2.`Date received` = '2014-07-03'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "Was the tag in the complaint filed by Matthew Pierce on 2016/10/28 approved by himself?",
          "sql": "SELECT CASE WHEN T2.`Consumer consent provided?` IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.`Date received` = '2016-10-28'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "For how long was the complaint filed by Matthew Pierce on 2016/10/28 delayed?",
          "sql": "SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.`Date received` = '2016-10-28'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL?",
          "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.`Date received` = '2017-03-27' AND T2.server = 'MICHAL'",
          "tables_involved": [
            "client",
            "callcenterlogs"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last?",
          "sql": "SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.`Date received` = '2017-03-27'",
          "tables_involved": [
            "client",
            "callcenterlogs"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "Among all the clients from the New York city, how many of them have filed a complaint on the issue of Deposits and withdrawals?",
          "sql": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "Please list the full names of all the clients whose complaints are still in progress.",
          "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'In progress'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "Among the clients who did receive a timely response for their complaint, how many of them are from New York?",
          "sql": "SELECT COUNT(T1.city) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Timely response?` = 'No' AND T1.city = 'New York City'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        },
        {
          "question": "How many complaints on credit cards in the year 2016 were filed by male clients?",
          "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'",
          "tables_involved": [
            "client",
            "events"
          ],
          "join_conditions": [
            "T1.cli"
          ]
        }
      ]
    },
    "movies_4": {
      "unique_tables": [
        "movie",
        "keyword",
        "person",
        "production_company",
        "(",
        "genre",
        "production_COUNTry",
        "COUNTry",
        "movie_languages",
        "language",
        "language_role",
        "movie_company",
        "movie_genres",
        "movie_cast",
        "movie_crew",
        "movie_keywords",
        "gender",
        "department"
      ],
      "table_frequency": {
        "production_company": 25,
        "movie_company": 27,
        "movie": 121,
        "(": 4,
        "movie_crew": 30,
        "person": 42,
        "movie_keywords": 15,
        "movie_cast": 27,
        "gender": 10,
        "keyword": 13,
        "department": 3,
        "movie_genres": 21,
        "genre": 20,
        "production_COUNTry": 13,
        "COUNTry": 13,
        "movie_languages": 14,
        "language": 12,
        "language_role": 2
      },
      "table_pairs": {
        "('movie_company', 'production_company')": 31,
        "('movie', 'production_company')": 25,
        "('movie', 'movie_company')": 27,
        "('(', 'production_company')": 5,
        "('(', 'movie_company')": 5,
        "('(', 'movie')": 4,
        "('movie', 'movie_crew')": 20,
        "('movie', 'person')": 27,
        "('movie_crew', 'person')": 24,
        "('movie', 'movie_keywords')": 12,
        "('movie', 'movie_cast')": 18,
        "('gender', 'movie')": 8,
        "('gender', 'movie_cast')": 12,
        "('keyword', 'movie_keywords')": 12,
        "('department', 'movie')": 2,
        "('department', 'movie_crew')": 3,
        "('department', 'person')": 2,
        "('movie_cast', 'person')": 16,
        "('movie', 'movie_genres')": 19,
        "('genre', 'movie')": 18,
        "('genre', 'movie_genres')": 20,
        "('gender', 'person')": 1,
        "('movie_cast', 'movie_crew')": 1,
        "('movie', 'production_COUNTry')": 12,
        "('COUNTry', 'movie')": 10,
        "('COUNTry', 'production_COUNTry')": 11,
        "('movie', 'movie_languages')": 13,
        "('language', 'movie')": 11,
        "('language', 'movie_languages')": 12,
        "('movie_genres', 'production_COUNTry')": 2,
        "('COUNTry', 'movie_genres')": 2,
        "('genre', 'production_COUNTry')": 2,
        "('COUNTry', 'genre')": 2,
        "('keyword', 'movie')": 9,
        "('language_role', 'movie')": 2,
        "('language_role', 'movie_languages')": 2,
        "('language', 'language_role')": 2,
        "('movie', 'movie')": 4,
        "('movie_company', 'movie_company')": 3,
        "('production_company', 'production_company')": 3,
        "('movie_cast', 'movie_cast')": 1,
        "('gender', 'gender')": 1
      },
      "join_examples": [
        {
          "question": "Please list the names of the production company of the movie \"Four Rooms\".",
          "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'",
          "tables_involved": [
            "production_company",
            "movie_company",
            "movie"
          ],
          "join_conditions": [
            "T1.company_id = T2.company_id INN",
            "T2.movi"
          ]
        },
        {
          "question": "How many production companies does the movie \"Four Rooms\" have?",
          "sql": "SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )",
          "tables_involved": [
            "(",
            "production_company",
            "movie_company",
            "movie"
          ],
          "join_conditions": [
            "T1.company_id = T2.company_id INN",
            "T2.movi"
          ]
        },
        {
          "question": "Please list the titles of all the movie produced by production company \"Universal Pictures\".",
          "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures'",
          "tables_involved": [
            "production_company",
            "movie_company",
            "movie"
          ],
          "join_conditions": [
            "T1.company_id = T2.company_id INN",
            "T2.movi"
          ]
        },
        {
          "question": "What is the title of the latest released movie produced by production company \"Universal Pictures\"?",
          "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures' ORDER BY T3.release_date DESC LIMIT 1",
          "tables_involved": [
            "production_company",
            "movie_company",
            "movie"
          ],
          "join_conditions": [
            "T1.company_id = T2.company_id INN",
            "T2.movi"
          ]
        },
        {
          "question": "What is the name of the director of photography of the movie \"Pirates of the Caribbean: At World's End\"?",
          "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Director of Photography'",
          "tables_involved": [
            "movie",
            "movie_crew",
            "person"
          ],
          "join_conditions": [
            "T1.movi",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "What was the job of Dariusz Wolski in the movie \"Pirates of the Caribbean: At World's End\"?",
          "sql": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'",
          "tables_involved": [
            "movie",
            "movie_crew",
            "person"
          ],
          "join_conditions": [
            "T1.movi",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\".",
          "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'",
          "tables_involved": [
            "movie",
            "movie_crew",
            "person"
          ],
          "join_conditions": [
            "T1.movi",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "How many crew members worked as producer in the movie \"Pirates of the Caribbean: At World's End\"?",
          "sql": "SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'",
          "tables_involved": [
            "movie",
            "movie_crew",
            "person"
          ],
          "join_conditions": [
            "T1.movi",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "Please list the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".",
          "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'",
          "tables_involved": [
            "movie",
            "movie_crew",
            "person"
          ],
          "join_conditions": [
            "T1.movi",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "In how many movie does Dariusz Wolski work as the director of photography?",
          "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
          "tables_involved": [
            "person",
            "movie_crew"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.p"
          ]
        }
      ]
    },
    "codebase_comments": {
      "unique_tables": [
        "Method",
        "Solution",
        "Repo",
        "the",
        "solution"
      ],
      "table_frequency": {
        "Method": 64,
        "Repo": 76,
        "solution": 1,
        "Solution": 102,
        "the": 1
      },
      "table_pairs": {
        "('Repo', 'Solution')": 64,
        "('Repo', 'Repo')": 7,
        "('Method', 'Solution')": 47,
        "('Method', 'Repo')": 4,
        "('Solution', 'the')": 1,
        "('Method', 'the')": 1,
        "('Solution', 'Solution')": 1
      },
      "join_examples": [
        {
          "question": "What is the github address of the \"nofear_Mara\\Mara.sln\" solution path?",
          "sql": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'",
          "tables_involved": [
            "Repo",
            "Solution"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2."
          ]
        },
        {
          "question": "Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation.",
          "sql": "SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )",
          "tables_involved": [
            "Repo",
            "Solution",
            "Repo"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2."
          ]
        },
        {
          "question": "What is the tokenized name of the solution whose path is \"maravillas_linq-to-delicious\\tasty.sln\"?",
          "sql": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'",
          "tables_involved": [
            "Solution",
            "Method"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.Id = T2.SolutionId "
          ]
        },
        {
          "question": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?",
          "sql": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1",
          "tables_involved": [
            "Repo",
            "Solution"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2."
          ]
        },
        {
          "question": "In the \"https://github.com/wallerdev/htmlsharp.git\", give all the linearized sequenced of API calls.",
          "sql": "SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'",
          "tables_involved": [
            "Repo",
            "Solution",
            "Method"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2.",
            "T2.Id = T3.SolutionId "
          ]
        },
        {
          "question": "How many solution paths are there inside the 2nd most popular repository?",
          "sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )",
          "tables_involved": [
            "Repo",
            "Solution",
            "Repo"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2."
          ]
        },
        {
          "question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"?",
          "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'",
          "tables_involved": [
            "Repo",
            "Solution"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2."
          ]
        },
        {
          "question": "What is the full comment on the method whose solution path is \"bmatzelle_nini\\Source\\Nini.sln\" with a tokenized name of \"alias text add alias\"?",
          "sql": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'",
          "tables_involved": [
            "Solution",
            "Method"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.Id = T2.SolutionId "
          ]
        },
        {
          "question": "What is the linearized sequenced of API calls of the method whose solution path is \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"?",
          "sql": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'",
          "tables_involved": [
            "Solution",
            "Method"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.Id = T2.SolutionId "
          ]
        },
        {
          "question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"?",
          "sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0",
          "tables_involved": [
            "Repo",
            "Solution"
          ],
          "join_conditions": [
            "AS T2 ON T1.Id = T2."
          ]
        }
      ]
    },
    "trains": {
      "unique_tables": [
        "cars",
        "trains",
        "(SELECT",
        "("
      ],
      "table_frequency": {
        "trains": 33,
        "cars": 41,
        "(": 13,
        "(SELECT": 2
      },
      "table_pairs": {
        "('cars', 'trains')": 35,
        "('(', 'trains')": 15,
        "('(', 'cars')": 25,
        "('(SELECT', 'cars')": 2,
        "('(SELECT', 'trains')": 2,
        "('cars', 'cars')": 8,
        "('trains', 'trains')": 1,
        "('(', '(')": 4
      },
      "join_examples": [
        {
          "question": "Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape?",
          "sql": "SELECT SUM(CASE WHEN T1.shape IN ('bucket', 'elipse') THEN 1 ELSE 0 end)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "T1.t",
            "= '"
          ]
        },
        {
          "question": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars.",
          "sql": "SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4",
          "tables_involved": [
            "trains",
            "(",
            "cars"
          ],
          "join_conditions": [
            "T1.id = T2.t",
            "= '"
          ]
        },
        {
          "question": "Please list the IDs of all the cars with double sides on trains that run in the west direction.",
          "sql": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "T1.t",
            "= '"
          ]
        },
        {
          "question": "Among the trains that run in the east direction, how many of them have more than 2 long cars?",
          "sql": "SELECT SUM(CASE WHEN T2.longCarsNum > 2 THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS longCarsNum FROM cars WHERE len = 'long' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'west'",
          "tables_involved": [
            "trains",
            "(",
            "cars"
          ],
          "join_conditions": [
            "T1.id = T2.t",
            "= '"
          ]
        },
        {
          "question": "Please list the directions in which the trains with at least one empty-loaded car run.",
          "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "F",
            "T1.t"
          ]
        },
        {
          "question": "In which direction does the train with an ellipse-shape car run?",
          "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape = 'ellipse'",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "F",
            "T1.t"
          ]
        },
        {
          "question": "What is the total number of short cars on all the trains that run in the east direction?",
          "sql": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "T1.t",
            "= '"
          ]
        },
        {
          "question": "Please list the shapes of all the head cars on the trains that run in the east direction.",
          "sql": "SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "T1.t",
            "= '",
            "= 1 G"
          ]
        },
        {
          "question": "How many cars on a train that runs in the east direction have a flat roof?",
          "sql": "SELECT SUM(CASE WHEN T1.roof = 'flat' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "T1.t",
            "= '"
          ]
        },
        {
          "question": "Among the cars on a train that runs in the east direction, how many of them have a flat roof and a circle load shape?",
          "sql": "SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat' ",
          "tables_involved": [
            "cars",
            "trains"
          ],
          "join_conditions": [
            "T1.t",
            "= '"
          ]
        }
      ]
    },
    "movie": {
      "unique_tables": [
        "movie",
        "actor)",
        "characters",
        "actor"
      ],
      "table_frequency": {
        "movie": 37,
        "characters": 42,
        "actor": 37,
        "actor)": 1
      },
      "table_pairs": {
        "('characters', 'movie')": 34,
        "('actor', 'movie')": 28,
        "('actor', 'characters')": 36,
        "('actor)', 'characters')": 1,
        "('actor', 'actor)')": 1,
        "('actor', 'actor')": 1
      },
      "join_examples": [
        {
          "question": "Please list the names of the characters in the movie Look Who's Talking.",
          "sql": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'",
          "tables_involved": [
            "movie",
            "characters"
          ],
          "join_conditions": [
            "T1.Movi"
          ]
        },
        {
          "question": "Which character has the longest screen time in the movie Batman?",
          "sql": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman' ORDER BY T2.screentime DESC LIMIT 1",
          "tables_involved": [
            "movie",
            "characters"
          ],
          "join_conditions": [
            "T1.Movi"
          ]
        },
        {
          "question": "Which actor played the role of Joker in the movie Batman?",
          "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.`Character Name` = 'Joker'",
          "tables_involved": [
            "movie",
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Movi",
            "T3.Acto"
          ]
        },
        {
          "question": "Please list the names of the actors who played a role in the movie Batman.",
          "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman'",
          "tables_involved": [
            "movie",
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Movi",
            "T3.Acto"
          ]
        },
        {
          "question": "Which movie is the character Dr. Archibald 'Moonlight' Graham from?",
          "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Dr. Archibald ''Moonlight'' Graham'",
          "tables_involved": [
            "movie",
            "characters"
          ],
          "join_conditions": [
            "T1.Movi"
          ]
        },
        {
          "question": "Please list the names of the movies starring Tom Cruise.",
          "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'",
          "tables_involved": [
            "movie",
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Movi",
            "T3.Acto"
          ]
        },
        {
          "question": "How many movies starring Morgan Freeman are suggested by parental guidance?",
          "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Morgan Freeman' AND T1.`MPAA Rating` = 'PG'",
          "tables_involved": [
            "movie",
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Movi",
            "T3.Acto"
          ]
        },
        {
          "question": "Among the movies starring Tom Cruise, which one of them has the best quality?",
          "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' ORDER BY T1.Rating DESC LIMIT 1",
          "tables_involved": [
            "movie",
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Movi",
            "T3.Acto"
          ]
        },
        {
          "question": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July?",
          "sql": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'",
          "tables_involved": [
            "movie",
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Movi",
            "T3.Acto",
            "t"
          ]
        },
        {
          "question": "Please list the names of all the characters played by Tom Cruise.",
          "sql": "SELECT T1.`Character Name` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'",
          "tables_involved": [
            "characters",
            "actor"
          ],
          "join_conditions": [
            "T1.Acto"
          ]
        }
      ]
    },
    "social_media": {
      "unique_tables": [
        "user",
        "location",
        "(",
        "twitter"
      ],
      "table_frequency": {
        "twitter": 74,
        "location": 39,
        "user": 29,
        "(": 4
      },
      "table_pairs": {
        "('location', 'twitter')": 35,
        "('twitter', 'user')": 28,
        "('location', 'user')": 7,
        "('user', 'user')": 1,
        "('(', 'twitter')": 4,
        "('(', 'user')": 1,
        "('(', 'location')": 3
      },
      "join_examples": [
        {
          "question": "How many tweets in total were posted by a user in Argentina?",
          "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID "
          ]
        },
        {
          "question": "Users in which city of Argentina post the most tweets?",
          "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' GROUP BY T2.City ORDER BY COUNT(T1.TweetID) DESC LIMIT 1",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID "
          ]
        },
        {
          "question": "Among all the tweets that are reshared, how many of them are posted by a user in Buenos Aires?",
          "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.IsReshare = 'TRUE'",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID "
          ]
        },
        {
          "question": "Please list the texts of all the tweets posted from Buenos Aires with a positive sentiment.",
          "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.City = 'Buenos Aires'",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID "
          ]
        },
        {
          "question": "From which country is the tweet with the most likes posted?",
          "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID ORDER BY T1.Likes DESC LIMIT 1",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID O"
          ]
        },
        {
          "question": "Users in which country has posted more numbers of positive tweets, Argentina or Australia?",
          "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country IN ('Argentina', 'Australia') AND T1.Sentiment > 0 GROUP BY T2.Country ORDER BY COUNT(T1.TweetID) DESC LIMIT 1",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID "
          ]
        },
        {
          "question": "Among all the tweets posted from Buenos Aires, how many of them were posted on Thursdays?",
          "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.Weekday = 'Thursday'",
          "tables_involved": [
            "twitter",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T2.LocationID = T1.LocationID "
          ]
        },
        {
          "question": "Among all the users that have posted a tweet with over 1000 likes, how many of them are male?",
          "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'",
          "tables_involved": [
            "twitter",
            "user"
          ],
          "join_conditions": [
            "T1.Us"
          ]
        },
        {
          "question": "How many tweets have the male users posted in total?",
          "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'",
          "tables_involved": [
            "twitter",
            "user"
          ],
          "join_conditions": [
            "T1.Us"
          ]
        },
        {
          "question": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users?",
          "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1",
          "tables_involved": [
            "twitter",
            "user"
          ],
          "join_conditions": [
            "T1.Us"
          ]
        }
      ]
    },
    "cs_semester": {
      "unique_tables": [
        "=",
        "IN",
        "(",
        "course",
        "FROM",
        "RA",
        "registration",
        "student",
        "prof"
      ],
      "table_frequency": {
        "course": 58,
        "prof": 35,
        "student": 73,
        "RA": 47,
        "registration": 54,
        "(": 2,
        "IN": 1,
        "=": 2,
        "FROM": 2
      },
      "table_pairs": {
        "('RA', 'prof')": 25,
        "('prof', 'student')": 12,
        "('RA', 'student')": 28,
        "('registration', 'student')": 32,
        "('course', 'student')": 27,
        "('course', 'registration')": 45,
        "('(', 'RA')": 2,
        "('(', 'prof')": 2,
        "('FROM', 'RA')": 2,
        "('FROM', 'student')": 2,
        "('=', 'prof')": 1,
        "('=', 'RA')": 1,
        "('=', 'student')": 1,
        "('RA', 'registration')": 7,
        "('RA', 'course')": 2,
        "('prof', 'registration')": 1,
        "('course', 'prof')": 1,
        "('RA', 'RA')": 2,
        "('registration', 'registration')": 4,
        "('prof', 'prof')": 1,
        "('course', 'course')": 1
      },
      "join_examples": [
        {
          "question": "Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.",
          "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'",
          "tables_involved": [
            "prof",
            "RA",
            "student"
          ],
          "join_conditions": [
            "T1.p",
            "T2.stud"
          ]
        },
        {
          "question": "How many research assistants does Sauveur Skyme have?",
          "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'",
          "tables_involved": [
            "RA",
            "prof"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Please list the full names of all the students who are research assistants with the highest research capability.",
          "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5",
          "tables_involved": [
            "student",
            "RA"
          ],
          "join_conditions": [
            "T1.stud"
          ]
        },
        {
          "question": "How many research assistants of Ogdon Zywicki have an average salary?",
          "sql": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'",
          "tables_involved": [
            "RA",
            "prof"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Please list the full names of all the students who took the course Machine Learning Theory.",
          "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory'",
          "tables_involved": [
            "student",
            "registration",
            "course"
          ],
          "join_conditions": [
            "AS T2 ON T1.stud",
            "T2.cou"
          ]
        },
        {
          "question": "Please list the names of the courses taken by Laughton Antonio.",
          "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'",
          "tables_involved": [
            "student",
            "registration",
            "course"
          ],
          "join_conditions": [
            "AS T2 ON T1.stud",
            "T2.cou"
          ]
        },
        {
          "question": "Which student failed the course Intro to Database 2? Please give his or her full name.",
          "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'",
          "tables_involved": [
            "student",
            "registration",
            "course"
          ],
          "join_conditions": [
            "AS T2 ON T1.stud",
            "T2.cou"
          ]
        },
        {
          "question": "Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio?",
          "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1",
          "tables_involved": [
            "student",
            "registration",
            "course"
          ],
          "join_conditions": [
            "AS T2 ON T1.stud",
            "T2.cou"
          ]
        },
        {
          "question": "Among the professors who have more than 3 research assistants, how many of them are male?",
          "sql": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )",
          "tables_involved": [
            "(",
            "RA",
            "prof"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Among the students who took the course Machine Learning Theory, how many of them are undergraduates?",
          "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'",
          "tables_involved": [
            "student",
            "registration",
            "course"
          ],
          "join_conditions": [
            "AS T2 ON T1.stud",
            "T2.cou"
          ]
        }
      ]
    },
    "computer_student": {
      "unique_tables": [
        "person",
        "(",
        "taughtBy",
        "advisedBy",
        "course"
      ],
      "table_frequency": {
        "advisedBy": 21,
        "taughtBy": 45,
        "course": 35,
        "person": 39,
        "(": 2
      },
      "table_pairs": {
        "('person', 'taughtBy')": 21,
        "('course', 'taughtBy')": 29,
        "('advisedBy', 'person')": 16,
        "('advisedBy', 'taughtBy')": 4,
        "('course', 'person')": 11,
        "('advisedBy', 'course')": 3,
        "('(', 'course')": 1,
        "('(', 'taughtBy')": 1
      },
      "join_examples": [
        {
          "question": "List the ID of all professors who are not faculty member along with the courses taught by him/her.",
          "sql": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0",
          "tables_involved": [
            "person",
            "taughtBy"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.p_id = T2.p_id ",
            "<> 0"
          ]
        },
        {
          "question": "Provide the ID of professors who are teaching high-level or harder undergraduate course.",
          "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'",
          "tables_involved": [
            "course",
            "taughtBy"
          ],
          "join_conditions": [
            "T1.cou"
          ]
        },
        {
          "question": "What are the courses taught by the advisors who gave advice to student with ID 376?",
          "sql": "SELECT T3.course_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN taughtBy AS T3 ON T2.p_id = T3.p_id WHERE T1.p_id = 141",
          "tables_involved": [
            "advisedBy",
            "person",
            "taughtBy"
          ],
          "join_conditions": [
            "AS T2 ON T1.p_id = T2.p_id INN",
            "T2.p_id = T3.p_id "
          ]
        },
        {
          "question": "Name the advisors for students in Year 3 of the program.",
          "sql": "SELECT T1.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'",
          "tables_involved": [
            "advisedBy",
            "person"
          ],
          "join_conditions": [
            "AS T2 ON T1.p_id = T2.p_id "
          ]
        },
        {
          "question": "Which level of courses is taught by professor ID 297?",
          "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297",
          "tables_involved": [
            "course",
            "taughtBy"
          ],
          "join_conditions": [
            "T1.cou"
          ]
        },
        {
          "question": "What level is course 165? List the professors who teach the course.",
          "sql": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165",
          "tables_involved": [
            "course",
            "taughtBy"
          ],
          "join_conditions": [
            "T1.cou"
          ]
        },
        {
          "question": "List the ID and years in program for students taught by advisor with ID 5.",
          "sql": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5",
          "tables_involved": [
            "advisedBy",
            "person"
          ],
          "join_conditions": [
            "AS T2 ON T1.p_id = T2.p_id "
          ]
        },
        {
          "question": "State the courses and level of courses by professors who are faculty employees.",
          "sql": "SELECT T3.course_id, T3.courseLevel FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T2.hasPosition = 'Faculty_eme'",
          "tables_involved": [
            "taughtBy",
            "person",
            "course"
          ],
          "join_conditions": [
            "AS T2 ON T1.p_id = T2.p_id INN",
            "T3.cou",
            "= 'Faculty_"
          ]
        },
        {
          "question": "Find the ID of advisor of student ID 80 and state the level of courses taught by him/her.",
          "sql": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80",
          "tables_involved": [
            "advisedBy",
            "course",
            "taughtBy"
          ],
          "join_conditions": [
            "T1.p_id = T2.cou",
            "T2.cou"
          ]
        },
        {
          "question": "Provide the ID of professors who teach in both harder undergraduate course and master/graduate courses.",
          "sql": "SELECT DISTINCT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' OR T1.courseLevel = 'Level_500'",
          "tables_involved": [
            "course",
            "taughtBy"
          ],
          "join_conditions": [
            "T1.cou"
          ]
        }
      ]
    },
    "talkingdata": {
      "unique_tables": [
        "phone_brand_device_model2",
        "gender_age_train",
        "label_categories",
        "events",
        "app_all",
        "(",
        "`events`",
        "app_events_relevant",
        "app_labels",
        "events_relevant",
        "app_events",
        "gender_age"
      ],
      "table_frequency": {
        "gender_age": 109,
        "`events`": 5,
        "app_events": 27,
        "(": 19,
        "app_labels": 38,
        "label_categories": 41,
        "phone_brand_device_model2": 84,
        "events_relevant": 17,
        "app_events_relevant": 6,
        "events": 44,
        "gender_age_train": 1,
        "app_all": 1
      },
      "table_pairs": {
        "('(', 'app_labels')": 5,
        "('(', 'label_categories')": 5,
        "('app_labels', 'label_categories')": 36,
        "('gender_age', 'phone_brand_device_model2')": 56,
        "('app_events', 'events_relevant')": 3,
        "('app_events', 'gender_age')": 4,
        "('events_relevant', 'gender_age')": 14,
        "('app_events_relevant', 'events_relevant')": 6,
        "('app_labels', 'events_relevant')": 1,
        "('events_relevant', 'label_categories')": 1,
        "('app_events_relevant', 'app_labels')": 1,
        "('app_events_relevant', 'label_categories')": 1,
        "('(', 'phone_brand_device_model2')": 9,
        "('(', 'gender_age')": 12,
        "('events', 'phone_brand_device_model2')": 13,
        "('app_events', 'events')": 12,
        "('events', 'gender_age')": 10,
        "('`events`', 'gender_age')": 1,
        "('app_events', 'label_categories')": 4,
        "('app_events', 'app_labels')": 4,
        "('app_events', 'phone_brand_device_model2')": 1,
        "('(', 'app_events')": 1,
        "('(', 'events')": 1,
        "('(', 'events_relevant')": 3,
        "('(', 'app_events_relevant')": 1,
        "('events_relevant', 'phone_brand_device_model2')": 2,
        "('app_events_relevant', 'phone_brand_device_model2')": 1,
        "('app_events_relevant', 'gender_age')": 5,
        "('app_all', 'app_labels')": 1,
        "('app_all', 'label_categories')": 1
      },
      "join_examples": [
        {
          "question": "What is the name of the category which most users belong to?",
          "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1",
          "tables_involved": [
            "(",
            "app_labels",
            "label_categories"
          ],
          "join_conditions": [
            "T2.lab"
          ]
        },
        {
          "question": "What is the model of the oldest user's device?",
          "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id ORDER BY T2.age DESC LIMIT 1",
          "tables_involved": [
            "phone_brand_device_model2",
            "gender_age"
          ],
          "join_conditions": [
            "T2.d"
          ]
        },
        {
          "question": "How many users are there in the Home Decoration category?",
          "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Home Decoration'",
          "tables_involved": [
            "app_labels",
            "label_categories"
          ],
          "join_conditions": [
            "T2.lab"
          ]
        },
        {
          "question": "How many male users are active in the events held on 5/1/2016?",
          "sql": "SELECT COUNT(T3.gender) FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T2.event_id = T1.event_id INNER JOIN gender_age AS T3 ON T3.device_id = T2.device_id WHERE T1.is_active = 1 AND T3.gender = 'M' AND T2.timestamp LIKE '2016-05-01%'",
          "tables_involved": [
            "app_events",
            "events_relevant",
            "gender_age"
          ],
          "join_conditions": [
            "T2.",
            "T3.d"
          ]
        },
        {
          "question": "How many female users use ZenFone 5 devices?",
          "sql": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'",
          "tables_involved": [
            "gender_age",
            "phone_brand_device_model2"
          ],
          "join_conditions": [
            "T2.d"
          ]
        },
        {
          "question": "What is the age of the oldest active user that participated in the event held on 5/6/2016 at coordinates 121, 31?",
          "sql": "SELECT T3.age FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE T1.is_active = 1 AND T2.longitude = 121 AND T2.latitude = 31 AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-06' ORDER BY T3.age DESC LIMIT 1",
          "tables_involved": [
            "app_events",
            "events_relevant",
            "gender_age"
          ],
          "join_conditions": [
            "T1.",
            "T2.d"
          ]
        },
        {
          "question": "What is the most common device model among female users between the ages 27 to 28?",
          "sql": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.`group` = 'F27-28' AND T1.gender = 'F' ORDER BY T2.device_id DESC LIMIT 1",
          "tables_involved": [
            "gender_age",
            "phone_brand_device_model2"
          ],
          "join_conditions": [
            "T1.d"
          ]
        },
        {
          "question": "What are the categories of the top 2 oldest events?",
          "sql": "SELECT T4.category FROM events_relevant AS T1 INNER JOIN app_events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_labels AS T3 ON T3.app_id = T2.app_id INNER JOIN label_categories AS T4 ON T3.label_id = T4.label_id ORDER BY T1.timestamp LIMIT 2",
          "tables_involved": [
            "events_relevant",
            "app_events_relevant",
            "app_labels",
            "label_categories"
          ],
          "join_conditions": [
            "T1.",
            "T3.app_id = T2.app_id INN",
            "T3.lab"
          ]
        },
        {
          "question": "What is the gender of the majority of Vivo phone users?",
          "sql": "SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1",
          "tables_involved": [
            "(",
            "phone_brand_device_model2",
            "gender_age"
          ],
          "join_conditions": [
            "T2.d"
          ]
        },
        {
          "question": "Which category has the highest number of users?",
          "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1",
          "tables_involved": [
            "(",
            "app_labels",
            "label_categories"
          ],
          "join_conditions": [
            "T2.lab"
          ]
        }
      ]
    },
    "law_episode": {
      "unique_tables": [
        "Episode",
        "(",
        "Vote",
        "Keyword",
        "Award",
        "Credit",
        "Person"
      ],
      "table_frequency": {
        "Episode": 72,
        "Keyword": 13,
        "Vote": 20,
        "Credit": 42,
        "Person": 56,
        "Award": 40,
        "(": 2
      },
      "table_pairs": {
        "('Episode', 'Keyword')": 15,
        "('Episode', 'Vote')": 18,
        "('Credit', 'Episode')": 23,
        "('Episode', 'Person')": 17,
        "('Credit', 'Person')": 35,
        "('Award', 'Episode')": 17,
        "('Award', 'Person')": 22,
        "('Episode', 'Episode')": 1,
        "('Keyword', 'Keyword')": 1,
        "('Credit', 'Credit')": 1,
        "('Person', 'Person')": 1,
        "('Award', 'Credit')": 2,
        "('Person', 'Vote')": 1,
        "('Credit', 'Vote')": 1,
        "('(', 'Person')": 2,
        "('(', 'Award')": 2,
        "('Award', 'Vote')": 1
      },
      "join_examples": [
        {
          "question": "Please list all the keywords of the episode \"Refuge: Part 1\".",
          "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'",
          "tables_involved": [
            "Episode",
            "Keyword"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How many keywords are there for season 9, episode 23 of law_and_order?",
          "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.season = 9 AND T1.episode = 23",
          "tables_involved": [
            "Episode",
            "Keyword"
          ],
          "join_conditions": [
            "T1.",
            "= 9 AND T1."
          ]
        },
        {
          "question": "What is the title of the episode with the keyword \"laundering money\"?",
          "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'laundering money'",
          "tables_involved": [
            "Episode",
            "Keyword"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Please list all the keywords for the episodes with a rating of over 8.",
          "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.rating > 8",
          "tables_involved": [
            "Episode",
            "Keyword"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How many 10-star votes were given to the episode titled \"Cherished\"?",
          "sql": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.stars = 10",
          "tables_involved": [
            "Episode",
            "Vote"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How many votes did the episode titled \"Cherished\" get in total?",
          "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished'",
          "tables_involved": [
            "Episode",
            "Vote"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "What is the title of the episode that got the most 10-star votes?",
          "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 ORDER BY T2.votes DESC LIMIT 1",
          "tables_involved": [
            "Episode",
            "Vote"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Park Dietz was credited in which role in the episode titled \"Cherished\"?",
          "sql": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'",
          "tables_involved": [
            "Episode",
            "Credit",
            "Person"
          ],
          "join_conditions": [
            "T1.",
            "AS T3 ON T3.p"
          ]
        },
        {
          "question": "How many people had filled a role in the episode titled \"Cherished\", but did not show up in the on-screen credits?",
          "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.credited = 'false'",
          "tables_involved": [
            "Episode",
            "Credit"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Who was credited as \"technical advisor\" in the episode titled \"Cherished\"?",
          "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T2.credited = 'true' AND T2.role = 'technical advisor'",
          "tables_involved": [
            "Episode",
            "Credit",
            "Person"
          ],
          "join_conditions": [
            "T1.",
            "AS T3 ON T3.p"
          ]
        }
      ]
    },
    "synthea": {
      "unique_tables": [
        "patients",
        "all_prevalences",
        "(",
        "medications",
        "observations",
        "immunizations",
        "allergies",
        "conditions",
        "procedures",
        "careplans",
        "claims",
        "encounters"
      ],
      "table_frequency": {
        "patients": 160,
        "observations": 25,
        "medications": 30,
        "conditions": 51,
        "careplans": 32,
        "all_prevalences": 13,
        "procedures": 10,
        "claims": 4,
        "allergies": 24,
        "encounters": 18,
        "immunizations": 17,
        "(": 2
      },
      "table_pairs": {
        "('observations', 'patients')": 22,
        "('observations', 'observations')": 2,
        "('medications', 'patients')": 26,
        "('conditions', 'patients')": 38,
        "('careplans', 'patients')": 28,
        "('all_prevalences', 'conditions')": 13,
        "('patients', 'procedures')": 7,
        "('claims', 'patients')": 4,
        "('allergies', 'patients')": 20,
        "('encounters', 'patients')": 14,
        "('immunizations', 'patients')": 12,
        "('all_prevalences', 'immunizations')": 1,
        "('conditions', 'immunizations')": 4,
        "('conditions', 'observations')": 1,
        "('all_prevalences', 'patients')": 5,
        "('all_prevalences', 'all_prevalences')": 2,
        "('conditions', 'procedures')": 1,
        "('medications', 'procedures')": 3,
        "('conditions', 'medications')": 1,
        "('allergies', 'medications')": 1,
        "('careplans', 'conditions')": 2,
        "('allergies', 'immunizations')": 1,
        "('careplans', 'observations')": 1,
        "('careplans', 'immunizations')": 1,
        "('encounters', 'immunizations')": 1,
        "('careplans', 'encounters')": 3,
        "('encounters', 'procedures')": 2,
        "('encounters', 'medications')": 2,
        "('careplans', 'procedures')": 1,
        "('careplans', 'medications')": 1,
        "('(', 'observations')": 2,
        "('(', 'patients')": 2,
        "('(', 'conditions')": 2,
        "('patients', 'patients')": 1,
        "('conditions', 'conditions')": 1,
        "('allergies', 'conditions')": 1,
        "('all_prevalences', 'encounters')": 1,
        "('all_prevalences', 'careplans')": 1,
        "('conditions', 'encounters')": 1
      },
      "join_examples": [
        {
          "question": "According to the observation on 2008/3/11, what was the height of Elly Koss?",
          "sql": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.date = '2008-03-11' AND T2.description = 'Body Height'",
          "tables_involved": [
            "patients",
            "observations"
          ],
          "join_conditions": [
            "T1.pati",
            "= 'Body "
          ]
        },
        {
          "question": "By how much did Elly Koss's weight increase from the observation in 2008 to the observation in 2009?",
          "sql": "SELECT SUM(CASE WHEN strftime('%Y', T2.date) = '2009' THEN T2.VALUE END) - SUM(CASE WHEN strftime('%Y', T2.date) = '2008' THEN T2.VALUE END) AS increase , T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Height'",
          "tables_involved": [
            "patients",
            "observations"
          ],
          "join_conditions": [
            "T1.pati",
            "= 'Body "
          ]
        },
        {
          "question": "During all the observations of Elly Koss, what was the highest Systolic Blood Pressure observed?",
          "sql": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure' ORDER BY T2.VALUE DESC LIMIT 1",
          "tables_involved": [
            "patients",
            "observations"
          ],
          "join_conditions": [
            "T1.pati",
            "= 'Systolic Blood P"
          ]
        },
        {
          "question": "For how many times had Elly Koss have her Systolic Blood Pressure observed?",
          "sql": "SELECT COUNT(T2.description) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure'",
          "tables_involved": [
            "patients",
            "observations"
          ],
          "join_conditions": [
            "T1.pati",
            "= 'Systolic Blood P"
          ]
        },
        {
          "question": "The highest Systolic Blood Pressure was observed in which patient? Please give his or her full name.",
          "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.VALUE = ( SELECT MAX(VALUE) FROM observations WHERE description = 'Systolic Blood Pressure' ) LIMIT 1",
          "tables_involved": [
            "patients",
            "observations",
            "observations"
          ],
          "join_conditions": [
            "T1.pati",
            "= 'Systolic Blood P"
          ]
        },
        {
          "question": "For how long was Elly Koss required to take Acetaminophen?",
          "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'",
          "tables_involved": [
            "patients",
            "medications"
          ],
          "join_conditions": [
            "T1.pati",
            "LIK"
          ]
        },
        {
          "question": "Please list all the medication that are prescribed to Elly Koss.",
          "sql": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss'",
          "tables_involved": [
            "patients",
            "medications"
          ],
          "join_conditions": [
            "F",
            "T1.pati"
          ]
        },
        {
          "question": "Why did Elly Koss need to take Acetaminophen?",
          "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'",
          "tables_involved": [
            "patients",
            "medications"
          ],
          "join_conditions": [
            "F",
            "T1.pati",
            "LIK"
          ]
        },
        {
          "question": "What medication did Elly Koss take when she had Streptococcal sore throat?",
          "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.reasondescription = 'Streptococcal sore throat (disorder)'",
          "tables_involved": [
            "patients",
            "medications"
          ],
          "join_conditions": [
            "F",
            "T1.pati",
            "= 'St"
          ]
        },
        {
          "question": "Please give the full names of all the patients who had been prescribed with Acetaminophen.",
          "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.description LIKE 'Acetaminophen%'",
          "tables_involved": [
            "patients",
            "medications"
          ],
          "join_conditions": [
            "T1.pati",
            "LIK"
          ]
        }
      ]
    },
    "car_retails": {
      "unique_tables": [
        "offices",
        "(",
        "orders",
        "customers",
        "products",
        "payments",
        "orderdetails",
        "employees",
        "productlines"
      ],
      "table_frequency": {
        "customers": 64,
        "products": 37,
        "orderdetails": 45,
        "payments": 24,
        "employees": 47,
        "orders": 38,
        "offices": 23,
        "(": 4,
        "productlines": 2
      },
      "table_pairs": {
        "('orderdetails', 'products')": 33,
        "('customers', 'payments')": 20,
        "('employees', 'payments')": 4,
        "('customers', 'employees')": 23,
        "('customers', 'orders')": 25,
        "('customers', 'orderdetails')": 13,
        "('orderdetails', 'orders')": 25,
        "('employees', 'offices')": 23,
        "('customers', 'customers')": 1,
        "('payments', 'payments')": 1,
        "('customers', 'offices')": 4,
        "('offices', 'payments')": 1,
        "('(', 'orderdetails')": 5,
        "('orderdetails', 'orderdetails')": 1,
        "('(', 'products')": 5,
        "('(', '(')": 1,
        "('products', 'products')": 1,
        "('orders', 'products')": 15,
        "('customers', 'products')": 9,
        "('employees', 'orderdetails')": 3,
        "('employees', 'products')": 2,
        "('employees', 'orders')": 4,
        "('offices', 'orderdetails')": 1,
        "('offices', 'orders')": 1,
        "('productlines', 'products')": 2,
        "('employees', 'employees')": 2
      },
      "join_examples": [
        {
          "question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.",
          "sql": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1",
          "tables_involved": [
            "products",
            "orderdetails"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?",
          "sql": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1",
          "tables_involved": [
            "payments",
            "customers",
            "employees"
          ],
          "join_conditions": [
            "T1.custom",
            "T2.sal"
          ]
        },
        {
          "question": "What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003?",
          "sql": "SELECT T3.priceEach * T3.quantityOrdered FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.customerName = 'Rovelli Gifts' AND T2.status = 'Shipped' AND STRFTIME('%Y', T2.shippedDate) = '2003'",
          "tables_involved": [
            "customers",
            "orders",
            "orderdetails"
          ],
          "join_conditions": [
            "T1.custom",
            "T2.o"
          ]
        },
        {
          "question": "Which sales representatives in New York city whose leader is Anthony Bow with the employee number is 1143? Indicate their employee numbers.",
          "sql": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'",
          "tables_involved": [
            "employees",
            "offices"
          ],
          "join_conditions": [
            "T1.offic"
          ]
        },
        {
          "question": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?",
          "sql": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'",
          "tables_involved": [
            "payments",
            "customers"
          ],
          "join_conditions": [
            "T1.custom"
          ]
        },
        {
          "question": "Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address.",
          "sql": "SELECT DISTINCT T2.country, T2.addressLine1, T2.addressLine2 FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber ORDER BY T1.amount DESC LIMIT 5",
          "tables_involved": [
            "payments",
            "customers"
          ],
          "join_conditions": [
            "T1.custom"
          ]
        },
        {
          "question": "How many checks were issued by Euro+ Shopping Channel in the year 2004?",
          "sql": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'",
          "tables_involved": [
            "payments",
            "customers"
          ],
          "join_conditions": [
            "T1.custom"
          ]
        },
        {
          "question": "Of all the classic cars, with a product scale of 1:18, which product is the most ordered product by customers?",
          "sql": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productScale = '1:18' AND T1.productLine = 'Classic Cars' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1",
          "tables_involved": [
            "products",
            "orderdetails"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004?",
          "sql": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE STRFTIME('%Y', paymentDate) = '2004' ) ), T1.customerName FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND STRFTIME('%Y', T2.paymentDate) = '2004' GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1",
          "tables_involved": [
            "customers",
            "payments",
            "customers",
            "payments"
          ],
          "join_conditions": [
            "T1.custom"
          ]
        },
        {
          "question": "Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments.",
          "sql": "SELECT T2.customerName, T2.contactFirstName, T2.contactLastName, SUM(T3.amount) FROM employees AS T1 INNER JOIN customers AS T2 ON T2.salesRepEmployeeNumber = T1.employeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN offices AS T4 ON T1.officeCode = T4.officeCode WHERE T4.city = 'Tokyo' AND T1.reportsTo = 1056 GROUP BY T2.customerName, T2.contactFirstName, T2.contactLastName ORDER BY amount DESC LIMIT 1",
          "tables_involved": [
            "employees",
            "customers",
            "payments",
            "offices"
          ],
          "join_conditions": [
            "T2.sal",
            "T2.custom",
            "T1.offic"
          ]
        }
      ]
    },
    "restaurant": {
      "unique_tables": [
        "location",
        "generalinfo",
        "geographic"
      ],
      "table_frequency": {
        "generalinfo": 85,
        "geographic": 53,
        "location": 64
      },
      "table_pairs": {
        "('generalinfo', 'location')": 43,
        "('generalinfo', 'geographic')": 28,
        "('geographic', 'location')": 13
      },
      "join_examples": [
        {
          "question": "What type of food is there in the restaurants on Adeline Street in Berkeley city?",
          "sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'",
          "tables_involved": [
            "generalinfo",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T1.id_"
          ]
        },
        {
          "question": "In which regions are there no African food restaurants?",
          "sql": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'",
          "tables_involved": [
            "generalinfo",
            "geographic"
          ],
          "join_conditions": [
            "F",
            "T1.city = T2.city "
          ]
        },
        {
          "question": "In which counties are there A&W Root Beer Restaurants?",
          "sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'",
          "tables_involved": [
            "generalinfo",
            "geographic"
          ],
          "join_conditions": [
            "T1.city = T2.city "
          ]
        },
        {
          "question": "Indicate street and number of the Adelitas Taqueria Restaurants.",
          "sql": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'",
          "tables_involved": [
            "location",
            "generalinfo"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.id_"
          ]
        },
        {
          "question": "What type of food is served at the restaurant located at 3140, Alpine Road at San Mateo County?",
          "sql": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.County = 'san mateo county' AND T1.street_name = 'alpine rd' AND T1.street_num = 3140",
          "tables_involved": [
            "location",
            "generalinfo",
            "geographic"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.id_",
            "T2.city = T3.city "
          ]
        },
        {
          "question": "In which streets of the city of San Francisco are there restaurants that serve seafood?",
          "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T2.food_type = 'seafood' AND street_name IS NOT NULL",
          "tables_involved": [
            "location",
            "generalinfo"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.id_"
          ]
        },
        {
          "question": "List all counties where there is no Bakers Square Restaurant & Pie Shop.",
          "sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label != 'bakers square restaurant & pie shop'",
          "tables_involved": [
            "generalinfo",
            "geographic"
          ],
          "join_conditions": [
            "T1.city = T2.city "
          ]
        },
        {
          "question": "In how many counties is there a street called Appian Way?",
          "sql": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'",
          "tables_involved": [
            "location",
            "geographic"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.city = T2.city "
          ]
        },
        {
          "question": "What is the rating of each restaurant reviews on Atlantic Ave?",
          "sql": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'atlantic ave'",
          "tables_involved": [
            "generalinfo",
            "location"
          ],
          "join_conditions": [
            "AS T2 ON T1.id_"
          ]
        },
        {
          "question": "Identify all restaurants in Contra Costa County by id.",
          "sql": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'contra costa county'",
          "tables_involved": [
            "location",
            "geographic"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.city = T2.city "
          ]
        }
      ]
    },
    "soccer_2016": {
      "unique_tables": [
        "Batting_Style",
        "Country",
        "Venue",
        "Bowling_Style",
        "Outcome",
        "country",
        "Match",
        "(",
        "Extra_Runs",
        "team",
        "Out_Type",
        "Team",
        "Player",
        "Rolee",
        "city",
        "Batsman_Scored",
        "Ball_by_Ball",
        "Season",
        "City",
        "Win_By",
        "`Match`",
        "Umpire",
        "Player_Match",
        "Extra_Type",
        "Toss_Decision",
        "Wicket_Taken"
      ],
      "table_frequency": {
        "Player": 112,
        "`Match`": 45,
        "Country": 40,
        "Bowling_Style": 11,
        "Batting_Style": 11,
        "Match": 80,
        "Player_Match": 41,
        "Rolee": 18,
        "Team": 53,
        "Ball_by_Ball": 7,
        "Venue": 31,
        "Season": 20,
        "City": 22,
        "Umpire": 8,
        "(": 3,
        "Outcome": 2,
        "Batsman_Scored": 9,
        "Wicket_Taken": 10,
        "Out_Type": 7,
        "Toss_Decision": 5,
        "Extra_Runs": 3,
        "Win_By": 12,
        "Extra_Type": 2,
        "team": 1,
        "country": 3,
        "city": 1
      },
      "table_pairs": {
        "('Country', 'Player')": 25,
        "('Bowling_Style', 'Player')": 11,
        "('Batting_Style', 'Player')": 11,
        "('Batting_Style', 'Country')": 2,
        "('Bowling_Style', 'Country')": 3,
        "('Match', 'Player')": 22,
        "('Player', 'Player_Match')": 34,
        "('Player', 'Rolee')": 16,
        "('Player_Match', 'Rolee')": 18,
        "('Match', 'Player_Match')": 18,
        "('Match', 'Rolee')": 4,
        "('Ball_by_Ball', 'Player')": 1,
        "('Venue', '`Match`')": 9,
        "('Player', 'Season')": 16,
        "('Country', 'Season')": 2,
        "('City', 'Country')": 9,
        "('City', 'Venue')": 13,
        "('Country', 'Umpire')": 6,
        "('Match', 'Team')": 41,
        "('Team', 'Venue')": 3,
        "('Match', 'Venue')": 13,
        "('(', 'Team')": 3,
        "('(', 'Match')": 4,
        "('Match', 'Match')": 4,
        "('Player_Match', 'Team')": 14,
        "('Rolee', 'Team')": 2,
        "('Player', 'Team')": 10,
        "('Country', 'Venue')": 3,
        "('Match', 'Outcome')": 2,
        "('Team', 'Team')": 4,
        "('Out_Type', 'Wicket_Taken')": 7,
        "('Match', 'Season')": 10,
        "('Country', 'Player_Match')": 1,
        "('Country', 'Team')": 1,
        "('Country', 'Match')": 2,
        "('City', 'Match')": 2,
        "('Match', 'Toss_Decision')": 3,
        "('Win_By', '`Match`')": 5,
        "('City', '`Match`')": 2,
        "('Venue', 'Win_By')": 1,
        "('City', 'Win_By')": 1,
        "('Player', 'Wicket_Taken')": 1,
        "('Out_Type', 'Player')": 1,
        "('Country', 'Wicket_Taken')": 1,
        "('Country', 'Out_Type')": 1,
        "('Toss_Decision', '`Match`')": 2,
        "('Toss_Decision', 'Win_By')": 1,
        "('Player', '`Match`')": 5,
        "('Player_Match', 'Season')": 8,
        "('Season', 'Team')": 4,
        "('Ball_by_Ball', 'Batsman_Scored')": 1,
        "('Batsman_Scored', 'Match')": 3,
        "('Batsman_Scored', 'Team')": 1,
        "('Ball_by_Ball', 'Match')": 1,
        "('Ball_by_Ball', 'Team')": 1,
        "('Extra_Runs', 'Extra_Type')": 2,
        "('Player_Match', '`Match`')": 2,
        "('Rolee', '`Match`')": 1,
        "('Country', '`Match`')": 1,
        "('Team', '`Match`')": 5,
        "('Batsman_Scored', 'Toss_Decision')": 2,
        "('Match', 'team')": 1,
        "('City', 'country')": 1,
        "('Umpire', 'country')": 2,
        "('Team', 'Win_By')": 4,
        "('Match', 'Win_By')": 7,
        "('Country', 'city')": 1,
        "('Batsman_Scored', 'Player')": 1,
        "('Batsman_Scored', 'Player_Match')": 1,
        "('City', 'Player')": 1,
        "('(', 'Player_Match')": 2,
        "('(', 'Season')": 1,
        "('Player_Match', 'Win_By')": 1,
        "('Rolee', 'Season')": 1
      },
      "join_examples": [
        {
          "question": "How many players are from Australia?",
          "sql": "SELECT COUNT(CASE WHEN T2.Country_Name = 'Australia' THEN T1.Player_Id ELSE NULL END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id",
          "tables_involved": [
            "Player",
            "Country"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "Which country is the oldest player from?",
          "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1",
          "tables_involved": [
            "Country",
            "Player"
          ],
          "join_conditions": [
            "T2.Count"
          ]
        },
        {
          "question": "What is the bowling skill of SC Ganguly?",
          "sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id WHERE T2.Player_Name = 'SC Ganguly'",
          "tables_involved": [
            "Bowling_Style",
            "Player"
          ],
          "join_conditions": [
            "T2.Bo"
          ]
        },
        {
          "question": "Among the players who use the right hand as their batting hand, how many of them were born after 1985?",
          "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.DOB, 1, 4) > 1985 THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_Hand = 'Right-hand bat'",
          "tables_involved": [
            "Player",
            "Batting_Style"
          ],
          "join_conditions": [
            "T1.Batting_"
          ]
        },
        {
          "question": "Please list the names of the players who use the right hand as their batting hand and are from Australia.",
          "sql": "SELECT T2.Player_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_id INNER JOIN Batting_Style AS T3 ON T2.Batting_hand = T3.Batting_Id WHERE T1.Country_Name = 'Australia' AND T3.Batting_Hand = 'Right-hand bat'",
          "tables_involved": [
            "Country",
            "Player",
            "Batting_Style"
          ],
          "join_conditions": [
            "T2.Count",
            "T2.Batting_"
          ]
        },
        {
          "question": "Please list the bowling skills of all the players from Australia.",
          "sql": "SELECT T2.Bowling_Skill FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id INNER JOIN Country AS T3 ON T1.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Australia' GROUP BY T2.Bowling_Skill",
          "tables_involved": [
            "Player",
            "Bowling_Style",
            "Country"
          ],
          "join_conditions": [
            "T1.Bo",
            "T1.Count"
          ]
        },
        {
          "question": "Among the players whose bowling skill is \"Legbreak\", when was the oldest one of them born?",
          "sql": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'",
          "tables_involved": [
            "Player",
            "Bowling_Style"
          ],
          "join_conditions": [
            "T1.Bo"
          ]
        },
        {
          "question": "What is the bowling skill used by most players?",
          "sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id GROUP BY T1.Bowling_Skill ORDER BY COUNT(T1.Bowling_Skill) DESC LIMIT 1",
          "tables_involved": [
            "Bowling_Style",
            "Player"
          ],
          "join_conditions": [
            "T2.Bo"
          ]
        },
        {
          "question": "What is the name of the player who won the \"man of the match\" award in the match on 2008/4/18?",
          "sql": "SELECT T2.Player_Name FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T1.Match_Date = '2008-04-18'",
          "tables_involved": [
            "Match",
            "Player"
          ],
          "join_conditions": [
            "T2.Play"
          ]
        },
        {
          "question": "For how many times has SC Ganguly played as team captain in a match?",
          "sql": "SELECT SUM(CASE WHEN T3.Role_Desc = 'Captain' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly'",
          "tables_involved": [
            "Player",
            "Player_Match",
            "Rolee"
          ],
          "join_conditions": [
            "T1.Play",
            "T2."
          ]
        }
      ]
    },
    "music_tracker": {
      "unique_tables": [
        "torrents",
        "tags"
      ],
      "table_frequency": {
        "torrents": 46,
        "tags": 31
      },
      "table_pairs": {
        "('tags', 'torrents')": 30
      },
      "join_examples": [
        {
          "question": "What is the tag of the album with the highest amount of downloads?",
          "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 1",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "What are the top 5 tags with the highest amount of downloads?",
          "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 5",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "What is the release title of the single under the \"funk\" tag that was released the oldest?",
          "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "Name all the release titles of the \"ep's\" under the alternative tag.",
          "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'alternative' AND T1.releaseType = 'ep'",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "What are the tags of the top 5 least downloaded live albums?",
          "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched LIMIT 5",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "What is the tag and the artist of the most downloaded single?",
          "sql": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "What are the tags of the release \"sugarhill gang\"?",
          "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'sugarhill gang'",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "How many tags does the release \"city funk\" have\uff1f",
          "sql": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'city funk'",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "Please list the titles of all the releases with the tag \"1980s\".",
          "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        },
        {
          "question": "Among the releases with the tag \"1980s\", which one of them is the most downloaded? Please give its title.",
          "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s' ORDER BY T1.totalSnatched DESC LIMIT 1",
          "tables_involved": [
            "torrents",
            "tags"
          ],
          "join_conditions": [
            "T1.id = T2.id "
          ]
        }
      ]
    },
    "world_development_indicators": {
      "unique_tables": [
        "Country",
        "FootNotes",
        "indicators",
        "data",
        "Footnotes",
        "footnotes",
        "liquid",
        "(",
        "solid",
        "country",
        "countrynotes",
        "DAC",
        "Indicators",
        "transport%'",
        "gaseous",
        "SeriesNotes",
        "CountryNotes",
        "Series"
      ],
      "table_frequency": {
        "Country": 126,
        "CountryNotes": 35,
        "data": 1,
        "FootNotes": 12,
        "Indicators": 71,
        "Series": 26,
        "gaseous": 1,
        "SeriesNotes": 4,
        "DAC": 1,
        "Footnotes": 6,
        "liquid": 1,
        "indicators": 8,
        "country": 14,
        "(": 4,
        "countrynotes": 1,
        "footnotes": 2,
        "transport%'": 1,
        "solid": 2
      },
      "table_pairs": {
        "('Country', 'CountryNotes')": 34,
        "('Country', 'data')": 1,
        "('CountryNotes', 'data')": 1,
        "('Country', 'FootNotes')": 14,
        "('Country', 'Indicators')": 60,
        "('Indicators', 'Indicators')": 7,
        "('Indicators', 'gaseous')": 1,
        "('Country', 'gaseous')": 1,
        "('Series', 'SeriesNotes')": 3,
        "('DAC', 'Indicators')": 1,
        "('Country', 'DAC')": 1,
        "('Indicators', 'Series')": 10,
        "('Footnotes', 'Series')": 4,
        "('Country', 'Footnotes')": 5,
        "('Country', 'Series')": 10,
        "('CountryNotes', 'Series')": 6,
        "('CountryNotes', 'SeriesNotes')": 2,
        "('Country', 'SeriesNotes')": 2,
        "('CountryNotes', 'Indicators')": 3,
        "('Country', 'liquid')": 1,
        "('Indicators', 'liquid')": 1,
        "('country', 'indicators')": 7,
        "('(', 'indicators')": 3,
        "('(', 'country')": 4,
        "('country', 'country')": 2,
        "('Country', 'country')": 1,
        "('Country', 'countrynotes')": 1,
        "('CountryNotes', 'country')": 1,
        "('CountryNotes', 'countrynotes')": 1,
        "('country', 'countrynotes')": 1,
        "('Country', 'Country')": 6,
        "('FootNotes', 'FootNotes')": 1,
        "('Country', 'footnotes')": 2,
        "('Series', 'footnotes')": 2,
        "('Footnotes', 'Footnotes')": 1,
        "('indicators', 'solid')": 4,
        "('indicators', 'indicators')": 1,
        "('country', 'solid')": 4,
        "('(', 'solid')": 2,
        "('solid', 'solid')": 1
      },
      "join_examples": [
        {
          "question": "What's the description of the series code SM.POP.TOTL for Aruba?",
          "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'SM.POP.TOTL'",
          "tables_involved": [
            "Country",
            "CountryNotes"
          ],
          "join_conditions": [
            "F",
            "T1.Count"
          ]
        },
        {
          "question": "Please list the countries in Latin America & Caribbean with a note on the series code SM.POP.TOTL.",
          "sql": "SELECT T1.SHORTNAME, T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND T2.Seriescode = 'SM.POP.TOTL'",
          "tables_involved": [
            "Country",
            "CountryNotes"
          ],
          "join_conditions": [
            "F",
            "T1.Count",
            "= 'Latin Am"
          ]
        },
        {
          "question": "Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group?",
          "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'",
          "tables_involved": [
            "Country",
            "CountryNotes"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "Please list the descriptions of the series code SM.POP.TOTL for all the countries that are under the lending category of the International Development Associations.",
          "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL'",
          "tables_involved": [
            "Country",
            "CountryNotes"
          ],
          "join_conditions": [
            "F",
            "T1.Count"
          ]
        },
        {
          "question": "How many low-income countries under the lending category of the International Development Associations have a note on the series code SM.POP.TOTL?",
          "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL' AND IncomeGroup = 'Low income'",
          "tables_involved": [
            "Country",
            "CountryNotes"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "Among the countries in the High income: OECD group whose currency unit is Euro, how many of them have a note on the series code SP.DYN.AMRT.FE?",
          "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'High income: OECD' AND T1.CurrencyUnit = 'Euro' AND T2.Seriescode = 'SP.DYN.AMRT.FE'",
          "tables_involved": [
            "Country",
            "CountryNotes"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "What is the long name of the country with the description \"Estimates are derived from data on foreign-born population.\" on the series code SM.POP.TOTL?",
          "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'",
          "tables_involved": [
            "Country",
            "CountryNotes",
            "data"
          ],
          "join_conditions": [
            "T1.Count",
            "= '",
            "fo"
          ]
        },
        {
          "question": "What is the description of the footnote on the series code AG.LND.FRST.K2 in 1990 for Aruba?",
          "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2' AND T2.Year = 'YR1990'",
          "tables_involved": [
            "Country",
            "FootNotes"
          ],
          "join_conditions": [
            "F",
            "T1.Count"
          ]
        },
        {
          "question": "On which years did Aruba got a footnote on the series code AG.LND.FRST.K2?",
          "sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'",
          "tables_involved": [
            "Country",
            "FootNotes"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "Please list the countries that got the footnote \"Data are classified as official aid.\" on the series code DC.DAC.AUSL.CD in 2002.",
          "sql": "SELECT T1.SHORTNAME FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.' AND T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year LIKE '%2002%'",
          "tables_involved": [
            "Country",
            "FootNotes"
          ],
          "join_conditions": [
            "T1.Count",
            "= 'Data a"
          ]
        }
      ]
    },
    "movielens": {
      "unique_tables": [
        "u2base",
        "(",
        "movies2directors",
        "movies2actors",
        "actors",
        "movies",
        "directors",
        "users"
      ],
      "table_frequency": {
        "u2base": 49,
        "movies2directors": 43,
        "users": 21,
        "movies2actors": 28,
        "actors": 16,
        "movies": 52,
        "directors": 14,
        "(": 1
      },
      "table_pairs": {
        "('movies2directors', 'u2base')": 11,
        "('u2base', 'users')": 21,
        "('movies2actors', 'movies2directors')": 4,
        "('actors', 'movies2actors')": 14,
        "('actors', 'movies2directors')": 2,
        "('movies', 'u2base')": 21,
        "('movies', 'movies2directors')": 18,
        "('movies', 'movies2actors')": 16,
        "('actors', 'u2base')": 2,
        "('movies2actors', 'u2base')": 4,
        "('movies', 'users')": 5,
        "('movies2actors', 'users')": 2,
        "('actors', 'users')": 1,
        "('actors', 'movies')": 8,
        "('directors', 'movies')": 3,
        "('directors', 'movies2directors')": 14,
        "('movies2directors', 'users')": 3,
        "('(', 'directors')": 1,
        "('(', 'movies2directors')": 1,
        "('(', 'u2base')": 1,
        "('directors', 'u2base')": 1,
        "('u2base', 'u2base')": 1
      },
      "join_examples": [
        {
          "question": "List the different director IDs of the movies whose user rating is more than 4.",
          "sql": "SELECT DISTINCT T2.directorid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4",
          "tables_involved": [
            "u2base",
            "movies2directors"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Among the users who gave a rating of 5, how many of them are male?",
          "sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'",
          "tables_involved": [
            "u2base",
            "users"
          ],
          "join_conditions": [
            "T1.us"
          ]
        },
        {
          "question": "List the genres of the movies which actor id 851 is the star.",
          "sql": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851",
          "tables_involved": [
            "movies2actors",
            "movies2directors",
            "actors"
          ],
          "join_conditions": [
            "T1.movi",
            "T1.acto"
          ]
        },
        {
          "question": "How many movies from the USA which user rating is less than 3?",
          "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' AND T1.rating < 3",
          "tables_involved": [
            "u2base",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Among the movies from France, how many of them are drama?",
          "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.genre = 'drama'",
          "tables_involved": [
            "movies2directors",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "What is the average occupation of users whose ratings are not more than 2 ?",
          "sql": "SELECT AVG(T2.occupation) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating < 2",
          "tables_involved": [
            "u2base",
            "users"
          ],
          "join_conditions": [
            "T1.us"
          ]
        },
        {
          "question": "List the top 10 USA movies, by descending order, from the highest to the lowest, the user rating.",
          "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10",
          "tables_involved": [
            "u2base",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "What is the average number of casts of movies that are from the USA?",
          "sql": "SELECT AVG(T2.cast_num) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA'",
          "tables_involved": [
            "movies",
            "movies2actors"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "List the top 5 movies from other countries which to language is not in English.",
          "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'other' AND T2.isEnglish = 'F' LIMIT 5",
          "tables_involved": [
            "u2base",
            "movies"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Among the best actors, how many of them got a rating of 5 to the movies they starred?",
          "sql": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5",
          "tables_involved": [
            "actors",
            "movies2actors",
            "u2base"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.movi"
          ]
        }
      ]
    },
    "superstore": {
      "unique_tables": [
        "east_superstore",
        "(",
        "people",
        "south_superstore",
        "central_superstore",
        "product",
        "west_superstore"
      ],
      "table_frequency": {
        "central_superstore": 55,
        "product": 79,
        "people": 68,
        "east_superstore": 30,
        "west_superstore": 25,
        "south_superstore": 19,
        "(": 1
      },
      "table_pairs": {
        "('central_superstore', 'product')": 37,
        "('central_superstore', 'people')": 32,
        "('people', 'product')": 36,
        "('east_superstore', 'product')": 18,
        "('east_superstore', 'people')": 16,
        "('people', 'west_superstore')": 15,
        "('product', 'west_superstore')": 16,
        "('product', 'south_superstore')": 13,
        "('people', 'south_superstore')": 12,
        "('east_superstore', 'west_superstore')": 4,
        "('central_superstore', 'west_superstore')": 3,
        "('south_superstore', 'west_superstore')": 3,
        "('central_superstore', 'east_superstore')": 4,
        "('east_superstore', 'south_superstore')": 3,
        "('central_superstore', 'south_superstore')": 3,
        "('east_superstore', 'east_superstore')": 1,
        "('south_superstore', 'south_superstore')": 1
      },
      "join_examples": [
        {
          "question": "Please list the names of all the products ordered in order CA-2011-112326 in superstores in the center.",
          "sql": "SELECT DISTINCT T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-112326'",
          "tables_involved": [
            "central_superstore",
            "product"
          ],
          "join_conditions": [
            "T1.`P"
          ]
        },
        {
          "question": "Among all the orders made by Aimee Bixby, what was the longest shipment time?",
          "sql": "SELECT MAX(strftime('%J', `Ship Date`) - strftime('%J', `Order Date`)) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby'",
          "tables_involved": [
            "people",
            "central_superstore"
          ],
          "join_conditions": [
            "T1.`Custom"
          ]
        },
        {
          "question": "Among all the orders made by Aimee Bixby, how many of them chose the slowest delivery speed?",
          "sql": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND T2.`Ship Mode` = 'Standard Class'",
          "tables_involved": [
            "people",
            "central_superstore"
          ],
          "join_conditions": [
            "T1.`Custom"
          ]
        },
        {
          "question": "How many orders has Aimee Bixby made?",
          "sql": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby'",
          "tables_involved": [
            "people",
            "central_superstore"
          ],
          "join_conditions": [
            "T1.`Custom"
          ]
        },
        {
          "question": "Please list the IDs of the orders made by Aimee Bixby with more than 3 kinds of products ordered.",
          "sql": "SELECT DISTINCT T2.`Order ID` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.`Customer Name` = 'Aimee Bixby' GROUP BY T2.`Product ID` HAVING COUNT(T2.`Product ID`) > 3",
          "tables_involved": [
            "people",
            "central_superstore"
          ],
          "join_conditions": [
            "T1.`Custom"
          ]
        },
        {
          "question": "Among the orders made by Aimee Bixby, how many of them included at least one kind of product under the category \"Furniture\"?",
          "sql": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.Category = 'Furniture' AND T1.`Customer Name` = 'Aimee Bixby'",
          "tables_involved": [
            "people",
            "central_superstore",
            "product"
          ],
          "join_conditions": [
            "T1.`Custom",
            "T3.`P"
          ]
        },
        {
          "question": "Please list the names of all the products ordered by Aimee Bixby in 2016.",
          "sql": "SELECT DISTINCT T3.`Product Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T1.`Customer Name` = 'Aimee Bixby' AND STRFTIME('%Y', T2.`Ship Date`) = '2016'",
          "tables_involved": [
            "people",
            "central_superstore",
            "product"
          ],
          "join_conditions": [
            "T1.`Custom",
            "T3.`P"
          ]
        },
        {
          "question": "What is the total quantity of \"Telescoping Adjustable Floor Lamp\" ordered from central superstores?",
          "sql": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Telescoping Adjustable Floor Lamp'",
          "tables_involved": [
            "central_superstore",
            "product"
          ],
          "join_conditions": [
            "T1.`P"
          ]
        },
        {
          "question": "Please list the names of all the customers who had ordered the product \"Telescoping Adjustable Floor Lamp\".",
          "sql": "SELECT DISTINCT T1.`Customer Name` FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.`Product Name` = 'Telescoping Adjustable Floor Lamp'",
          "tables_involved": [
            "people",
            "central_superstore",
            "product"
          ],
          "join_conditions": [
            "T1.`Custom",
            "T3.`P"
          ]
        },
        {
          "question": "Among the customers who have ordered the product \"Telescoping Adjustable Floor Lamp\", how many of them are consumers?",
          "sql": "SELECT COUNT(DISTINCT T1.`Customer Name`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T2.`Product ID` WHERE T3.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND T1.Segment = 'Consumer'",
          "tables_involved": [
            "people",
            "central_superstore",
            "product"
          ],
          "join_conditions": [
            "T1.`Custom",
            "T3.`P"
          ]
        }
      ]
    },
    "shooting": {
      "unique_tables": [
        "subjects",
        "incidents",
        "officers"
      ],
      "table_frequency": {
        "officers": 10,
        "incidents": 24,
        "subjects": 9
      },
      "table_pairs": {
        "('incidents', 'officers')": 7,
        "('incidents', 'subjects')": 8,
        "('officers', 'subjects')": 1
      },
      "join_examples": [
        {
          "question": "Who are the officers involved in cases that are voted as 'No Bill'. List their last name and gender.",
          "sql": "SELECT T2.last_name, T2.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.grand_jury_disposition = 'No Bill'",
          "tables_involved": [
            "incidents",
            "officers"
          ],
          "join_conditions": [
            "T1.cas",
            "= 'No Bill'"
          ]
        },
        {
          "question": "Which are the cases where the subject are female. List the case number, subject status and weapon.",
          "sql": "SELECT T1.case_number, T1.subject_statuses, T1.subject_weapon FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'",
          "tables_involved": [
            "incidents",
            "subjects"
          ],
          "join_conditions": [
            "F",
            "T1.cas"
          ]
        },
        {
          "question": "From the cases where the subject are male, list the case number and the location and subject status.",
          "sql": "SELECT T1.case_number, T1.location, T1.subject_statuses FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'M'",
          "tables_involved": [
            "incidents",
            "subjects"
          ],
          "join_conditions": [
            "T1.cas"
          ]
        },
        {
          "question": "For case(s) where officer 'Evenden, George' is in charged, state the case number and the grand jury disposition?",
          "sql": "SELECT T1.case_number, T1.grand_jury_disposition FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T2.first_name = 'George' AND T2.last_name = 'Evenden'",
          "tables_involved": [
            "incidents",
            "officers"
          ],
          "join_conditions": [
            "F",
            "T1.cas"
          ]
        },
        {
          "question": "For case number '134472-2015', list the last name of the officers involved and state the subject statuses.",
          "sql": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'",
          "tables_involved": [
            "incidents",
            "officers"
          ],
          "join_conditions": [
            "T1.cas"
          ]
        },
        {
          "question": "From the cases where the subject were deceased, list the subject's last name, gender, race and case number.",
          "sql": "SELECT T2.last_name, T2.gender, T2.race, T2.case_number FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Deceased'",
          "tables_involved": [
            "incidents",
            "subjects"
          ],
          "join_conditions": [
            "T1.cas"
          ]
        },
        {
          "question": "What is the percentage of subject who are female used the Vehicle as weapon?",
          "sql": "SELECT CAST(SUM(T1.subject_weapon = 'Vehicle') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN subjects T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'",
          "tables_involved": [
            "incidents",
            "subjects"
          ],
          "join_conditions": [
            "= 'V",
            "T1.cas"
          ]
        },
        {
          "question": "From the 'Injured' statuses of the subject, what is the ratio of weapons used are knife against handgun?",
          "sql": "SELECT CAST(SUM(T1.subject_weapon = 'Knife') AS REAL) * 100 / SUM(T1.subject_weapon = 'Handgun') FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'",
          "tables_involved": [
            "incidents",
            "subjects"
          ],
          "join_conditions": [
            "= 'Knif",
            "= '",
            "T1.cas"
          ]
        },
        {
          "question": "How many incidents in which the subject's weapon was a vehicle were investigated by a female officer?",
          "sql": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_weapon = 'Vehicle' AND T2.gender = 'F'",
          "tables_involved": [
            "incidents",
            "officers"
          ],
          "join_conditions": [
            "T1.cas",
            "= 'V"
          ]
        },
        {
          "question": "In how many cases where the subject was a female was the subject's status listed as Deceased?",
          "sql": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F' AND T1.subject_statuses = 'Deceased'",
          "tables_involved": [
            "incidents",
            "subjects"
          ],
          "join_conditions": [
            "T1.cas"
          ]
        }
      ]
    },
    "genes": {
      "unique_tables": [
        "Interactions",
        "Genes",
        "Genes;",
        "Classification"
      ],
      "table_frequency": {
        "Genes": 23,
        "Classification": 5,
        "Interactions": 18,
        "Genes;": 1
      },
      "table_pairs": {
        "('Classification', 'Genes')": 4,
        "('Genes', 'Interactions')": 20,
        "('Genes', 'Genes')": 3,
        "('Interactions', 'Interactions')": 1
      },
      "join_examples": [
        {
          "question": "For the genes that are located in the plasma membrane, please list their number of chromosomes.",
          "sql": "SELECT T1.Chromosome FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'plasma membrane'",
          "tables_involved": [
            "Genes",
            "Classification"
          ],
          "join_conditions": [
            "AS T2 ON T1.G",
            "= 'plasma m"
          ]
        },
        {
          "question": "How many non-essential genes are located in the nucleus?",
          "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'nucleus' AND T1.Essential = 'Non-Essential'",
          "tables_involved": [
            "Genes",
            "Classification"
          ],
          "join_conditions": [
            "AS T2 ON T1.G",
            "= 'nucl"
          ]
        },
        {
          "question": "Among the genes with nucleic acid metabolism defects, how many of them can be found in the vacuole?",
          "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'",
          "tables_involved": [
            "Genes",
            "Classification"
          ],
          "join_conditions": [
            "AS T2 ON T1.G",
            "= 'vacuol"
          ]
        },
        {
          "question": "Please list the location of the genes that have the most chromosomes.",
          "sql": "SELECT T2.Localization FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID ORDER BY T1.Chromosome DESC LIMIT 1",
          "tables_involved": [
            "Genes",
            "Classification"
          ],
          "join_conditions": [
            "F",
            "AS T2 ON T1.G"
          ]
        },
        {
          "question": "Among the pairs of genes that are both located in the nucleus, what is the highest expression correlation score?",
          "sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1",
          "tables_involved": [
            "Genes",
            "Interactions",
            "Genes"
          ],
          "join_conditions": [
            "T1.G",
            "T3.G",
            "= 'nucl",
            "= 'nucl"
          ]
        },
        {
          "question": "What are the functions of the pair of genes that have the lowest expression correlation score?a",
          "sql": "SELECT T1.Function FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 ORDER BY T2.Expression_Corr ASC LIMIT 1",
          "tables_involved": [
            "Genes",
            "Interactions"
          ],
          "join_conditions": [
            "F",
            "T1.G"
          ]
        },
        {
          "question": "Among the pairs of genes that are not from the class of motorproteins, how many of them are negatively correlated?",
          "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'",
          "tables_involved": [
            "Genes",
            "Interactions"
          ],
          "join_conditions": [
            "T1.G"
          ]
        },
        {
          "question": "For the pairs of genes with one having 8 chromosomes and the other having 6 chromosomes, what is the highest expression correlation score?",
          "sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Chromosome = 6 OR T1.Chromosome = 8 ORDER BY T2.Expression_Corr DESC LIMIT 1",
          "tables_involved": [
            "Genes",
            "Interactions"
          ],
          "join_conditions": [
            "T1.G"
          ]
        },
        {
          "question": "Please list the motif of the genes that are located in the cytoplasm and have 7 chromosomes.",
          "sql": "SELECT T2.GeneID1, T2.GeneID2 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'cytoplasm' AND T1.Chromosome = 7",
          "tables_involved": [
            "Genes",
            "Interactions"
          ],
          "join_conditions": [
            "T1.G",
            "= 'cytoplasm' AND T1.C"
          ]
        },
        {
          "question": "For the non-essential genes whose functions are transcription, how many of them are not located in the cytoplasm?",
          "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization != 'cytoplasm' AND T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'NON-Essential'",
          "tables_involved": [
            "Genes",
            "Interactions"
          ],
          "join_conditions": [
            "T1.G",
            "!= 'cytoplasm' AND T1.Function = 'T"
          ]
        }
      ]
    },
    "app_store": {
      "unique_tables": [
        "user_reviews",
        "playstore"
      ],
      "table_frequency": {
        "user_reviews": 50,
        "playstore": 63
      },
      "table_pairs": {
        "('playstore', 'user_reviews')": 50,
        "('playstore', 'playstore')": 4,
        "('user_reviews', 'user_reviews')": 4
      },
      "join_examples": [
        {
          "question": "How many users mildly likes the 7 Minute Workout app and when was it last updated?",
          "sql": "SELECT COUNT(T2.Sentiment_Polarity), T1.\"Last Updated\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '7 Minute Workout' AND T2.Sentiment_Polarity BETWEEN 0 AND 0.5",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "How many users holds neutral attitude towards the HTC Weather app? Indicate the app's rating on the Google Play Store.",
          "sql": "SELECT COUNT(T1.Rating), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'HTC Weather' AND T2.Sentiment = 'Neutral'",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "What is the name and category of the app with the highest amount of -1 sentiment polarity score?",
          "sql": "SELECT DISTINCT T1.App, T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = '-1.0'",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "What is the average sentiment polarity score of the Cooking Fever app? Indicate the age group that the app is targeted at.",
          "sql": "SELECT AVG(T2.Sentiment_Polarity), T1.\"Content Rating\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Cooking Fever'",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "What is the lowest sentiment polarity score of the Basketball Stars app for people who dislikes the app pretty much and how many downloads does it have?",
          "sql": "SELECT MIN(T2.Sentiment_Polarity), T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Basketball Stars'",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "For the Akinator app, how many reviews have sentiment subjectivity of no more than 0.5 and what is its current version?",
          "sql": "SELECT COUNT(T2.Sentiment_Subjectivity), T1.\"Current Ver\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Akinator' AND T2.Sentiment_Subjectivity < 0.5",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "How many of the users hold neutral attitude on \"10 Best Foods for You\" app and what category is this app?",
          "sql": "SELECT COUNT(T2.App), T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '10 Best Foods for You' AND T2.Sentiment = 'Neutral'",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "What are the apps that users pretty like this app and how many installs amount of these apps?",
          "sql": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity > 0",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "List apps whose rating is 3.9 and state the translated review of each app.",
          "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 3.9",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        },
        {
          "question": "Which apps have multiple genres and what is the total sentiment subjectivity of these apps?",
          "sql": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1",
          "tables_involved": [
            "playstore",
            "user_reviews"
          ],
          "join_conditions": [
            "T1.App = T2.App "
          ]
        }
      ]
    },
    "regional_sales": {
      "unique_tables": [
        "(",
        "`Sales",
        "`Store",
        "Customers",
        "Regions",
        "Products"
      ],
      "table_frequency": {
        "`Sales": 173,
        "(": 42,
        "Customers": 37,
        "`Store": 55,
        "Products": 45,
        "Regions": 16
      },
      "table_pairs": {
        "('`Sales', '`Sales')": 35,
        "('Products', '`Sales')": 51,
        "('Customers', '`Sales')": 39,
        "('Customers', 'Products')": 11,
        "('Customers', 'Customers')": 1,
        "('Products', 'Products')": 2,
        "('`Sales', '`Store')": 37,
        "('(', '`Sales')": 29,
        "('(', 'Customers')": 13,
        "('Regions', '`Store')": 13,
        "('(', 'Products')": 10,
        "('(', 'Regions')": 4,
        "('(', '`Store')": 9,
        "('Products', '`Store')": 7,
        "('Regions', '`Sales')": 1,
        "('`Store', '`Store')": 1,
        "('Customers', '`Store')": 1
      },
      "join_examples": [
        {
          "question": "Name the sales team and the region of order number 'SO - 000137'.",
          "sql": "SELECT T2.`Sales Team`, T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderNumber = 'SO - 000137'",
          "tables_involved": [
            "`Sales",
            "`Sales"
          ],
          "join_conditions": [
            "F",
            "T2.Sal"
          ]
        },
        {
          "question": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.",
          "sql": "SELECT DISTINCT T1.ProductID, T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.`Sales Team` = 'Douglas Tucker'",
          "tables_involved": [
            "Products",
            "`Sales",
            "`Sales"
          ],
          "join_conditions": [
            "T2._P",
            "T3.Sal"
          ]
        },
        {
          "question": "Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses'",
          "sql": "SELECT DISTINCT T1.`Customer Names` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.`Product Name` = 'Cocktail Glasses' AND SUBSTR(T2.OrderDate, -2) = '20' AND T2.`Discount Applied` = ( SELECT T2.`Discount Applied` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.`Product Name` = 'Cocktail Glasses' AND T2.OrderDate LIKE '%/%/20' ORDER BY T2.`Discount Applied` DESC LIMIT 1 )",
          "tables_involved": [
            "Customers",
            "`Sales",
            "Products",
            "Customers",
            "`Sales",
            "Products"
          ],
          "join_conditions": [
            "T2._Custom",
            "T3.P",
            "T2._Custom",
            "T3.P"
          ]
        },
        {
          "question": "List all the order numbers for In-Store sales and find the city where the store is located.",
          "sql": "SELECT DISTINCT T1.OrderNumber, T2.`City Name` FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.`Sales Channel` = 'In-Store'",
          "tables_involved": [
            "`Sales",
            "`Store"
          ],
          "join_conditions": [
            "T2.Sto"
          ]
        },
        {
          "question": "Name the most expensive ordered? Who, when was it ordered?",
          "sql": "SELECT T2.OrderNumber, T1.`Customer Names`, T2.OrderDate FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.`Unit Cost` DESC LIMIT 1",
          "tables_involved": [
            "Customers",
            "`Sales",
            "Products"
          ],
          "join_conditions": [
            "T2._Custom",
            "T3.P"
          ]
        },
        {
          "question": "List all the numbers ordered by 'Rochester Ltd' in 2018.",
          "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN T1.OrderDate LIKE '%/%/18' AND T2.`Customer Names` = 'Rochester Ltd' THEN T1.OrderNumber ELSE NULL END AS T FROM `Sales Orders` T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID ) WHERE T IS NOT NULL",
          "tables_involved": [
            "(",
            "`Sales",
            "Customers"
          ],
          "join_conditions": [
            "T2.Custom"
          ]
        },
        {
          "question": "Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order.",
          "sql": "SELECT DISTINCT T1.`Product Name`, T3.`Sales Team` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'",
          "tables_involved": [
            "Products",
            "`Sales",
            "`Sales"
          ],
          "join_conditions": [
            "T2._P",
            "T3.Sal"
          ]
        },
        {
          "question": "List the name of all customers who had made orders online.",
          "sql": "SELECT T FROM ( SELECT CASE  WHEN T2.`Sales Channel` = 'Online' THEN T1.`Customer Names` ELSE NULL END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL",
          "tables_involved": [
            "(",
            "Customers",
            "`Sales"
          ],
          "join_conditions": [
            "T2._Custom"
          ]
        },
        {
          "question": "Calculate the average net profit for bakeware product.",
          "sql": "SELECT AVG(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', ''))  FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bakeware'",
          "tables_involved": [
            "`Sales",
            "Products"
          ],
          "join_conditions": [
            "T2.P"
          ]
        },
        {
          "question": "Name the sales team name who had orders with the greatest net profit in 2020.",
          "sql": "SELECT T2.`Sales Team` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/20' GROUP BY T2.`Sales Team` ORDER BY SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) DESC LIMIT 1",
          "tables_involved": [
            "`Sales",
            "`Sales"
          ],
          "join_conditions": [
            "T2.Sal"
          ]
        }
      ]
    },
    "european_football_1": {
      "unique_tables": [
        "(",
        "divisions",
        "matchs"
      ],
      "table_frequency": {
        "matchs": 58,
        "divisions": 45,
        "(": 1
      },
      "table_pairs": {
        "('divisions', 'matchs')": 49,
        "('(', 'matchs')": 3,
        "('matchs', 'matchs')": 4,
        "('(', 'divisions')": 3,
        "('divisions', 'divisions')": 3
      },
      "join_examples": [
        {
          "question": "What is the name of all the teams that played in the EFL League One division?",
          "sql": "SELECT T1.HomeTeam,T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'EFL League One' and T1.Div = 'E2' ",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div=T2.division "
          ]
        },
        {
          "question": "How many teams playing in divisions in Greece have ever scored 4 or more goals?",
          "sql": "SELECT COUNT(DISTINCT CASE WHEN T1.FTHG >= 4 THEN HomeTeam ELSE NULL end) + COUNT(DISTINCT CASE WHEN T1.FTAG >= 4 THEN AwayTeam ELSE NULL end) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' ",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division "
          ]
        },
        {
          "question": "How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2?",
          "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division ",
            "= 2019 AND T2.nam"
          ]
        },
        {
          "question": "Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons?",
          "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Scotland' AND T1.FTHG = 10",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division "
          ]
        },
        {
          "question": "From the Spanish LaLiga division in the 2017 season, which team won the most times as a local team and by what percentage?",
          "sql": "SELECT T1.HomeTeam HWHT , CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T2.country = 'Spain' AND T1.season = 2017",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division ",
            "= 2017"
          ]
        },
        {
          "question": "How many teams that played in the 2012 season belong to any of the English divisions and what percentage play in each of the divisions?",
          "sql": "SELECT ( SELECT COUNT(T1.Div) AS total FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS num , CASE WHEN 1 THEN T.result END AS percentage FROM ( SELECT 100.0 * COUNT(T1.Div) / ( SELECT COUNT(T1.Div) FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS result FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 GROUP BY T2.division ) AS T",
          "tables_involved": [
            "matchs",
            "divisions",
            "(",
            "matchs",
            "divisions",
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T2.division = T1.Div ",
            "= 2012 ) AS num , CAS",
            "T2.division = T1.Div ",
            "= 2012 ) AS ",
            "T2.division = T1.Div ",
            "= 2012 G",
            ") AS T"
          ]
        },
        {
          "question": "What is the name of the division in which Club Brugge and Genk competed on September 13, 2009?",
          "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2009-09-13' and T1.HomeTeam = 'Club Brugge' AND T1.AwayTeam = 'Genk'",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division "
          ]
        },
        {
          "question": "How many matches were played in the Scottish Premiership division from 2006 to 2008?",
          "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division ",
            "B"
          ]
        },
        {
          "question": "In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong?",
          "sql": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div = T2.division "
          ]
        },
        {
          "question": "Which away team in the division of Bundesliga has the highest final time goals?",
          "sql": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'Bundesliga' ORDER BY T1.FTAG DESC LIMIT 1",
          "tables_involved": [
            "matchs",
            "divisions"
          ],
          "join_conditions": [
            "T1.Div=T2.division "
          ]
        }
      ]
    },
    "professional_basketball": {
      "unique_tables": [
        "=",
        "player_allstar",
        "awards_players",
        "draft",
        "(",
        "series_post",
        "coaches",
        "players_teams",
        "awards_coaches",
        "teams",
        "players"
      ],
      "table_frequency": {
        "teams": 60,
        "(": 5,
        "coaches": 26,
        "players": 69,
        "awards_players": 22,
        "awards_coaches": 15,
        "player_allstar": 35,
        "series_post": 9,
        "players_teams": 51,
        "draft": 12,
        "=": 1
      },
      "table_pairs": {
        "('(', 'teams')": 6,
        "('teams', 'teams')": 5,
        "('coaches', 'teams')": 11,
        "('awards_players', 'players')": 13,
        "('awards_coaches', 'coaches')": 8,
        "('awards_coaches', 'teams')": 5,
        "('player_allstar', 'players')": 23,
        "('series_post', 'teams')": 7,
        "('players', 'players_teams')": 25,
        "('(', 'players_teams')": 3,
        "('(', 'awards_players')": 1,
        "('players_teams', 'teams')": 26,
        "('awards_players', 'teams')": 2,
        "('awards_players', 'players_teams')": 2,
        "('player_allstar', 'players_teams')": 5,
        "('players', 'teams')": 10,
        "('draft', 'players')": 4,
        "('draft', 'teams')": 5,
        "('(', 'player_allstar')": 1,
        "('=', 'players')": 1,
        "('=', 'draft')": 1,
        "('=', 'teams')": 1,
        "('coaches', 'series_post')": 1,
        "('players_teams', 'series_post')": 1,
        "('players', 'series_post')": 1,
        "('awards_players', 'draft')": 2,
        "('awards_players', 'player_allstar')": 2,
        "('draft', 'player_allstar')": 2,
        "('draft', 'players_teams')": 1,
        "('player_allstar', 'teams')": 1
      },
      "join_examples": [
        {
          "question": "List the team name and the total wins of the team in year 2005 which has greater winning from the previous year.",
          "sql": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won",
          "tables_involved": [
            "teams",
            "(",
            "teams"
          ],
          "join_conditions": [
            "F",
            "T1.tmID = T2.tmID ",
            "> T2."
          ]
        },
        {
          "question": "In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game.",
          "sql": "SELECT T1.coachID, T2.name, T2.won FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T2.won > 50",
          "tables_involved": [
            "coaches",
            "teams"
          ],
          "join_conditions": [
            "F",
            "T1.tmID = T2.tmID AND T1.y",
            "> 50"
          ]
        },
        {
          "question": "List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year.",
          "sql": "SELECT DISTINCT T1.coachID, T2.tmID, T1.year FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 2000 AND 2010 AND T2.lost > T2.won",
          "tables_involved": [
            "coaches",
            "teams"
          ],
          "join_conditions": [
            "T1.tmID = T2.tmID AND T1.y"
          ]
        },
        {
          "question": "Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point.",
          "sql": "SELECT T2.name, T1.year, T2.o_pts FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1990 AND 1995 AND T1.coachID = 'adelmri01'",
          "tables_involved": [
            "coaches",
            "teams"
          ],
          "join_conditions": [
            "T1.tmID = T2.tmID AND T1.y"
          ]
        },
        {
          "question": "Which team(s) had 90% games won. List the coach ID for the team and year played.",
          "sql": "SELECT DISTINCT T2.name, T1.year, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T2.won AS REAL) * 100 / T2.games > 90",
          "tables_involved": [
            "coaches",
            "teams"
          ],
          "join_conditions": [
            "T1.tmID = T2.tmID ",
            "AS "
          ]
        },
        {
          "question": "What is the percentage of player who won \"All-Defensive First Team\" from 1980 - 2000 is from 'NY'.",
          "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.birthState = 'NY' AND T2.award = 'All-Defensive First Team' AND T2.year BETWEEN 1980 AND 2000",
          "tables_involved": [
            "players",
            "awards_players"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "What division did the team coached by the winner of the 1977 NBA Coach of the Year award play in in 1976?",
          "sql": "SELECT DISTINCT T3.divID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T1.year = 1977 AND T1.award = 'NBA Coach of the Year' AND T3.year = 1976",
          "tables_involved": [
            "awards_coaches",
            "coaches",
            "teams"
          ],
          "join_conditions": [
            "T1.coac",
            "T2.tmID = T3.tmID "
          ]
        },
        {
          "question": "Which coach of the Chicago Bulls during the year 1981 won the NBA Coach of the Year award in the 1970s?",
          "sql": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.award = 'NBA Coach of the Year' AND T2.year BETWEEN 1970 AND 1979 AND T1.year = 1981 AND T3.name = 'Chicago Bulls'",
          "tables_involved": [
            "coaches",
            "awards_coaches",
            "teams"
          ],
          "join_conditions": [
            "T1.coac",
            "T3.tmID = T1.tmID "
          ]
        },
        {
          "question": "What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks?",
          "sql": "SELECT T2.nameNick FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.blocks = 2 AND T1.conference = 'West' AND T1.season_id = 2006",
          "tables_involved": [
            "player_allstar",
            "players"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "In what year did the only team to beat the Houston in the final round of postseason series games earn its lowest ranking?",
          "sql": "SELECT T2.year FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.round = 'DSF' AND T1.tmIDLoser = 'HSM' ORDER BY T2.rank ASC LIMIT 1",
          "tables_involved": [
            "series_post",
            "teams"
          ],
          "join_conditions": [
            "T1.tmID"
          ]
        }
      ]
    },
    "shakespeare": {
      "unique_tables": [
        "(",
        "paragraphs",
        "characters",
        "works",
        "chapters"
      ],
      "table_frequency": {
        "works": 73,
        "chapters": 70,
        "paragraphs": 57,
        "characters": 43,
        "(": 3
      },
      "table_pairs": {
        "('chapters', 'works')": 59,
        "('paragraphs', 'works')": 24,
        "('characters', 'works')": 17,
        "('chapters', 'paragraphs')": 35,
        "('chapters', 'characters')": 20,
        "('characters', 'paragraphs')": 38,
        "('(', 'works')": 2,
        "('(', 'chapters')": 3,
        "('(', 'paragraphs')": 2,
        "('(', 'characters')": 2,
        "('works', 'works')": 2
      },
      "join_examples": [
        {
          "question": "How many scenes are there in Act 1 in Twelfth Night?",
          "sql": "SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T1.Title = 'Twelfth Night'",
          "tables_involved": [
            "works",
            "chapters"
          ],
          "join_conditions": [
            "T1.id = T2."
          ]
        },
        {
          "question": "What is the description of Act 1, Scene 2 in Twelfth Night?",
          "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2",
          "tables_involved": [
            "works",
            "chapters"
          ],
          "join_conditions": [
            "F",
            "T1.id = T2."
          ]
        },
        {
          "question": "How many more scenes are there in Act 1 than in Act 5 in Twelfth Night?",
          "sql": "SELECT SUM(IIF(T2.Act = 1, 1, 0)) - SUM(IIF(T2.Act = 5, 1, 0)) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'",
          "tables_involved": [
            "works",
            "chapters"
          ],
          "join_conditions": [
            "T1.id = T2."
          ]
        },
        {
          "question": "Which work is the character Lord Abergavenny from? Please give its short or abbreviated title.",
          "sql": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Lord Abergavenny'",
          "tables_involved": [
            "works",
            "chapters",
            "paragraphs",
            "characters"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T2.id = T3.c",
            "T3.c"
          ]
        },
        {
          "question": "Please list the character names of all the characters from the work Twelfth Night.",
          "sql": "SELECT DISTINCT T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'",
          "tables_involved": [
            "works",
            "chapters",
            "paragraphs",
            "characters"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T2.id = T3.c",
            "T3.c"
          ]
        },
        {
          "question": "How many paragraphs are there in Act 1, Scene 1 in Twelfth Night?",
          "sql": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'",
          "tables_involved": [
            "works",
            "chapters",
            "paragraphs"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T2.id = T3.c"
          ]
        },
        {
          "question": "Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.",
          "sql": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'",
          "tables_involved": [
            "works",
            "chapters",
            "paragraphs"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T2.id = T3.c"
          ]
        },
        {
          "question": "How many paragraphs contain the character Lord Abergavenny?",
          "sql": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'",
          "tables_involved": [
            "paragraphs",
            "characters"
          ],
          "join_conditions": [
            "T1.c"
          ]
        },
        {
          "question": "Please list the IDs of the paragraphs in which the character \"son to Tamora\" appears.",
          "sql": "SELECT T1.id FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.Description = 'son to Tamora'",
          "tables_involved": [
            "paragraphs",
            "characters"
          ],
          "join_conditions": [
            "T1.c",
            "= 'son to Tamo"
          ]
        },
        {
          "question": "For how many times has the scene \"OLIVIA\u2019S house.\" appeared in Twelfth Night?",
          "sql": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA\u2019S house.' AND T1.Title = 'Twelfth Night'",
          "tables_involved": [
            "works",
            "chapters"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "= 'OLIVIA\u2019S "
          ]
        }
      ]
    },
    "cars": {
      "unique_tables": [
        "price",
        "country",
        "data",
        "production"
      ],
      "table_frequency": {
        "data": 71,
        "price": 48,
        "production": 52,
        "country": 36
      },
      "table_pairs": {
        "('data', 'price')": 43,
        "('data', 'production')": 40,
        "('country', 'data')": 22,
        "('country', 'production')": 36,
        "('price', 'production')": 14,
        "('country', 'price')": 12,
        "('price', 'price')": 1,
        "('production', 'production')": 1,
        "('data', 'data')": 1
      },
      "join_examples": [
        {
          "question": "Among the cars with 8 cylinders, what is the name of the one that's the most expensive?",
          "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8 ORDER BY T2.price DESC LIMIT 1",
          "tables_involved": [
            "data",
            "price"
          ],
          "join_conditions": [
            "T1.ID = T2.ID "
          ]
        },
        {
          "question": "Among the cars over 3000lbs, how many of them cost less than $30000?",
          "sql": "SELECT COUNT(T1.car_name) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.weight > 3000 AND T2.price < 30000",
          "tables_involved": [
            "data",
            "price"
          ],
          "join_conditions": [
            "T1.ID = T2.ID "
          ]
        },
        {
          "question": "What is the acceleration of the most expensive car?",
          "sql": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1",
          "tables_involved": [
            "data",
            "price"
          ],
          "join_conditions": [
            "F",
            "T1.ID = T2.ID O"
          ]
        },
        {
          "question": "How much US dollars does a Ford Torino cost?",
          "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford torino'",
          "tables_involved": [
            "data",
            "price"
          ],
          "join_conditions": [
            "T1.ID = T2.ID "
          ]
        },
        {
          "question": "What was the origin country of the car model ford torino produced in 1970?",
          "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970",
          "tables_involved": [
            "data",
            "production",
            "country"
          ],
          "join_conditions": [
            "AS T2 ON T1.ID = T2.ID INN",
            "T3.o"
          ]
        },
        {
          "question": "Among the car models introduced in the market in 1970, how many of them have the USA as their origin country?",
          "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.model_year = 1970 AND T2.country = 'USA'",
          "tables_involved": [
            "production",
            "country"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.count"
          ]
        },
        {
          "question": "Please list the names of all the car models whose origin country is the USA.",
          "sql": "SELECT DISTINCT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T2.country = T3.origin WHERE T3.country = 'USA'",
          "tables_involved": [
            "data",
            "production",
            "country"
          ],
          "join_conditions": [
            "AS T2 ON T1.ID = T2.ID INN",
            "T2.count"
          ]
        },
        {
          "question": "Please list the names of the top 3 most expensive cars.",
          "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 3",
          "tables_involved": [
            "data",
            "price"
          ],
          "join_conditions": [
            "T1.ID = T2.ID O"
          ]
        },
        {
          "question": "Please list all the years in which the car model Chevrolet Impala was introduced in the market.",
          "sql": "SELECT DISTINCT T1.model_year FROM production AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'chevrolet impala'",
          "tables_involved": [
            "production",
            "data"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.ID = T2.ID "
          ]
        },
        {
          "question": "Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000?",
          "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.acceleration > 10 AND T2.price BETWEEN 20000 AND 30000",
          "tables_involved": [
            "data",
            "price"
          ],
          "join_conditions": [
            "T1.ID = T2.ID ",
            "> 10 AND T2.p"
          ]
        }
      ]
    },
    "donor": {
      "unique_tables": [
        "resources",
        "(",
        "donations",
        "essays",
        "Texas",
        "projects"
      ],
      "table_frequency": {
        "donations": 79,
        "essays": 56,
        "projects": 118,
        "resources": 47,
        "(": 1,
        "Texas": 1
      },
      "table_pairs": {
        "('essays', 'projects')": 37,
        "('donations', 'essays')": 25,
        "('projects', 'resources')": 39,
        "('essays', 'resources')": 5,
        "('donations', 'projects')": 44,
        "('donations', 'donations')": 3,
        "('(', 'donations')": 1,
        "('(', 'projects')": 1,
        "('(', 'resources')": 1,
        "('donations', 'resources')": 4,
        "('projects', 'projects')": 3,
        "('Texas', 'resources')": 1,
        "('Texas', 'projects')": 1,
        "('resources', 'resources')": 1
      },
      "join_examples": [
        {
          "question": "Name all the project titles whereby project materials are intended mainly for literary.",
          "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Literacy'",
          "tables_involved": [
            "essays",
            "projects"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Name the project titles meant for school whereby 65% of the students are on reduced lunch.",
          "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level LIKE 'highest%'",
          "tables_involved": [
            "essays",
            "projects"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "For project titled 'Toot Your Flute!', what is the main subject of the project materials intended for? Name the other projects with the similar focus.",
          "sql": "SELECT T2.primary_focus_subject FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Toot Your Flute!'",
          "tables_involved": [
            "essays",
            "projects"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Name the project titles created by teacher who acquired a doctor degree.",
          "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'",
          "tables_involved": [
            "essays",
            "donations"
          ],
          "join_conditions": [
            "T1.p",
            "on b"
          ]
        },
        {
          "question": "What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost.",
          "sql": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320",
          "tables_involved": [
            "essays",
            "projects"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "For all donors from Texas City, list their donation message and name of the project they donated to.",
          "sql": "SELECT T2.donation_message, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donor_city = 'Texas City'",
          "tables_involved": [
            "essays",
            "donations"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Name the vendors who provide resources for project 'Lights, Camera, Action!'. List all the item names and unit price for each.",
          "sql": "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN essays AS T3 ON T2.projectid = T3.projectid WHERE T3.title = 'Lights, Camera, Action!'",
          "tables_involved": [
            "resources",
            "projects",
            "essays"
          ],
          "join_conditions": [
            "T1.p",
            "T2.p"
          ]
        },
        {
          "question": "How much donations have been collected for project 'Whistle While We Work!'?",
          "sql": "SELECT SUM(T2.donation_to_project) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Whistle While We Work!'",
          "tables_involved": [
            "essays",
            "donations"
          ],
          "join_conditions": [
            "T1.p"
          ]
        },
        {
          "question": "Name and describe all projects created by New York teachers.",
          "sql": "SELECT T1.title, T1.short_description FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_ny_teaching_fellow = 't'",
          "tables_involved": [
            "essays",
            "projects"
          ],
          "join_conditions": [
            "F",
            "T1.p"
          ]
        },
        {
          "question": "If funded, which are the projects that could impact at least 600 students for a school with moderate level of poverty? Name the projects and state the project cost.",
          "sql": "SELECT DISTINCT T2.title, T1.total_price_excluding_optional_support FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached >= 600 AND T1.poverty_level LIKE 'moderate poverty'",
          "tables_involved": [
            "projects",
            "essays"
          ],
          "join_conditions": [
            "T1.p"
          ]
        }
      ]
    },
    "video_games": {
      "unique_tables": [
        "game",
        "genre",
        "(",
        "platform",
        "region",
        "region_sales",
        "game_publisher",
        "game_platform",
        "publisher"
      ],
      "table_frequency": {
        "region_sales": 52,
        "game": 96,
        "genre": 44,
        "game_publisher": 94,
        "publisher": 57,
        "(": 27,
        "game_platform": 85,
        "platform": 40,
        "region": 35
      },
      "table_pairs": {
        "('game', 'genre')": 43,
        "('game', 'game_publisher')": 57,
        "('game', 'publisher')": 30,
        "('game_publisher', 'publisher')": 54,
        "('game_publisher', 'genre')": 16,
        "('genre', 'publisher')": 12,
        "('(', 'game_publisher')": 15,
        "('(', 'publisher')": 12,
        "('game_platform', 'game_publisher')": 46,
        "('game_publisher', 'platform')": 22,
        "('game_platform', 'publisher')": 11,
        "('platform', 'publisher')": 4,
        "('game', 'game_platform')": 27,
        "('game', 'platform')": 10,
        "('game_platform', 'platform')": 40,
        "('(', 'game')": 7,
        "('(', 'genre')": 5,
        "('game_platform', 'region_sales')": 27,
        "('platform', 'region_sales')": 11,
        "('(', 'region')": 9,
        "('(', 'region_sales')": 10,
        "('region', 'region_sales')": 38,
        "('game_platform', 'region')": 21,
        "('platform', 'region')": 9,
        "('(', 'game_platform')": 9,
        "('(', 'platform')": 5,
        "('game_platform', 'genre')": 3,
        "('game_publisher', 'region')": 8,
        "('publisher', 'region')": 4,
        "('game_publisher', 'region_sales')": 9,
        "('publisher', 'region_sales')": 4,
        "('game', 'region')": 4,
        "('game', 'region_sales')": 5,
        "('region', 'region')": 2,
        "('region_sales', 'region_sales')": 2
      },
      "join_examples": [
        {
          "question": "How many action games are there in total?",
          "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'",
          "tables_involved": [
            "game",
            "genre"
          ],
          "join_conditions": [
            "T1.g"
          ]
        },
        {
          "question": "What is the genre of 3D Lemmings?",
          "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '3D Lemmings'",
          "tables_involved": [
            "game",
            "genre"
          ],
          "join_conditions": [
            "T1.g"
          ]
        },
        {
          "question": "Who is the publisher of 3D Lemmings?",
          "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = '3D Lemmings'",
          "tables_involved": [
            "game",
            "game_publisher",
            "publisher"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "T2.publis"
          ]
        },
        {
          "question": "Please list the names of all the games published by 10TACLE Studios.",
          "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '10TACLE Studios'",
          "tables_involved": [
            "game",
            "game_publisher",
            "publisher"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "T2.publis"
          ]
        },
        {
          "question": "Among the games published by 10TACLE Studios, how many of them are puzzles?",
          "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' AND T3.publisher_name = '10TACLE Studios'",
          "tables_involved": [
            "game",
            "game_publisher",
            "publisher",
            "genre"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "T2.publis",
            "T1.g"
          ]
        },
        {
          "question": "Please list the names of all the games published by 10TACLE Studios and are puzzles.",
          "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = '10TACLE Studios' AND T4.genre_name = 'Puzzle'",
          "tables_involved": [
            "game",
            "game_publisher",
            "publisher",
            "genre"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "T2.publis",
            "T1.g"
          ]
        },
        {
          "question": "Which publisher has published the most games?",
          "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T2.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T2.id) DESC LIMIT 1 ) t",
          "tables_involved": [
            "(",
            "game_publisher",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "On which platform was Panzer Tactics released in 2007?",
          "sql": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007",
          "tables_involved": [
            "game_publisher",
            "publisher",
            "game",
            "game_platform",
            "platform"
          ],
          "join_conditions": [
            "T1.publis",
            "T1.gam",
            "T1.id = T4.gam",
            "T4.platfo"
          ]
        },
        {
          "question": "In which year was Panzer Tactics released on DS?",
          "sql": "SELECT T4.release_year FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T5.platform_name = 'DS'",
          "tables_involved": [
            "game_publisher",
            "publisher",
            "game",
            "game_platform",
            "platform"
          ],
          "join_conditions": [
            "T1.publis",
            "T1.gam",
            "T1.id = T4.gam",
            "T4.platfo"
          ]
        },
        {
          "question": "Please list the names of the publishers of all the puzzle games.",
          "sql": "SELECT DISTINCT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle'",
          "tables_involved": [
            "game",
            "game_publisher",
            "publisher",
            "genre"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "T2.publis",
            "T1.g"
          ]
        }
      ]
    },
    "authors": {
      "unique_tables": [
        "Author",
        "Paper",
        "PaperAuthor",
        "Aerobot",
        "Conference",
        "Journal",
        "physical"
      ],
      "table_frequency": {
        "Author": 18,
        "Paper": 145,
        "Journal": 49,
        "PaperAuthor": 73,
        "Conference": 45,
        "physical": 1,
        "Aerobot": 1
      },
      "table_pairs": {
        "('Journal', 'Paper')": 45,
        "('Paper', 'PaperAuthor')": 66,
        "('Conference', 'Paper')": 39,
        "('Conference', 'PaperAuthor')": 7,
        "('Journal', 'PaperAuthor')": 9,
        "('Paper', 'physical')": 1,
        "('PaperAuthor', 'physical')": 1,
        "('Author', 'PaperAuthor')": 6,
        "('Author', 'Paper')": 3,
        "('Author', 'Conference')": 1,
        "('Conference', 'Journal')": 1,
        "('Aerobot', 'Paper')": 1,
        "('Aerobot', 'PaperAuthor')": 1
      },
      "join_examples": [
        {
          "question": "Please list the titles of the papers published in the journal \"Concepts in Magnetic Resonance Part A\" in 2008.",
          "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A' AND T2.Year = 2008",
          "tables_involved": [
            "Journal",
            "Paper"
          ],
          "join_conditions": [
            "T1.Id = T2.Jou"
          ]
        },
        {
          "question": "How many papers were published in the journal \"Concepts in Magnetic Resonance Part A\"?",
          "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A'",
          "tables_involved": [
            "Journal",
            "Paper"
          ],
          "join_conditions": [
            "T1.Id = T2.Jou"
          ]
        },
        {
          "question": "What is the url of the journal in which the paper \"Area Effects in Cepaea\" was published?",
          "sql": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'",
          "tables_involved": [
            "Journal",
            "Paper"
          ],
          "join_conditions": [
            "T1.Id = T2.Jou"
          ]
        },
        {
          "question": "Among the papers published in the journal \"Molecular Brain\", how many of them were published in the year 2011?",
          "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.FullName = 'Molecular Brain'",
          "tables_involved": [
            "Journal",
            "Paper"
          ],
          "join_conditions": [
            "T1.Id = T2.Jou"
          ]
        },
        {
          "question": "How many papers were published in 2011 in the journal whose short name is \"Mol Brain\"?",
          "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.ShortName = 'Mol Brain'",
          "tables_involved": [
            "Journal",
            "Paper"
          ],
          "join_conditions": [
            "T1.Id = T2.Jou"
          ]
        },
        {
          "question": "How many authors does the paper \"Equation Solving in Geometrical Theories\" have?",
          "sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Equation Solving in Geometrical Theories'",
          "tables_involved": [
            "PaperAuthor",
            "Paper"
          ],
          "join_conditions": [
            "T1.Pap",
            "Solving in G"
          ]
        },
        {
          "question": "Please list the names of the authors of the paper \"Area Effects in Cepaea\".",
          "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Area Effects in Cepaea'",
          "tables_involved": [
            "PaperAuthor",
            "Paper"
          ],
          "join_conditions": [
            "T1.Pap"
          ]
        },
        {
          "question": "Among the authors of the paper \"Stitching videos streamed by mobile phones in real-time\", how many of them are affiliated with Cairo Microsoft Innovation Lab?",
          "sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'University of Tokyo' AND T2.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'",
          "tables_involved": [
            "PaperAuthor",
            "Paper"
          ],
          "join_conditions": [
            "T1.Pap",
            "= 'Univ"
          ]
        },
        {
          "question": "Please list the titles of the paper whose authors include Klaus Zimmermann.",
          "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Klaus Zimmermann'",
          "tables_involved": [
            "PaperAuthor",
            "Paper"
          ],
          "join_conditions": [
            "T1.Pap"
          ]
        },
        {
          "question": "Which author of the paper \"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is affiliated with National Taiwan University Department of Computer Science and Information Engineering Taiwan?",
          "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND T1.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan'",
          "tables_involved": [
            "PaperAuthor",
            "Paper"
          ],
          "join_conditions": [
            "T1.Pap",
            "of K",
            "= 'National Tai"
          ]
        }
      ]
    },
    "college_completion": {
      "unique_tables": [
        "state_sector_grads",
        "(",
        "state_sector_details",
        "institution_grads",
        "institution_details"
      ],
      "table_frequency": {
        "institution_details": 74,
        "state_sector_grads": 25,
        "institution_grads": 44,
        "(": 6,
        "state_sector_details": 21
      },
      "table_pairs": {
        "('institution_details', 'state_sector_grads')": 19,
        "('institution_details', 'institution_grads')": 56,
        "('institution_details', 'institution_details')": 9,
        "('institution_grads', 'institution_grads')": 6,
        "('(', 'institution_details')": 1,
        "('(', 'institution_grads')": 1,
        "('state_sector_grads', 'state_sector_grads')": 2,
        "('institution_details', 'state_sector_details')": 14,
        "('state_sector_details', 'state_sector_grads')": 9,
        "('state_sector_details', 'state_sector_details')": 2,
        "('institution_grads', 'state_sector_details')": 4
      },
      "join_examples": [
        {
          "question": "List the all the institutes from the state with the most number of American Indian in 2007.",
          "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2007 AND T2.race = 'Ai' GROUP BY T1.chronname ORDER BY COUNT(T1.chronname) DESC LIMIT 1",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "State the name and website of the institutes from the state with 209 graduate cohort in 2011.",
          "sql": "SELECT T1.chronname, T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2011 AND T2.grad_cohort = 209",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located?",
          "sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year BETWEEN 2011 AND 2013 AND T1.chronname = 'Gateway Community College' AND T2.gender = 'F'",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "What is the total male graduates in 2012 in the state whereby the institute with the highest average amount of student aid going to undergraduate recipients is located?",
          "sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "State the average median SAT value for institutes in the state with the most male graduate cohort in 2013.",
          "sql": "SELECT AVG(T1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T2.gender = 'M' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "Name the state with the most number of graduate cohort in 2012 from private institute for profit? List all such institutes in the mentioned state.",
          "sql": "SELECT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T1.control = 'Private for-profit' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "List all the public institutes from the state with the least number of graduate cohort in 2013.",
          "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T1.control = 'Public' ORDER BY T2.grad_cohort LIMIT 1",
          "tables_involved": [
            "institution_details",
            "state_sector_grads"
          ],
          "join_conditions": [
            "T1.stat"
          ]
        },
        {
          "question": "Provide the institute name with less than 200 graduate cohort of all races and genders in 2013. Also, please state the total number of full-time equivalent undergraduates for the institute.",
          "sql": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200",
          "tables_involved": [
            "institution_details",
            "institution_grads"
          ],
          "join_conditions": [
            "T1.unitid = T2.unitid "
          ]
        },
        {
          "question": "What is the number of female graduate for all students cohort from Oakwood University in 2013?",
          "sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'",
          "tables_involved": [
            "institution_details",
            "institution_grads"
          ],
          "join_conditions": [
            "T1.unitid = T2.unitid "
          ]
        },
        {
          "question": "In 2012, how many Asian female graduates were seeking another type of degree or certificate at the 4-year institution at University of Alaska at Anchorage?",
          "sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'F' AND T2.race = 'A' AND T1.chronname = 'University of Alaska at Anchorage' AND T2.cohort = '4y other'",
          "tables_involved": [
            "institution_details",
            "institution_grads"
          ],
          "join_conditions": [
            "T1.unitid = T2.unitid "
          ]
        }
      ]
    },
    "public_review_platform": {
      "unique_tables": [
        "Categories",
        "Users",
        "Tips",
        "Days",
        "Business_Attributes",
        "Business",
        "Business_categories",
        "(",
        "Years",
        "Elite",
        "Business_Hours",
        "Checkins",
        "Business_Categories",
        "Reviews",
        "Users_Compliments",
        "Business_attributes",
        "Users_compliments",
        "Compliments",
        "Attributes",
        "Business_hours"
      ],
      "table_frequency": {
        "Business": 226,
        "Reviews": 75,
        "Users": 57,
        "Attributes": 52,
        "Business_Attributes": 61,
        "Categories": 99,
        "Business_Categories": 98,
        "Tips": 21,
        "Business_Hours": 72,
        "Days": 47,
        "Compliments": 17,
        "Users_Compliments": 23,
        "Checkins": 2,
        "Elite": 18,
        "(": 1,
        "Business_attributes": 1,
        "Users_compliments": 1,
        "Years": 3,
        "Business_categories": 1,
        "Business_hours": 1
      },
      "table_pairs": {
        "('Attributes', 'Business_Attributes')": 48,
        "('Business_Categories', 'Categories')": 100,
        "('Business', 'Categories')": 77,
        "('Categories', 'Reviews')": 12,
        "('Business', 'Business_Categories')": 77,
        "('Business_Categories', 'Reviews')": 11,
        "('Business', 'Reviews')": 47,
        "('Reviews', 'Users')": 15,
        "('Categories', 'Tips')": 5,
        "('Business_Categories', 'Tips')": 5,
        "('Business', 'Tips')": 8,
        "('Tips', 'Users')": 9,
        "('Business_Hours', 'Days')": 48,
        "('Compliments', 'Users_Compliments')": 16,
        "('Attributes', 'Business')": 27,
        "('Business', 'Business_Attributes')": 37,
        "('Business_Hours', 'Categories')": 18,
        "('Business_Categories', 'Business_Hours')": 18,
        "('Business', 'Business_Hours')": 50,
        "('Categories', 'Days')": 8,
        "('Business_Categories', 'Days')": 8,
        "('Business', 'Days')": 33,
        "('Business_Attributes', 'Business_Categories')": 5,
        "('Business_Attributes', 'Categories')": 5,
        "('Reviews', 'Users_Compliments')": 2,
        "('Business', 'Users_Compliments')": 1,
        "('Business_Categories', 'Business_Categories')": 2,
        "('Categories', 'Categories')": 1,
        "('Business', 'Business')": 19,
        "('Business', 'Checkins')": 1,
        "('Checkins', 'Days')": 2,
        "('Attributes', 'Categories')": 4,
        "('Attributes', 'Business_Categories')": 4,
        "('Business_Attributes', 'Business_Hours')": 2,
        "('Attributes', 'Business_Hours')": 2,
        "('Business_Attributes', 'Days')": 2,
        "('Attributes', 'Days')": 2,
        "('Elite', 'Users')": 10,
        "('Elite', 'Reviews')": 3,
        "('(', 'Users')": 1,
        "('(', 'Elite')": 1,
        "('(', 'Reviews')": 1,
        "('Business_Hours', 'Business_Hours')": 2,
        "('Days', 'Days')": 2,
        "('Business', 'Business_attributes')": 1,
        "('Attributes', 'Business_attributes')": 1,
        "('Elite', 'Tips')": 1,
        "('Reviews', 'Reviews')": 5,
        "('Users', 'Users_Compliments')": 11,
        "('Compliments', 'Users')": 6,
        "('Business', 'Users')": 4,
        "('Elite', 'Users_Compliments')": 2,
        "('Compliments', 'Elite')": 2,
        "('Elite', 'Years')": 3,
        "('Users', 'Years')": 2,
        "('Users_Compliments', 'Years')": 1,
        "('Compliments', 'Years')": 1,
        "('Compliments', 'Reviews')": 1,
        "('Users', 'Users')": 1,
        "('Business_categories', 'Reviews')": 1,
        "('Business_categories', 'Categories')": 1,
        "('Attributes', 'Reviews')": 1,
        "('Business_Attributes', 'Reviews')": 1,
        "('Business_Hours', 'Reviews')": 1,
        "('Reviews', 'Tips')": 1,
        "('Business', 'Business_hours')": 1,
        "('Business_hours', 'Days')": 1
      },
      "join_examples": [
        {
          "question": "How many Yelp businesses are opened 24 hours?",
          "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'",
          "tables_involved": [
            "Attributes",
            "Business_Attributes"
          ],
          "join_conditions": [
            "T1.att"
          ]
        },
        {
          "question": "What kind of \"wi-fi\" does Yelp business No.\"10172\" have?",
          "sql": "SELECT T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 10172 AND T1.attribute_name LIKE 'wi-fi'",
          "tables_involved": [
            "Attributes",
            "Business_Attributes"
          ],
          "join_conditions": [
            "T1.att"
          ]
        },
        {
          "question": "How many \"bars\" are there in the Yelp business?",
          "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Bars'",
          "tables_involved": [
            "Categories",
            "Business_Categories"
          ],
          "join_conditions": [
            "T1.cat"
          ]
        },
        {
          "question": "How many more \"buffets\" than \"gyms\" in Yelp business?",
          "sql": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id",
          "tables_involved": [
            "Categories",
            "Business_Categories"
          ],
          "join_conditions": [
            "T1.cat"
          ]
        },
        {
          "question": "What business category is the Yelp business which got the most 5 star reviews in?",
          "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T4.review_stars = 5 GROUP BY T1.category_name ORDER BY COUNT(T1.category_name) DESC LIMIT 1",
          "tables_involved": [
            "Categories",
            "Business_Categories",
            "Business",
            "Reviews"
          ],
          "join_conditions": [
            "T1.cat",
            "T2.busin",
            "T3.busin"
          ]
        },
        {
          "question": "In which year did the user who gave the most number of \"5\" star reviews join the Yelp?",
          "sql": "SELECT T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_stars = 5 GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.review_stars) DESC LIMIT 1",
          "tables_involved": [
            "Reviews",
            "Users"
          ],
          "join_conditions": [
            "T1.us"
          ]
        },
        {
          "question": "For the user who gave the most number of long reviews, what is his/her averge ratings of all review?",
          "sql": "SELECT CAST(SUM(T1.review_stars) AS REAL) / COUNT(T1.review_stars) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_length LIKE 'Long' GROUP BY T1.user_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1",
          "tables_involved": [
            "Reviews",
            "Users"
          ],
          "join_conditions": [
            "T1.us"
          ]
        },
        {
          "question": "For the Yelp business which had the most number of \"long\" reviews, which category does it belong to?",
          "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' GROUP BY T2.business_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1",
          "tables_involved": [
            "Reviews",
            "Business",
            "Business_Categories",
            "Categories"
          ],
          "join_conditions": [
            "T1.busin",
            "T2.busin",
            "T3.cat"
          ]
        },
        {
          "question": "For the Yelp business which had the most number of \"short\" tips, which category does it belong to?",
          "sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'",
          "tables_involved": [
            "Categories",
            "Business_Categories",
            "Business",
            "Tips"
          ],
          "join_conditions": [
            "T1.cat",
            "T2.busin",
            "T3.busin"
          ]
        },
        {
          "question": "In which year did the user who has given the most number of \"short\" tips join the Yelp?",
          "sql": "SELECT T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.tip_length LIKE 'short' GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.tip_length) DESC LIMIT 1",
          "tables_involved": [
            "Tips",
            "Users"
          ],
          "join_conditions": [
            "T1.us"
          ]
        }
      ]
    },
    "citeseer": {
      "unique_tables": [
        "cites",
        "paper",
        "content"
      ],
      "table_frequency": {
        "paper": 15,
        "content": 15,
        "cites": 6
      },
      "table_pairs": {
        "('content', 'paper')": 12,
        "('cites', 'content')": 2,
        "('cites', 'paper')": 1
      },
      "join_examples": [
        {
          "question": "What is the total number of word cited under that class labelled 'AI'?",
          "sql": "SELECT COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "For all words cited in paper ID 315017, state the other paper ID and class label which also cited those words.",
          "sql": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "Among all the DB class type citation, which word is the most frequently cited?",
          "sql": "SELECT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T2.word_cited_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "Calculate the percentage of words used in Agents class label.",
          "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.class_label = 'Agents' THEN T2.word_cited_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "Which paper ID cited the most word? In which class label does it belongs to?",
          "sql": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id, T1.class_label ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "List all the paper ID and its class type that cited the word 'word1002'.",
          "sql": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1002'",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "List all words cited in the AI class label.",
          "sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "What is the class label of paper ID 'chakrabarti01integrating'. How many words were cited by this paper ID?",
          "sql": "SELECT DISTINCT T1.class_label, COUNT(T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 'chakrabarti01integrating' GROUP BY T1.class_label",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "List all paper ID and its class type with more than 20 cited words.",
          "sql": "SELECT DISTINCT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id, T1.class_label HAVING COUNT(T2.word_cited_id) > 20",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        },
        {
          "question": "List the words that are cited in both AI and IR class label.",
          "sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'",
          "tables_involved": [
            "paper",
            "content"
          ],
          "join_conditions": [
            "T1.pap"
          ]
        }
      ]
    },
    "simpson_episodes": {
      "unique_tables": [
        "Character_Award",
        "Episode",
        "(",
        "Vote",
        "Person;",
        "Keyword",
        "Award",
        "Credit",
        "Award;",
        "Person",
        "Vote;"
      ],
      "table_frequency": {
        "Person": 48,
        "Award": 84,
        "Character_Award": 15,
        "Episode": 105,
        "Keyword": 24,
        "Vote": 53,
        "Credit": 38,
        "Person;": 2,
        "Vote;": 1,
        "(": 1,
        "Award;": 1
      },
      "table_pairs": {
        "('Award', 'Person')": 17,
        "('Award', 'Character_Award')": 15,
        "('Episode', 'Keyword')": 17,
        "('Award', 'Episode')": 29,
        "('Episode', 'Vote')": 39,
        "('Credit', 'Episode')": 17,
        "('Credit', 'Person')": 12,
        "('Award', 'Credit')": 3,
        "('Award', 'Keyword')": 3,
        "('Keyword', 'Vote')": 4,
        "('(', 'Award')": 2,
        "('(', 'Episode')": 2,
        "('Award', 'Award')": 1,
        "('Episode', 'Episode')": 1,
        "('Award', 'Vote')": 8,
        "('Vote', 'Vote')": 3,
        "('Credit', 'Vote')": 1,
        "('Credit', 'Keyword')": 1
      },
      "join_examples": [
        {
          "question": "In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born?",
          "sql": "SELECT T1.birth_country FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';",
          "tables_involved": [
            "Person",
            "Award"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.nam"
          ]
        },
        {
          "question": "Please list the names of all the awards won by the crew member whose nickname is Doofus.",
          "sql": "SELECT T2.award FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.result = 'Winner';",
          "tables_involved": [
            "Person",
            "Award"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.nam"
          ]
        },
        {
          "question": "How many crew members who were born in the USA were nominated for the Outstanding Animated Program (For Programming Less Than One Hour) award in 2009?",
          "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.year = 2009;",
          "tables_involved": [
            "Person",
            "Award"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.nam"
          ]
        },
        {
          "question": "Which character won the Outstanding Voice-Over Performance award in 2009?",
          "sql": "SELECT DISTINCT T1.character FROM Character_Award AS T1 INNER JOIN Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';",
          "tables_involved": [
            "Character_Award",
            "Award"
          ],
          "join_conditions": [
            "T1.a"
          ]
        },
        {
          "question": "Please list all the keywords of the episode Lost Verizon.",
          "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Lost Verizon';",
          "tables_involved": [
            "Episode",
            "Keyword"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How many keywords does the episode that was aired on 2008/10/19 have?",
          "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';",
          "tables_involved": [
            "Episode",
            "Keyword"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "What's the rating of the episode in which Dan Castellaneta won the Outstanding Voice-Over Performance award in 2009?",
          "sql": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';",
          "tables_involved": [
            "Award",
            "Episode"
          ],
          "join_conditions": [
            "T1.",
            "= 'Dan Cast"
          ]
        },
        {
          "question": "How many 7-star votes in star score did the episode Lost Verizon have?",
          "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' AND T2.stars = 7;",
          "tables_involved": [
            "Episode",
            "Vote"
          ],
          "join_conditions": [
            "T2."
          ]
        },
        {
          "question": "How many stars did most of the voters give in star score for the episode Lost Verizon?",
          "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' ORDER BY T2.votes DESC LIMIT 1;",
          "tables_involved": [
            "Episode",
            "Vote"
          ],
          "join_conditions": [
            "T2."
          ]
        },
        {
          "question": "Please list the titles of the episodes that have over 200 voters voting a 10 in star score.",
          "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.votes > 200 AND T2.stars = 10;",
          "tables_involved": [
            "Episode",
            "Vote"
          ],
          "join_conditions": [
            "T2."
          ]
        }
      ]
    },
    "student_loan": {
      "unique_tables": [
        "filed_for_bankrupcy",
        "person",
        "(",
        "no_payment_due",
        "male",
        "enlist",
        "longest_absense_from_school",
        "disabled",
        "enrolled",
        "unemployed"
      ],
      "table_frequency": {
        "longest_absense_from_school": 69,
        "enlist": 77,
        "male": 51,
        "filed_for_bankrupcy": 22,
        "no_payment_due": 35,
        "disabled": 49,
        "unemployed": 31,
        "enrolled": 28,
        "person": 16,
        "(": 8
      },
      "table_pairs": {
        "('longest_absense_from_school', 'male')": 5,
        "('enlist', 'male')": 16,
        "('filed_for_bankrupcy', 'longest_absense_from_school')": 4,
        "('enlist', 'no_payment_due')": 7,
        "('disabled', 'male')": 10,
        "('disabled', 'filed_for_bankrupcy')": 2,
        "('filed_for_bankrupcy', 'male')": 3,
        "('no_payment_due', 'unemployed')": 8,
        "('enlist', 'longest_absense_from_school')": 10,
        "('disabled', 'longest_absense_from_school')": 16,
        "('disabled', 'enlist')": 8,
        "('disabled', 'enrolled')": 5,
        "('enlist', 'enrolled')": 9,
        "('no_payment_due', 'person')": 1,
        "('male', 'no_payment_due')": 5,
        "('male', 'person')": 11,
        "('enlist', 'filed_for_bankrupcy')": 5,
        "('enrolled', 'unemployed')": 1,
        "('longest_absense_from_school', 'unemployed')": 10,
        "('filed_for_bankrupcy', 'unemployed')": 3,
        "('filed_for_bankrupcy', 'no_payment_due')": 3,
        "('enlist', 'unemployed')": 3,
        "('disabled', 'unemployed')": 7,
        "('(', 'disabled')": 1,
        "('(', 'enrolled')": 3,
        "('(', 'male')": 3,
        "('(', 'enlist')": 4,
        "('enrolled', 'longest_absense_from_school')": 1,
        "('disabled', 'no_payment_due')": 3,
        "('disabled', 'person')": 3,
        "('enrolled', 'male')": 5,
        "('(', 'filed_for_bankrupcy')": 1,
        "('enrolled', 'filed_for_bankrupcy')": 2,
        "('male', 'unemployed')": 2,
        "('longest_absense_from_school', 'no_payment_due')": 2,
        "('enlist', 'person')": 4,
        "('longest_absense_from_school', 'person')": 1,
        "('filed_for_bankrupcy', 'person')": 1,
        "('enrolled', 'person')": 3,
        "('(', 'person')": 1
      },
      "join_examples": [
        {
          "question": "Among the students that have been absent from school for more than 5 months, how many of them are male?",
          "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` >= 5",
          "tables_involved": [
            "longest_absense_from_school",
            "male"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "Please list the names of the male students that belong to the navy department.",
          "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy'",
          "tables_involved": [
            "enlist",
            "male"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "Among the students that have filed for bankruptcy, how many of them have been absent from school for over 5 months?",
          "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.`name` = T2.`name` WHERE T2.`month` > 5",
          "tables_involved": [
            "filed_for_bankrupcy",
            "longest_absense_from_school"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "Among the students from the navy department, how many of them have payment due?",
          "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy' AND T2.bool = 'pos'",
          "tables_involved": [
            "enlist",
            "no_payment_due"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "Please list the male students that are disabled and have filed for bankruptcy.",
          "sql": "SELECT T1.name, T2.name, T3.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` INNER JOIN filed_for_bankrupcy AS T3 ON T1.`name` = T3.`name`",
          "tables_involved": [
            "disabled",
            "male",
            "filed_for_bankrupcy"
          ],
          "join_conditions": [
            "T1.`nam",
            "T1.`nam"
          ]
        },
        {
          "question": "How many students are unemployed and have payment due?",
          "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.`name` = T2.`name`",
          "tables_involved": [
            "unemployed",
            "no_payment_due"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "What is the longest time for a student from the navy department to be absent from school?",
          "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T2.organ = 'navy' ORDER BY T1.`month` DESC LIMIT 1",
          "tables_involved": [
            "longest_absense_from_school",
            "enlist"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "How many disabled students have never been absent from school?",
          "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` = 0",
          "tables_involved": [
            "longest_absense_from_school",
            "disabled"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "Please list the departments the students are absent from school for 9 months are in.",
          "sql": "SELECT T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` = 9",
          "tables_involved": [
            "longest_absense_from_school",
            "enlist"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        },
        {
          "question": "Which department has the most disabled students?",
          "sql": "SELECT T2.organ, COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.`name` = T2.`name` GROUP BY T2.organ ORDER BY COUNT(T1.name) DESC LIMIT 1",
          "tables_involved": [
            "disabled",
            "enlist"
          ],
          "join_conditions": [
            "T1.`nam"
          ]
        }
      ]
    },
    "mental_health_survey": {
      "unique_tables": [
        "(",
        "Survey",
        "Question",
        "Answer"
      ],
      "table_frequency": {
        "Answer": 55,
        "Question": 41,
        "(": 3,
        "Survey": 10
      },
      "table_pairs": {
        "('Answer', 'Question')": 52,
        "('(', 'Answer')": 6,
        "('Answer', 'Answer')": 8,
        "('(', 'Question')": 5,
        "('(', 'Survey')": 2,
        "('Question', 'Survey')": 6,
        "('Question', 'Question')": 6,
        "('Answer', 'Survey')": 14,
        "('Survey', 'Survey')": 2
      },
      "join_examples": [
        {
          "question": "How many users, between the age 27 to 35, were surveyed in 2018?",
          "sql": "SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2018 AND T2.questionid = 1 AND T1.AnswerText BETWEEN '27' AND '35'",
          "tables_involved": [
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu"
          ]
        },
        {
          "question": "In 2019, how many users in the United States have a family history of mental illness?",
          "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T2.questionid FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 6 AND T1.AnswerText LIKE 'Yes' ) AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 3 AND T1.AnswerText LIKE 'United States'",
          "tables_involved": [
            "Answer",
            "(",
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu",
            "T1.Qu"
          ]
        },
        {
          "question": "Betweeen 2016 to 2019, which year recorded the highest number of people with mental illness?",
          "sql": "SELECT T1.SurveyID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID BETWEEN 2016 AND 2019 AND T2.questionid = 34 AND T1.AnswerText LIKE 'Yes' GROUP BY T1.SurveyID ORDER BY COUNT(T1.UserID) DESC LIMIT 1",
          "tables_involved": [
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu"
          ]
        },
        {
          "question": "How many female users were surveyed in the mental health survey for 2017 in the state of Nebraska?",
          "sql": "SELECT COUNT(*) FROM ( SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T3.Description = 'mental health survey for 2017' AND T1.questionid = 2 AND T2.AnswerText = 'Female' UNION SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T1.questionid = 4 AND T2.AnswerText = 'Nebraska' AND T3.Description = 'mental health survey for 2017' )",
          "tables_involved": [
            "(",
            "Question",
            "Answer",
            "Survey",
            "Question",
            "Answer",
            "Survey"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.qu",
            "T2.Su",
            "= 'm",
            "S",
            "AS T1 INN",
            "T1.qu",
            "T2.Su",
            "= 'm"
          ]
        },
        {
          "question": "How many users believed that their productivity is ever affected by a mental health issue overall?",
          "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 54 AND T1.AnswerText LIKE 'Yes'",
          "tables_involved": [
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu"
          ]
        },
        {
          "question": "What are the ages of the oldest and youngest user that were surveyed? Indicate their user id.",
          "sql": "SELECT MAX(T1.AnswerText), MIN(T1.AnswerText) , ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1 ORDER BY T1.AnswerText LIMIT 1 ) AS \"youngest id\" FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1",
          "tables_involved": [
            "Answer",
            "Question",
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu",
            "AS T2 ON T1.Qu"
          ]
        },
        {
          "question": "Which country have the least number of users being surveyed? Indicate the name of the country. If there are multiple countries having the same number of users, indicate all of their names.",
          "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 GROUP BY T1.AnswerText ORDER BY COUNT(T1.UserID) DESC LIMIT 1",
          "tables_involved": [
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu"
          ]
        },
        {
          "question": "What is the average age of the survey respondents in the United States?",
          "sql": "SELECT CAST(SUM(T1.AnswerText) AS REAL) / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 AND T1.AnswerText = 'United States' ) AS T2 ON T1.UserID = T2.UserID INNER JOIN Question AS T3 ON T1.QuestionID = T3.questionid WHERE T3.questionid = 1",
          "tables_involved": [
            "Answer",
            "(",
            "Answer",
            "Question",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu",
            "T1.Us",
            "AS T3 ON T1.Qu"
          ]
        },
        {
          "question": "What is the percentage of the the users who would bring up a mental health issue with a potential employer in an interview?",
          "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12",
          "tables_involved": [
            "Answer",
            "Question"
          ],
          "join_conditions": [
            "AS T2 ON T1.Qu"
          ]
        },
        {
          "question": "What is the oldest age of the users in 2014's survey?",
          "sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'What is your age?' AND T2.SurveyID = 2014 ORDER BY T2.AnswerText DESC LIMIT 1",
          "tables_involved": [
            "Question",
            "Answer"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.qu"
          ]
        }
      ]
    },
    "disney": {
      "unique_tables": [
        "`movies_total_gross`",
        "(",
        "revenue",
        "characters",
        "`voice-actors`",
        "movies_total_gross",
        "director"
      ],
      "table_frequency": {
        "revenue": 5,
        "director": 50,
        "characters": 55,
        "`voice-actors`": 35,
        "(": 3,
        "`movies_total_gross`": 4,
        "movies_total_gross": 52
      },
      "table_pairs": {
        "('characters', 'director')": 20,
        "('`voice-actors`', 'characters')": 14,
        "('(', '`movies_total_gross`')": 1,
        "('(', 'director')": 2,
        "('`movies_total_gross`', 'director')": 2,
        "('director', 'movies_total_gross')": 24,
        "('`movies_total_gross`', 'characters')": 1,
        "('characters', 'movies_total_gross')": 20,
        "('`voice-actors`', 'director')": 8,
        "('(', '`voice-actors`')": 1,
        "('(', 'movies_total_gross')": 2,
        "('`voice-actors`', 'movies_total_gross')": 8,
        "('movies_total_gross', 'movies_total_gross')": 1,
        "('director', 'director')": 1
      },
      "join_examples": [
        {
          "question": "Please list the villains of all the movies directed by Wolfgang Reitherman.",
          "sql": "SELECT T2.villian FROM director AS T1 INNER JOIN characters AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' AND T2.villian IS NOT NULL",
          "tables_involved": [
            "director",
            "characters"
          ],
          "join_conditions": [
            "T1.nam"
          ]
        },
        {
          "question": "Among the movies directed by Wolfgang Reitherman, how many of them were released in December?",
          "sql": "SELECT COUNT(movie_title) FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(release_date, INSTR(release_date, '-') + 1, 3) = 'Dec' AND T2.director = 'Wolfgang Reitherman'",
          "tables_involved": [
            "characters",
            "director"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "The song \"Once Upon a Dream\" is associated with the movie directed by whom?",
          "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song = 'Once Upon a Dream'",
          "tables_involved": [
            "characters",
            "director"
          ],
          "join_conditions": [
            "T1.movi",
            "a D"
          ]
        },
        {
          "question": "Who is the voice actor for the villain of the movie \"Alice in Wonderland\"?",
          "sql": "SELECT T1.`voice-actor` FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'",
          "tables_involved": [
            "`voice-actors`",
            "characters"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Please list the release dates of all the movies in which Alan Tudyk is a voice actor.",
          "sql": "SELECT T2.release_date FROM `voice-actors` AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.`voice-actor` = 'Alan Tudyk'",
          "tables_involved": [
            "`voice-actors`",
            "characters"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Among the movies in which Alan Tudyk is a voice actor, how many of them were released after 2012?",
          "sql": "SELECT COUNT(T2.movie) FROM characters AS T1 INNER JOIN `voice-actors` AS T2 ON T1.movie_title = T2.movie WHERE T2.`voice-actor` = 'Alan Tudyk' AND SUBSTR(release_date, INSTR(release_date, '-') + 5) > 12",
          "tables_involved": [
            "characters",
            "`voice-actors`"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Among the movies directed by Wolfgang Reitherman, how many of them are Comedies?",
          "sql": "SELECT COUNT(T3.name) FROM ( SELECT T2.name FROM `movies_total_gross` AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.genre = 'Comedy' GROUP BY T2.name ) T3",
          "tables_involved": [
            "(",
            "`movies_total_gross`",
            "director"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Among the movies directed by Wolfgang Reitherman, which one of them was the most popular?",
          "sql": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' ORDER BY T2.total_gross DESC LIMIT 1",
          "tables_involved": [
            "director",
            "movies_total_gross"
          ],
          "join_conditions": [
            "T1.nam"
          ]
        },
        {
          "question": "Please list the movies directed by Wolfgang Reitherman that can be watched by the general audience.",
          "sql": "SELECT T1.movie_title FROM `movies_total_gross` AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.MPAA_rating = 'G' AND T2.director = 'Wolfgang Reitherman'",
          "tables_involved": [
            "`movies_total_gross`",
            "director"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        },
        {
          "question": "Which character is the villain of the most popular movie?",
          "sql": "SELECT T2.villian FROM `movies_total_gross` AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1",
          "tables_involved": [
            "`movies_total_gross`",
            "characters"
          ],
          "join_conditions": [
            "T1.movi"
          ]
        }
      ]
    },
    "legislator": {
      "unique_tables": [
        "(",
        "`current-terms`",
        "`historical-terms`",
        "historical",
        "\"current-terms\"",
        "`social-media`",
        "current"
      ],
      "table_frequency": {
        "current": 123,
        "`social-media`": 36,
        "`current-terms`": 74,
        "(": 9,
        "historical": 40,
        "`historical-terms`": 29,
        "\"current-terms\"": 1
      },
      "table_pairs": {
        "('`social-media`', 'current')": 32,
        "('`current-terms`', 'current')": 64,
        "('(', 'current')": 8,
        "('(', '`current-terms`')": 6,
        "('`historical-terms`', 'historical')": 25,
        "('`current-terms`', '`social-media`')": 1,
        "('(', '`social-media`')": 1,
        "('(', 'historical')": 1,
        "('(', '`historical-terms`')": 1,
        "('\"current-terms\"', '(')": 1,
        "('\"current-terms\"', 'current')": 1,
        "('current', 'current')": 1
      },
      "join_examples": [
        {
          "question": "What is the username of the current official Facebook presence of current legislator Todd Young?",
          "sql": "SELECT T1.facebook FROM `social-media` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Todd Young'",
          "tables_involved": [
            "`social-media`",
            "current"
          ],
          "join_conditions": [
            "T2.bioguid"
          ]
        },
        {
          "question": "How many current legislators do not have an account on instagram?",
          "sql": "SELECT COUNT(*) FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL",
          "tables_involved": [
            "`social-media`",
            "current"
          ],
          "join_conditions": [
            "T1.bioguid"
          ]
        },
        {
          "question": "To which current legislator does twitter ID234128524 belong? Please give his or her full official name.",
          "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.twitter_id = 234128524",
          "tables_involved": [
            "current",
            "`social-media`"
          ],
          "join_conditions": [
            "T2.bioguid"
          ]
        },
        {
          "question": "Please list the current official YouTube usernames of all the current female legislators.",
          "sql": "SELECT T2.youtube FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.gender_bio = 'F'",
          "tables_involved": [
            "current",
            "`social-media`"
          ],
          "join_conditions": [
            "T2.bioguid"
          ]
        },
        {
          "question": "What is the username of the current official Facebook presence of the oldest current legislator?",
          "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN `social-media` AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1",
          "tables_involved": [
            "current",
            "`social-media`"
          ],
          "join_conditions": [
            "T2.bioguid"
          ]
        },
        {
          "question": "Among the current legislators who do not have accounts on OpenSecrets.org., how many of them do not have instagram accounts either?",
          "sql": "SELECT SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS count FROM `social-media` AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.opensecrets_id IS NULL OR T2.opensecrets_id = ''",
          "tables_involved": [
            "`social-media`",
            "current"
          ],
          "join_conditions": [
            "T1.bioguid"
          ]
        },
        {
          "question": "Current legislator Roger F. Wicker has not been a representative for how many terms?",
          "sql": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''",
          "tables_involved": [
            "current",
            "`current-terms`"
          ],
          "join_conditions": [
            "T1.bioguid"
          ]
        },
        {
          "question": "For how many terms has current legislator Sherrod Brown served?",
          "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown'",
          "tables_involved": [
            "current",
            "`current-terms`"
          ],
          "join_conditions": [
            "T1.bioguid"
          ]
        },
        {
          "question": "Please list the official full names of all the current legislators who were once a senator during his or her terms.",
          "sql": "SELECT T2.official_full_name FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank IS NOT NULL",
          "tables_involved": [
            "`current-terms`",
            "current"
          ],
          "join_conditions": [
            "T2.bioguid"
          ]
        },
        {
          "question": "For which state did current legislator Sherrod Brown serve during his term that started on 1993/1/5?",
          "sql": "SELECT T1.state FROM `current-terms` AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'",
          "tables_involved": [
            "`current-terms`",
            "current"
          ],
          "join_conditions": [
            "T2.bioguid"
          ]
        }
      ]
    },
    "olympics": {
      "unique_tables": [
        "city",
        "medal",
        "games",
        "event",
        "person",
        "(",
        "games_competitor",
        "competitor_event",
        "noc_region",
        "person_region",
        "sport",
        "games_city"
      ],
      "table_frequency": {
        "games": 66,
        "games_competitor": 85,
        "person": 81,
        "person_region": 41,
        "noc_region": 37,
        "games_city": 34,
        "city": 36,
        "sport": 18,
        "event": 26,
        "competitor_event": 28,
        "medal": 14,
        "(": 2
      },
      "table_pairs": {
        "('games', 'games_competitor')": 49,
        "('games', 'person')": 21,
        "('games_competitor', 'person')": 51,
        "('noc_region', 'person_region')": 36,
        "('noc_region', 'person')": 27,
        "('person', 'person_region')": 31,
        "('city', 'games_city')": 34,
        "('games', 'games_city')": 22,
        "('city', 'games')": 22,
        "('games', 'person_region')": 4,
        "('games', 'noc_region')": 4,
        "('games_competitor', 'person_region')": 7,
        "('games_competitor', 'noc_region')": 6,
        "('event', 'sport')": 16,
        "('competitor_event', 'games_competitor')": 22,
        "('competitor_event', 'event')": 15,
        "('event', 'games_competitor')": 11,
        "('competitor_event', 'person')": 15,
        "('medal', 'person')": 7,
        "('games_competitor', 'medal')": 10,
        "('competitor_event', 'medal')": 14,
        "('event', 'medal')": 3,
        "('(', 'games')": 4,
        "('(', 'games_competitor')": 4,
        "('(', '(')": 1,
        "('games', 'games')": 2,
        "('games_competitor', 'games_competitor')": 2,
        "('competitor_event', 'sport')": 6,
        "('games_competitor', 'sport')": 5,
        "('person', 'sport')": 5,
        "('event', 'person')": 8,
        "('games_city', 'games_competitor')": 7,
        "('city', 'games_competitor')": 7,
        "('competitor_event', 'person_region')": 3,
        "('medal', 'person_region')": 2,
        "('medal', 'noc_region')": 2,
        "('competitor_event', 'noc_region')": 2,
        "('games', 'sport')": 1,
        "('event', 'games')": 1,
        "('competitor_event', 'games')": 1,
        "('person_region', 'person_region')": 1,
        "('games_city', 'person')": 2,
        "('city', 'person')": 2,
        "('person', 'person')": 1
      },
      "join_examples": [
        {
          "question": "Please list the names of all the Olympic games that John Aalberg has taken part in.",
          "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'",
          "tables_involved": [
            "games",
            "games_competitor",
            "person"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "What was the name of the Olympic game that John Aalberg took part in when he was 31?",
          "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T2.age = 31",
          "tables_involved": [
            "games",
            "games_competitor",
            "person"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "When John Aalberg took part in the 1994 Winter Olympic Game, how old was he?",
          "sql": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T1.games_name = '1994 Winter'",
          "tables_involved": [
            "games",
            "games_competitor",
            "person"
          ],
          "join_conditions": [
            "T1.id = T2.gam",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "How many Olympic competitors are from Finland?",
          "sql": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Finland'",
          "tables_involved": [
            "person_region",
            "noc_region"
          ],
          "join_conditions": [
            "AS T1 INN",
            "AS T2 ON T1."
          ]
        },
        {
          "question": "Please list the names of all the Olympic competitors from Finland.",
          "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland'",
          "tables_involved": [
            "noc_region",
            "person_region",
            "person"
          ],
          "join_conditions": [
            "AS T1 INN",
            "AS T2 ON T1.id = T2.",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "The Olympic competitor John Aalberg is from which region?",
          "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'",
          "tables_involved": [
            "noc_region",
            "person_region",
            "person"
          ],
          "join_conditions": [
            "AS T1 INN",
            "AS T2 ON T1.id = T2.",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "What is the NOC code of the region where the tallest male Olympic competitor is from?",
          "sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1",
          "tables_involved": [
            "noc_region",
            "person_region",
            "person"
          ],
          "join_conditions": [
            "AS T1 INN",
            "AS T2 ON T1.id = T2.",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "Among all the Olympic competitors from Finland, how many of them are female?",
          "sql": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'",
          "tables_involved": [
            "noc_region",
            "person_region",
            "person"
          ],
          "join_conditions": [
            "AS T1 INN",
            "AS T2 ON T1.id = T2.",
            "AS T3 ON T2.p"
          ]
        },
        {
          "question": "In which city was the 1992 Summer Olympic Games held?",
          "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'",
          "tables_involved": [
            "games_city",
            "city",
            "games"
          ],
          "join_conditions": [
            "T1.city_id = T2.id INN",
            "T1.gam"
          ]
        },
        {
          "question": "Please list the names of the Olympic games that were held in London.",
          "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'",
          "tables_involved": [
            "games_city",
            "city",
            "games"
          ],
          "join_conditions": [
            "T1.city_id = T2.id INN",
            "T1.gam"
          ]
        }
      ]
    },
    "address": {
      "unique_tables": [
        "congress",
        "state",
        "zip_congress",
        "avoid",
        "area_code",
        "ZIP_Data",
        "zip_data",
        "alias",
        "CBSA",
        "country"
      ],
      "table_frequency": {
        "zip_data": 133,
        "country": 45,
        "avoid": 18,
        "area_code": 25,
        "ZIP_Data": 1,
        "alias": 15,
        "state": 26,
        "CBSA": 17,
        "congress": 26,
        "zip_congress": 23
      },
      "table_pairs": {
        "('country', 'zip_data')": 34,
        "('avoid', 'zip_data')": 16,
        "('zip_data', 'zip_data')": 9,
        "('ZIP_Data', 'area_code')": 1,
        "('alias', 'zip_data')": 15,
        "('country', 'state')": 13,
        "('state', 'zip_data')": 18,
        "('area_code', 'zip_data')": 25,
        "('CBSA', 'zip_data')": 19,
        "('congress', 'zip_data')": 13,
        "('congress', 'state')": 3,
        "('avoid', 'zip_congress')": 1,
        "('congress', 'zip_congress')": 21,
        "('avoid', 'congress')": 1,
        "('country', 'zip_congress')": 2,
        "('congress', 'country')": 2,
        "('zip_congress', 'zip_data')": 11,
        "('alias', 'avoid')": 1,
        "('avoid', 'country')": 1,
        "('area_code', 'country')": 4,
        "('area_code', 'state')": 1
      },
      "join_examples": [
        {
          "question": "What is the total number of households in Arecibo county?",
          "sql": "SELECT SUM(T1.households) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Which residential area in Arecibo county has the highest average house value? Please give its zip_code.",
          "sql": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.avg_house_value DESC LIMIT 1",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Please list the numbers of males in all the residential areas in Arecibo county.",
          "sql": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Among all the residential areas in Delaware, how many of them implement daylight saving?",
          "sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Among all the residential areas in Arecibo county, what is the zip_code of the one with the highest white population?",
          "sql": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.white_population DESC LIMIT 1",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod",
            "D"
          ]
        },
        {
          "question": "In which county is the residential area with the highest average income per household located?",
          "sql": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Please list the names of all the counties with at least one residential area that implements daylight saving.",
          "sql": "SELECT DISTINCT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.daylight_savings = 'Yes'",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Please list the zip_codes of all the residential areas in Huntingdon county with over 30 employees.",
          "sql": "SELECT DISTINCT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'HUNTINGDON' AND T1.employees > 30",
          "tables_involved": [
            "zip_data",
            "country"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Please list the Asian populations of all the residential areas with the bad alias \"URB San Joaquin\".",
          "sql": "SELECT SUM(T1.asian_population) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'URB San Joaquin'",
          "tables_involved": [
            "zip_data",
            "avoid"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        },
        {
          "question": "Among the residential areas with the bad alias \"Internal Revenue Service\", how many of them are in the Eastern time zone?",
          "sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Internal Revenue Service' AND T1.time_zone = 'Eastern'",
          "tables_involved": [
            "zip_data",
            "avoid"
          ],
          "join_conditions": [
            "T1.zip_cod"
          ]
        }
      ]
    },
    "beer_factory": {
      "unique_tables": [
        "(",
        "customers",
        "rootbeerbrand",
        "rootbeerreview",
        "location",
        "`transaction`",
        "geolocation",
        "rootbeer"
      ],
      "table_frequency": {
        "rootbeerbrand": 71,
        "customers": 51,
        "`transaction`": 57,
        "rootbeer": 46,
        "rootbeerreview": 38,
        "location": 17,
        "geolocation": 10,
        "(": 2
      },
      "table_pairs": {
        "('`transaction`', 'customers')": 28,
        "('customers', 'rootbeer')": 8,
        "('customers', 'rootbeerbrand')": 11,
        "('`transaction`', 'rootbeer')": 25,
        "('`transaction`', 'rootbeerbrand')": 22,
        "('rootbeer', 'rootbeerbrand')": 43,
        "('customers', 'rootbeerreview')": 17,
        "('geolocation', 'location')": 6,
        "('`transaction`', 'location')": 9,
        "('rootbeerbrand', 'rootbeerreview')": 23,
        "('location', 'rootbeer')": 4,
        "('location', 'rootbeerbrand')": 2,
        "('(', 'rootbeerbrand')": 4,
        "('(', 'rootbeer')": 4,
        "('(', '(')": 1,
        "('rootbeerbrand', 'rootbeerbrand')": 2,
        "('rootbeer', 'rootbeer')": 2,
        "('`transaction`', 'geolocation')": 3,
        "('geolocation', 'rootbeer')": 3,
        "('rootbeer', 'rootbeerreview')": 2,
        "('customers', 'location')": 1,
        "('geolocation', 'rootbeerbrand')": 2,
        "('`transaction`', 'rootbeerreview')": 3,
        "('customers', 'geolocation')": 1
      },
      "join_examples": [
        {
          "question": "How many transactions had Frank-Paul Santangelo made in July, 2014?",
          "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
          "tables_involved": [
            "customers",
            "`transaction`"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        },
        {
          "question": "Among the transactions made in July, 2014, how many of them were made by a male customer?",
          "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
          "tables_involved": [
            "customers",
            "`transaction`"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        },
        {
          "question": "Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014?",
          "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
          "tables_involved": [
            "customers",
            "`transaction`"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        },
        {
          "question": "What is the full name of the customer that had made the most transactions in August, 2014?",
          "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m', T2.TransactionDate) = '2014-08' GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1",
          "tables_involved": [
            "customers",
            "`transaction`"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        },
        {
          "question": "Please list the brands of all the root beer that Frank-Paul Santangelo had purchased on 2014/7/7.",
          "sql": "SELECT DISTINCT T4.BrandName FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'",
          "tables_involved": [
            "customers",
            "`transaction`",
            "rootbeer",
            "rootbeerbrand"
          ],
          "join_conditions": [
            "T1.Custom",
            "T2.",
            "T3.B"
          ]
        },
        {
          "question": "Of the 4 root beers that Frank-Paul Santangelo purchased on 2014/7/7, how many of them were in cans?",
          "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07' AND T3.ContainerType = 'Can'",
          "tables_involved": [
            "customers",
            "`transaction`",
            "rootbeer"
          ],
          "join_conditions": [
            "T1.Custom",
            "T2."
          ]
        },
        {
          "question": "How many root beers of the Bulldog were purchased in August, 2014?",
          "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'",
          "tables_involved": [
            "rootbeer",
            "`transaction`",
            "rootbeerbrand"
          ],
          "join_conditions": [
            "T1.",
            "T1.B"
          ]
        },
        {
          "question": "Please list the full names of the customers who have purchased at least one root beer produced by AJ Stephans Beverages.",
          "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.BreweryName = 'AJ Stephans Beverages'",
          "tables_involved": [
            "customers",
            "`transaction`",
            "rootbeer",
            "rootbeerbrand"
          ],
          "join_conditions": [
            "T1.Custom",
            "T2.",
            "T3.B"
          ]
        },
        {
          "question": "Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014?",
          "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.Twitter IS NULL",
          "tables_involved": [
            "rootbeer",
            "`transaction`",
            "rootbeerbrand"
          ],
          "join_conditions": [
            "T1.",
            "T1.B"
          ]
        },
        {
          "question": "What is the number of the credit card that Frank-Paul Santangelo used to purchase root beers on 2014/7/7?",
          "sql": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'",
          "tables_involved": [
            "customers",
            "`transaction`"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        }
      ]
    },
    "sales": {
      "unique_tables": [
        "Sales",
        "(",
        "Employees",
        "Customers",
        "Products"
      ],
      "table_frequency": {
        "Sales": 91,
        "Products": 69,
        "Customers": 36,
        "Employees": 24,
        "(": 1
      },
      "table_pairs": {
        "('Products', 'Sales')": 52,
        "('Customers', 'Sales')": 34,
        "('Customers', 'Products')": 12,
        "('Employees', 'Sales')": 20,
        "('Customers', 'Employees')": 4,
        "('Employees', 'Products')": 7,
        "('Sales', 'Sales')": 3
      },
      "join_examples": [
        {
          "question": "What is the name of the product with the lowest quantity?",
          "sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity LIMIT 1",
          "tables_involved": [
            "Sales",
            "Products"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "How many customer ids have purchased Hex Nut 9?",
          "sql": "SELECT COUNT(T1.CustomerID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 9'",
          "tables_involved": [
            "Sales",
            "Products"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "Calculate the total sales ids that were sales of Flat Washer 8.",
          "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Flat Washer 8'",
          "tables_involved": [
            "Sales",
            "Products"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "List down all of the product names that were placed by sales person with id 10.",
          "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 10",
          "tables_involved": [
            "Products",
            "Sales"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "List down the first name of customers who placed order for product id 1.",
          "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.ProductID = 1",
          "tables_involved": [
            "Customers",
            "Sales",
            "Products"
          ],
          "join_conditions": [
            "T1.Custom",
            "T2.P"
          ]
        },
        {
          "question": "What is the last name of the customer who placed an order for sales id 178?",
          "sql": "SELECT T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesID = 178",
          "tables_involved": [
            "Customers",
            "Sales"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        },
        {
          "question": "List down product ids that were purchased by customers called Abby.",
          "sql": "SELECT DISTINCT T1.ProductID FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abby'",
          "tables_involved": [
            "Sales",
            "Customers"
          ],
          "join_conditions": [
            "T1.Custom"
          ]
        },
        {
          "question": "Write down all of the product ids that were placed by Meander.",
          "sql": "SELECT DISTINCT T2.ProductID FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T1.FirstName = 'Meander'",
          "tables_involved": [
            "Employees",
            "Sales"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "What is the last name of sales person for sales id 100?",
          "sql": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.SalesID = 100",
          "tables_involved": [
            "Employees",
            "Sales"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "What is the first name of employee who handled sales for customer called Abigail?",
          "sql": "SELECT DISTINCT T3.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.FirstName = 'Abigail'",
          "tables_involved": [
            "Customers",
            "Sales",
            "Employees"
          ],
          "join_conditions": [
            "T1.Custom",
            "T2.Sal"
          ]
        }
      ]
    },
    "menu": {
      "unique_tables": [
        "MenuItem",
        "Dish",
        "Menu",
        "MenuPage"
      ],
      "table_frequency": {
        "Dish": 56,
        "Menu": 58,
        "MenuItem": 59,
        "MenuPage": 50
      },
      "table_pairs": {
        "('Dish', 'MenuItem')": 47,
        "('MenuItem', 'MenuPage')": 28,
        "('Dish', 'MenuPage')": 18,
        "('Menu', 'MenuItem')": 18,
        "('Menu', 'MenuPage')": 40,
        "('Dish', 'Menu')": 11
      },
      "join_examples": [
        {
          "question": "What is the name of the dish that appeared on the upper left corner on menu page no. 1389?",
          "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.menu_page_id = 1389 AND T2.xpos < 0.25 AND T2.ypos < 0.25",
          "tables_involved": [
            "Dish",
            "MenuItem"
          ],
          "join_conditions": [
            "T1.id = T2.dis"
          ]
        },
        {
          "question": "Please list the prices of the dish \"Clear green turtle\" on every menu page it appeared on.",
          "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'",
          "tables_involved": [
            "Dish",
            "MenuItem"
          ],
          "join_conditions": [
            "T1.id = T2.dis"
          ]
        },
        {
          "question": "Among all the menu pages with the appearance of the dish \"Clear green turtle\", how many of them have the dish at a stable price?",
          "sql": "SELECT SUM(CASE WHEN T1.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL",
          "tables_involved": [
            "Dish",
            "MenuItem"
          ],
          "join_conditions": [
            "T1.id = T2.dis"
          ]
        },
        {
          "question": "What is the highest price of the dish \"Clear green turtle\" on a menu page?",
          "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle' ORDER BY T2.price DESC LIMIT 1",
          "tables_involved": [
            "Dish",
            "MenuItem"
          ],
          "join_conditions": [
            "T1.id = T2.dis"
          ]
        },
        {
          "question": "Please list the IDs of all the menus in which the dish \"Clear green turtle\" had appeared.",
          "sql": "SELECT T1.menu_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'",
          "tables_involved": [
            "MenuPage",
            "MenuItem",
            "Dish"
          ],
          "join_conditions": [
            "T1.id = T2.m",
            "T2.dis"
          ]
        },
        {
          "question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them used the dollar as their currency?",
          "sql": "SELECT SUM(CASE WHEN T3.currency = 'Dollars' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle'",
          "tables_involved": [
            "MenuItem",
            "MenuPage",
            "Menu",
            "Dish"
          ],
          "join_conditions": [
            "T1.m",
            "T2.m",
            "T1.dis"
          ]
        },
        {
          "question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them did not support taking out or booking in advance?",
          "sql": "SELECT SUM(CASE WHEN T4.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.call_number IS NULL",
          "tables_involved": [
            "MenuItem",
            "MenuPage",
            "Menu",
            "Dish"
          ],
          "join_conditions": [
            "T1.m",
            "T2.m",
            "T1.dis"
          ]
        },
        {
          "question": "Please list the names of all the dishes that appeared on the menu \"Zentral Theater Terrace\".",
          "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace'",
          "tables_involved": [
            "MenuItem",
            "MenuPage",
            "Menu",
            "Dish"
          ],
          "join_conditions": [
            "T1.m",
            "T2.m",
            "T1.dis"
          ]
        },
        {
          "question": "Which dish has the highest price on the menu \"Zentral Theater Terrace\"? Please give its name.",
          "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace' ORDER BY T1.price DESC LIMIT 1",
          "tables_involved": [
            "MenuItem",
            "MenuPage",
            "Menu",
            "Dish"
          ],
          "join_conditions": [
            "T1.m",
            "T2.m",
            "T1.dis"
          ]
        },
        {
          "question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?",
          "sql": "SELECT SUM(CASE WHEN T3.name = 'Zentral Theater Terrace' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id",
          "tables_involved": [
            "MenuItem",
            "MenuPage",
            "Menu"
          ],
          "join_conditions": [
            "T1.m",
            "T2.m"
          ]
        }
      ]
    },
    "shipping": {
      "unique_tables": [
        "city",
        "(",
        "shipment",
        "truck",
        "driver",
        "customer"
      ],
      "table_frequency": {
        "customer": 37,
        "shipment": 100,
        "driver": 37,
        "(": 2,
        "city": 34,
        "truck": 19
      },
      "table_pairs": {
        "('customer', 'shipment')": 33,
        "('customer', 'driver')": 4,
        "('driver', 'shipment')": 38,
        "('(', 'customer')": 1,
        "('(', 'shipment')": 2,
        "('city', 'shipment')": 31,
        "('city', 'customer')": 6,
        "('shipment', 'truck')": 18,
        "('driver', 'truck')": 3,
        "('city', 'driver')": 7,
        "('(', 'city')": 1,
        "('customer', 'truck')": 1,
        "('shipment', 'shipment')": 1
      },
      "join_examples": [
        {
          "question": "How many shipments were ordered by S K L Enterprises Inc in 2017?",
          "sql": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND STRFTIME('%Y', T2.ship_date) = '2017'",
          "tables_involved": [
            "customer",
            "shipment"
          ],
          "join_conditions": [
            "T1.cust_id = T2.cust_id "
          ]
        },
        {
          "question": "What is the total number of pounds being transported for S K L Enterprises Inc?",
          "sql": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'",
          "tables_involved": [
            "customer",
            "shipment"
          ],
          "join_conditions": [
            "T1.cust_id = T2.cust_id "
          ]
        },
        {
          "question": "Among the shipments done by Sue Newell, how many of them are for S K L Enterprises Inc?",
          "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND T3.first_name = 'Sue' AND T3.last_name = 'Newell'",
          "tables_involved": [
            "customer",
            "shipment",
            "driver"
          ],
          "join_conditions": [
            "T1.cust_id = T2.cust_id INN",
            "T3.d"
          ]
        },
        {
          "question": "How many shipments were ordered by a customer in Florida?",
          "sql": "SELECT COUNT(T1.cust_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.state = 'FL'",
          "tables_involved": [
            "customer",
            "shipment"
          ],
          "join_conditions": [
            "T1.cust_id = T2.cust_id "
          ]
        },
        {
          "question": "Please list the IDs of all the shipments made by a retailer customer.",
          "sql": "SELECT T2.ship_id FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'retailer'",
          "tables_involved": [
            "customer",
            "shipment"
          ],
          "join_conditions": [
            "T1.cust_id = T2.cust_id "
          ]
        },
        {
          "question": "Among the customers having at least one shipment in 2017, how many of them have an annual revenue of over 30000000?",
          "sql": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3",
          "tables_involved": [
            "(",
            "customer",
            "shipment"
          ],
          "join_conditions": [
            "T1.cust_id = T2.cust_id "
          ]
        },
        {
          "question": "How many shipments in 2017 were done by Sue Newell?",
          "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'",
          "tables_involved": [
            "shipment",
            "driver"
          ],
          "join_conditions": [
            "T1.d"
          ]
        },
        {
          "question": "What is the full name of the driver that has done the most shipments in 2017?",
          "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1",
          "tables_involved": [
            "shipment",
            "driver"
          ],
          "join_conditions": [
            "T1.d"
          ]
        },
        {
          "question": "Among the shipments in 2017, how many of them have the destination in New Jersey?",
          "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.state = 'New Jersey'",
          "tables_involved": [
            "shipment",
            "city"
          ],
          "join_conditions": [
            "T1.city_id = T2.city_id "
          ]
        },
        {
          "question": "What is the maximum weight being transported to New York during a single shipment?",
          "sql": "SELECT MAX(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'New York'",
          "tables_involved": [
            "shipment",
            "city"
          ],
          "join_conditions": [
            "T1.city_id = T2.city_id "
          ]
        }
      ]
    },
    "language_corpus": {
      "unique_tables": [
        "words",
        "langs_words",
        "langs",
        "pages_words",
        "pages",
        "biwords"
      ],
      "table_frequency": {
        "pages": 71,
        "words": 88,
        "pages_words": 37,
        "biwords": 41,
        "langs": 15,
        "langs_words": 14
      },
      "table_pairs": {
        "('pages_words', 'words')": 21,
        "('pages_words', 'pages_words')": 1,
        "('biwords', 'words')": 29,
        "('words', 'words')": 16,
        "('pages', 'pages_words')": 25,
        "('pages', 'words')": 13,
        "('biwords', 'pages')": 1,
        "('biwords', 'pages_words')": 2,
        "('biwords', 'langs')": 2,
        "('langs_words', 'words')": 6,
        "('langs_words', 'langs_words')": 1,
        "('langs', 'langs_words')": 3,
        "('langs', 'pages')": 4,
        "('langs', 'words')": 2
      },
      "join_examples": [
        {
          "question": "List the page id of wikipedia about Catalan language which have the appearance of the word 'decimal'?",
          "sql": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'decimal'",
          "tables_involved": [
            "words",
            "pages_words"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Which word has the most occurrences within the same page of wikipedia about Catalan language?",
          "sql": "SELECT T1.word FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = ( SELECT MAX(occurrences) FROM pages_words )",
          "tables_involved": [
            "words",
            "pages_words",
            "pages_words"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "List all the first words of the biwords pair where the second word is 'antic'.",
          "sql": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w2nd = ( SELECT wid FROM words WHERE word = 'antic' )",
          "tables_involved": [
            "words",
            "biwords",
            "words"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Show all the title of pages and number of occurences for each page where the word 'quipu' appears.",
          "sql": "SELECT T1.title, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'quipu'",
          "tables_involved": [
            "pages",
            "pages_words",
            "words"
          ],
          "join_conditions": [
            "T1.pid = T2.pid INN",
            "T2."
          ]
        },
        {
          "question": "Calculate the average number of the word occurrences in which \u2018system\u2019 appeared as the first word in the pair.",
          "sql": "SELECT AVG(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' )",
          "tables_involved": [
            "words",
            "biwords",
            "words"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "In Abadia, what is the word id of the of the Catalan language that appeared the highest amount of times? Indicate the how many times did they said word id appeared.",
          "sql": "SELECT T2.wid, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Abadia' ORDER BY T2.occurrences DESC LIMIT 1",
          "tables_involved": [
            "pages",
            "pages_words"
          ],
          "join_conditions": [
            "T1.pid = T2.pid "
          ]
        },
        {
          "question": "What are the titles of the top 5 Catalan language Wikipedia page with the least number of different words? Indicate each title's word id that has appeared the most in the said pages.",
          "sql": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid ORDER BY T1.words LIMIT 5",
          "tables_involved": [
            "pages",
            "pages_words"
          ],
          "join_conditions": [
            "T1.pid = T2.pid O"
          ]
        },
        {
          "question": "What are the word pairs that occured only twice?",
          "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 2",
          "tables_involved": [
            "words",
            "biwords",
            "words"
          ],
          "join_conditions": [
            "T1.",
            "T3."
          ]
        },
        {
          "question": "What is the word pair that occured the highest amount of times in Addicio? Indicate how many times such word pair occured.",
          "sql": "SELECT T3.w1st, T3.w2nd, T3.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN biwords AS T3 ON T2.wid = T3.w1st OR T2.wid = T3.w2nd WHERE T1.title = 'Addicio' ORDER BY T3.occurrences DESC LIMIT 1",
          "tables_involved": [
            "pages",
            "pages_words",
            "biwords"
          ],
          "join_conditions": [
            "T1.pid = T2.pid INN",
            "T2."
          ]
        },
        {
          "question": "What is the title of corpus where word \"desena\" appear?",
          "sql": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'desena'",
          "tables_involved": [
            "pages",
            "pages_words",
            "words"
          ],
          "join_conditions": [
            "T1.pid = T2.pid INN",
            "T2."
          ]
        }
      ]
    },
    "airline": {
      "unique_tables": [
        "(",
        "Airports",
        "`Air",
        "Airlines"
      ],
      "table_frequency": {
        "Airlines": 88,
        "Airports": 39,
        "`Air": 50,
        "(": 1
      },
      "table_pairs": {
        "('Airlines', 'Airports')": 40,
        "('Airports', '`Air')": 11,
        "('Airlines', '`Air')": 49,
        "('Airlines', 'Airlines')": 8,
        "('Airports', 'Airports')": 2,
        "('(', 'Airlines')": 1,
        "('(', '`Air')": 1
      },
      "join_examples": [
        {
          "question": "Please list the departure airports of the flights on 2018/8/1 that were delayed.",
          "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T2.DEP_DELAY > 0 GROUP BY T1.Description",
          "tables_involved": [
            "Airports",
            "Airlines"
          ],
          "join_conditions": [
            "F",
            "T1.Cod"
          ]
        },
        {
          "question": "Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York?",
          "sql": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International'",
          "tables_involved": [
            "Airports",
            "Airlines"
          ],
          "join_conditions": [
            "T1.Cod",
            "= 'N"
          ]
        },
        {
          "question": "For the flight on 2018/8/1 that was delayed for the longest time, which was the destination airport of this flight?",
          "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/1' ORDER BY T2.DEP_DELAY DESC LIMIT 1",
          "tables_involved": [
            "Airports",
            "Airlines"
          ],
          "join_conditions": [
            "F",
            "T1.Cod"
          ]
        },
        {
          "question": "Among the flights departing from John F. Kennedy International, how many of them arrived earlier than scheduled?",
          "sql": "SELECT SUM(CASE WHEN T2.ARR_DELAY < 0 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'New York, NY: John F. Kennedy International'",
          "tables_involved": [
            "Airports",
            "Airlines"
          ],
          "join_conditions": [
            "T1.Cod",
            "= 'N"
          ]
        },
        {
          "question": "Among all the flights scheduled to depart from John F. Kennedy International on 2018/8/1, when was the earliest one scheduled to depart?",
          "sql": "SELECT T2.DEP_TIME FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.DEP_TIME IS NOT NULL ORDER BY T2.DEP_TIME ASC LIMIT 1",
          "tables_involved": [
            "Airports",
            "Airlines"
          ],
          "join_conditions": [
            "T1.Cod",
            "= 'N"
          ]
        },
        {
          "question": "How many flights on 2018/8/1 were operated by American Airlines Inc.?",
          "sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'",
          "tables_involved": [
            "Airports",
            "Airlines",
            "`Air"
          ],
          "join_conditions": [
            "T1.Cod",
            "T2.OP_CA",
            "= 'Am"
          ]
        },
        {
          "question": "Please list the flight numbers of all the flights operated by American Airlines Inc. that were scheduled to depart from John F. Kennedy International.",
          "sql": "SELECT T2.OP_CARRIER_FL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.FL_DATE = '2018/8/1'",
          "tables_involved": [
            "Airports",
            "Airlines",
            "`Air"
          ],
          "join_conditions": [
            "T1.Cod",
            "T2.OP_CA",
            "= 'Am",
            "= 'N"
          ]
        },
        {
          "question": "How many flights operated by American Airlines Inc. on 2018/8/1 were faster than scheduled?",
          "sql": "SELECT SUM(CASE WHEN T2.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'",
          "tables_involved": [
            "Airports",
            "Airlines",
            "`Air"
          ],
          "join_conditions": [
            "T1.Cod",
            "T2.OP_CA",
            "= 'Am"
          ]
        },
        {
          "question": "What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure?",
          "sql": "SELECT T1.OP_CARRIER_FL_NUM FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN `Air Carriers` AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' ORDER BY T1.DEP_TIME DESC LIMIT 1",
          "tables_involved": [
            "Airlines",
            "Airports",
            "`Air"
          ],
          "join_conditions": [
            "T2.Cod",
            "T1.OP_CA",
            "= 'Am"
          ]
        },
        {
          "question": "Among the flights operated by American Airlines Inc., how many of them were scheduled to land in New York?",
          "sql": "SELECT SUM(CASE WHEN T2.DEST = 'JFK' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN `Air Carriers` AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'",
          "tables_involved": [
            "Airports",
            "Airlines",
            "`Air"
          ],
          "join_conditions": [
            "T1.Cod",
            "T2.OP_CA",
            "= 'Am"
          ]
        }
      ]
    },
    "books": {
      "unique_tables": [
        "order_history",
        "book_language",
        "cust_order",
        "address",
        "order_status",
        "order_line",
        "country",
        "author",
        "book_author",
        "shipping_method",
        "book",
        "publisher",
        "address_status",
        "customer_address",
        "customer"
      ],
      "table_frequency": {
        "book": 120,
        "publisher": 42,
        "book_language": 18,
        "order_line": 45,
        "cust_order": 42,
        "customer": 42,
        "address": 23,
        "book_author": 37,
        "author": 39,
        "customer_address": 11,
        "country": 12,
        "shipping_method": 13,
        "order_status": 9,
        "order_history": 10,
        "address_status": 4
      },
      "table_pairs": {
        "('book', 'publisher')": 41,
        "('book', 'book_language')": 18,
        "('book', 'order_line')": 33,
        "('book', 'cust_order')": 10,
        "('book', 'customer')": 10,
        "('cust_order', 'order_line')": 20,
        "('customer', 'order_line')": 18,
        "('cust_order', 'customer')": 29,
        "('book', 'book_author')": 34,
        "('author', 'book')": 34,
        "('author', 'book_author')": 37,
        "('customer', 'customer_address')": 7,
        "('address', 'customer')": 6,
        "('country', 'customer')": 3,
        "('address', 'customer_address')": 8,
        "('country', 'customer_address')": 4,
        "('address', 'country')": 12,
        "('cust_order', 'shipping_method')": 11,
        "('country', 'cust_order')": 1,
        "('address', 'cust_order')": 3,
        "('customer', 'shipping_method')": 6,
        "('order_history', 'order_status')": 9,
        "('cust_order', 'order_status')": 2,
        "('customer', 'order_status')": 1,
        "('cust_order', 'order_history')": 3,
        "('customer', 'order_history')": 1,
        "('book_author', 'publisher')": 8,
        "('author', 'publisher')": 8,
        "('order_line', 'publisher')": 1,
        "('book', 'book')": 2,
        "('address_status', 'customer_address')": 4,
        "('order_line', 'shipping_method')": 1,
        "('book_language', 'publisher')": 3,
        "('book_author', 'order_line')": 2,
        "('author', 'order_line')": 2,
        "('address', 'address_status')": 2,
        "('address_status', 'customer')": 1,
        "('book_language', 'order_line')": 2,
        "('order_line', 'order_line')": 1
      },
      "join_examples": [
        {
          "question": "What is the name of the publisher of the book \"The Illuminati\"?",
          "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'",
          "tables_involved": [
            "book",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "How many books were published by publisher \"Thomas Nelson\"?",
          "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'",
          "tables_involved": [
            "book",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "What is the name of the publisher that has published the most number of books?",
          "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T1.book_id) DESC LIMIT 1",
          "tables_involved": [
            "book",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "Please give the title of the oldest book published by publisher \"Thomas Nelson\".",
          "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' ORDER BY T1.publication_date ASC LIMIT 1",
          "tables_involved": [
            "book",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "Among the books published by publisher \"Thomas Nelson\", how many of them have over 300 pages?",
          "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' AND T1.num_pages > 300",
          "tables_involved": [
            "book",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "What is the name of the publisher of the book with the most pages?",
          "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1",
          "tables_involved": [
            "book",
            "publisher"
          ],
          "join_conditions": [
            "T1.publis"
          ]
        },
        {
          "question": "How many books are in English?",
          "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'English'",
          "tables_involved": [
            "book",
            "book_language"
          ],
          "join_conditions": [
            "T1.languag"
          ]
        },
        {
          "question": "Please list the titles of all the books in British English.",
          "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'",
          "tables_involved": [
            "book",
            "book_language"
          ],
          "join_conditions": [
            "T1.languag"
          ]
        },
        {
          "question": "What is the cheapest order price of the book \"The Little House\"?",
          "sql": "SELECT MIN(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Little House'",
          "tables_involved": [
            "book",
            "order_line"
          ],
          "join_conditions": [
            "T1.book_id = T2.book_id "
          ]
        },
        {
          "question": "Please list the titles of all the books that Lucas Wyldbore has ordered.",
          "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'",
          "tables_involved": [
            "book",
            "order_line",
            "cust_order",
            "customer"
          ],
          "join_conditions": [
            "T1.book_id = T2.book_id INN",
            "T3.o",
            "T4.custom"
          ]
        }
      ]
    },
    "food_inspection_2": {
      "unique_tables": [
        "employee",
        "inspection",
        "(",
        "establishment",
        "inspection_point",
        "violation"
      ],
      "table_frequency": {
        "employee": 65,
        "inspection": 108,
        "establishment": 71,
        "inspection_point": 18,
        "violation": 33,
        "(": 8
      },
      "table_pairs": {
        "('employee', 'inspection')": 53,
        "('employee', 'establishment')": 12,
        "('establishment', 'inspection')": 66,
        "('inspection_point', 'violation')": 17,
        "('establishment', 'violation')": 13,
        "('inspection', 'violation')": 18,
        "('(', 'inspection')": 9,
        "('(', 'employee')": 5,
        "('(', 'establishment')": 3,
        "('inspection', 'inspection')": 1,
        "('(', 'violation')": 2,
        "('employee', 'violation')": 4,
        "('employee', 'inspection_point')": 2,
        "('inspection', 'inspection_point')": 4,
        "('employee', 'employee')": 2,
        "('establishment', 'inspection_point')": 2
      },
      "join_examples": [
        {
          "question": "Please list the full names of the sanitarians who did at least one inspection in May, 2010.",
          "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'",
          "tables_involved": [
            "employee",
            "inspection"
          ],
          "join_conditions": [
            "AS T2 ON T1."
          ]
        },
        {
          "question": "How many inspections were sanitarian Joshua Rosa responsible for in 2010?",
          "sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
          "tables_involved": [
            "employee",
            "inspection"
          ],
          "join_conditions": [
            "AS T2 ON T1."
          ]
        },
        {
          "question": "Please list the assumed name of all the facilities inspected by Joshua Rosa.",
          "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
          "tables_involved": [
            "employee",
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "T2.lic"
          ]
        },
        {
          "question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are restaurants or cafeterias?",
          "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.facility_type = 'Restaurant'",
          "tables_involved": [
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.lic"
          ]
        },
        {
          "question": "Please list the location coordinates of all the facilities that had an inspection on 2010/5/11.",
          "sql": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'",
          "tables_involved": [
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.lic"
          ]
        },
        {
          "question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are in ward no.42?",
          "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.ward = 42",
          "tables_involved": [
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.lic"
          ]
        },
        {
          "question": "Please list the full names of all the sanitarians who have inspected the facility Burbank.",
          "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T3.dba_name = 'Burbank' AND T1.title = 'Sanitarian'",
          "tables_involved": [
            "employee",
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "T2.lic"
          ]
        },
        {
          "question": "Please list the assumed name of all the facilities that failed an inspection in 2010.",
          "sql": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.results = 'Fail' AND strftime('%Y', T1.inspection_date) = '2010'",
          "tables_involved": [
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.lic"
          ]
        },
        {
          "question": "What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11?",
          "sql": "SELECT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T2.inspection_date = '2010-05-11' AND T3.dba_name = 'AMUNDSEN HIGH SCHOOL' AND T1.title = 'Sanitarian'",
          "tables_involved": [
            "employee",
            "inspection",
            "establishment"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "T2.lic"
          ]
        },
        {
          "question": "Among the inspections done by sanitarian Joshua Rosa, how many of them have the result of \"pass\"?",
          "sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'",
          "tables_involved": [
            "employee",
            "inspection"
          ],
          "join_conditions": [
            "AS T2 ON T1."
          ]
        }
      ]
    },
    "coinmarketcap": {
      "unique_tables": [
        "coins",
        "historical"
      ],
      "table_frequency": {
        "coins": 50,
        "historical": 50
      },
      "table_pairs": {
        "('coins', 'historical')": 52,
        "('historical', 'historical')": 8,
        "('coins', 'coins')": 1
      },
      "join_examples": [
        {
          "question": "Name the coin that has the highest market capitalization for all transactions in 2018.",
          "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date LIKE '2018%' AND T2.market_cap = ( SELECT MAX(market_cap) FROM historical WHERE STRFTIME('%Y', date) = '2018' )",
          "tables_involved": [
            "coins",
            "historical",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11.",
          "sql": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "List the price for Zetacoin on 13/11/1 and the next 7 consecutive days. What is the average price for these 7 days?",
          "sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT AVG(T2.PRICE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07'",
          "tables_involved": [
            "coins",
            "historical",
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id ",
            "ALL S",
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.",
          "sql": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "State the transaction date whereby DigixDAO was transacted at the hightest price.",
          "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'DigixDAO' ORDER BY T2.price DESC LIMIT 1",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price.",
          "sql": "SELECT T1.name, T2.DATE, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_24h = ( SELECT MAX(percent_change_24h) FROM historical )",
          "tables_involved": [
            "coins",
            "historical",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "What is the average monthly circulating supply for Frozen in 2014.",
          "sql": "SELECT CAST(SUM(T2.circulating_supply) AS REAL) / 12 FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Frozen' AND STRFTIME('%Y', T2.date) = '2014'",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "List all the inactive coins and state the last date of its transaction?",
          "sql": "SELECT T1.NAME, MAX(T2.DATE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T1.status = 'inactive' ORDER BY T2.DATE DESC LIMIT 1",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.ID = T2.coin_id "
          ]
        },
        {
          "question": "What was the price of 1 Bitcoin in 2016?",
          "sql": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND STRFTIME('%Y', T2.date) = '2016'",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        },
        {
          "question": "State the transaction date and the price when Bitcoin was bottomed?",
          "sql": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1",
          "tables_involved": [
            "coins",
            "historical"
          ],
          "join_conditions": [
            "T1.id = T2.coin_id "
          ]
        }
      ]
    },
    "retail_world": {
      "unique_tables": [
        "Categories",
        "EmployeeTerritories",
        "(",
        "Invoices",
        "Employees",
        "Shippers",
        "`Sales",
        "Suppliers",
        "Orders",
        "Customers",
        "Territories",
        "Region",
        "`Order",
        "`Customer",
        "Products"
      ],
      "table_frequency": {
        "Employees": 128,
        "EmployeeTerritories": 37,
        "Territories": 47,
        "(": 4,
        "Region": 28,
        "Products": 157,
        "`Order": 72,
        "Suppliers": 79,
        "Orders": 112,
        "Shippers": 29,
        "Categories": 31,
        "Customers": 51,
        "`Customer": 2,
        "Invoices": 1,
        "`Sales": 2
      },
      "table_pairs": {
        "('EmployeeTerritories', 'Employees')": 36,
        "('Employees', 'Territories')": 26,
        "('EmployeeTerritories', 'Territories')": 25,
        "('Employees', 'Employees')": 4,
        "('(', 'Employees')": 3,
        "('(', 'EmployeeTerritories')": 4,
        "('Region', 'Territories')": 34,
        "('(', 'Region')": 1,
        "('(', 'Territories')": 1,
        "('EmployeeTerritories', 'Region')": 9,
        "('Employees', 'Region')": 8,
        "('Territories', 'Territories')": 3,
        "('Region', 'Region')": 3,
        "('Products', '`Order')": 46,
        "('Products', 'Suppliers')": 78,
        "('Products', 'Products')": 13,
        "('Employees', 'Orders')": 35,
        "('Orders', '`Order')": 37,
        "('Orders', 'Orders')": 2,
        "('Orders', 'Shippers')": 27,
        "('Categories', 'Products')": 34,
        "('Customers', 'Orders')": 33,
        "('Orders', 'Products')": 16,
        "('Customers', 'Shippers')": 1,
        "('Shippers', '`Order')": 3,
        "('Customers', '`Order')": 13,
        "('Customers', 'Products')": 4,
        "('Categories', '`Order')": 6,
        "('Employees', '`Order')": 7,
        "('Customers', 'Employees')": 3,
        "('Categories', 'Orders')": 2,
        "('Employees', 'Products')": 3,
        "('Employees', 'Suppliers')": 1,
        "('Orders', 'Suppliers')": 2,
        "('Suppliers', '`Order')": 5,
        "('Categories', 'Suppliers')": 5,
        "('Suppliers', 'Suppliers')": 1
      },
      "join_examples": [
        {
          "question": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.",
          "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'",
          "tables_involved": [
            "Employees",
            "EmployeeTerritories",
            "Territories"
          ],
          "join_conditions": [
            "T1.",
            "T2.T",
            "= '"
          ]
        },
        {
          "question": "The sales of how many territories is Nancy Davolio in charge of?",
          "sql": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'",
          "tables_involved": [
            "Employees",
            "EmployeeTerritories"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Please list the names of all the territories whose sales are taken in charge by Nancy Davolio.",
          "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'",
          "tables_involved": [
            "Employees",
            "EmployeeTerritories",
            "Territories"
          ],
          "join_conditions": [
            "F",
            "T1.",
            "T2.T"
          ]
        },
        {
          "question": "The sales of how many territories in total do the employees in London take charge of?",
          "sql": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London'",
          "tables_involved": [
            "Employees",
            "EmployeeTerritories"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Please list the territories whose sales are taken in charge by the employees who report to Andrew Fuller.",
          "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )",
          "tables_involved": [
            "Employees",
            "EmployeeTerritories",
            "Territories",
            "Employees"
          ],
          "join_conditions": [
            "F",
            "T1.",
            "T2.T"
          ]
        },
        {
          "question": "How many employees in the UK takes charge of the sales in over 4 territories?",
          "sql": "SELECT COUNT(COUNTEID) FROM ( SELECT T1.EmployeeID AS COUNTEID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Country = 'UK' GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4 ) T1",
          "tables_involved": [
            "(",
            "Employees",
            "EmployeeTerritories"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How many territories are there in the Eastern Region?",
          "sql": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'",
          "tables_involved": [
            "Territories",
            "Region"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "= '"
          ]
        },
        {
          "question": "Please list all the territories in the Eastern Region.",
          "sql": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'",
          "tables_involved": [
            "Territories",
            "Region"
          ],
          "join_conditions": [
            "F",
            "AS T2 ON T1.",
            "= '"
          ]
        },
        {
          "question": "How many employees in total are in charge of the sales in the Eastern Region?",
          "sql": "SELECT COUNT(T.EmployeeID) FROM ( SELECT T3.EmployeeID FROM Region AS T1 INNER JOIN Territories AS T2 ON T1.RegionID = T2.RegionID INNER JOIN EmployeeTerritories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.RegionDescription = 'Eastern' GROUP BY T3.EmployeeID ) T",
          "tables_involved": [
            "(",
            "Region",
            "Territories",
            "EmployeeTerritories"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.",
            "T2.T",
            "= '"
          ]
        },
        {
          "question": "Please list the home phone numbers of the employees who are in charge of the sales in the territories in the Eastern Region.",
          "sql": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern ' GROUP BY T1.HomePhone",
          "tables_involved": [
            "Employees",
            "EmployeeTerritories",
            "Territories",
            "Region"
          ],
          "join_conditions": [
            "T1.",
            "T2.T",
            "AS T4 ON T3.",
            "= '"
          ]
        }
      ]
    },
    "retails": {
      "unique_tables": [
        "partsupp",
        "(",
        "orders",
        "supplier",
        "part",
        "region",
        "nation",
        "lineitem",
        "customer"
      ],
      "table_frequency": {
        "lineitem": 76,
        "orders": 68,
        "customer": 86,
        "nation": 76,
        "supplier": 49,
        "region": 24,
        "partsupp": 44,
        "(": 15,
        "part": 62
      },
      "table_pairs": {
        "('customer', 'orders')": 33,
        "('customer', 'nation')": 43,
        "('nation', 'orders')": 7,
        "('nation', 'supplier')": 26,
        "('nation', 'region')": 24,
        "('region', 'supplier')": 8,
        "('customer', 'region')": 6,
        "('lineitem', 'orders')": 26,
        "('lineitem', 'partsupp')": 13,
        "('(', 'supplier')": 4,
        "('(', 'nation')": 7,
        "('(', 'customer')": 7,
        "('part', 'partsupp')": 37,
        "('lineitem', 'part')": 22,
        "('(', 'orders')": 2,
        "('customer', 'lineitem')": 4,
        "('part', 'supplier')": 15,
        "('partsupp', 'supplier')": 17,
        "('customer', 'customer')": 3,
        "('(', 'partsupp')": 3,
        "('(', 'lineitem')": 3,
        "('(', 'part')": 4,
        "('nation', 'nation')": 1,
        "('supplier', 'supplier')": 1,
        "('(', 'region')": 2,
        "('lineitem', 'supplier')": 4,
        "('nation', 'part')": 1,
        "('nation', 'partsupp')": 1,
        "('orders', 'part')": 2
      },
      "join_examples": [
        {
          "question": "How many orders in total have the customers in the household segment made?",
          "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'",
          "tables_involved": [
            "orders",
            "customer"
          ],
          "join_conditions": [
            "T1.o_custk"
          ]
        },
        {
          "question": "Among all the orders made by a customer in the household segment, what is the highest total price?",
          "sql": "SELECT MAX(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'",
          "tables_involved": [
            "orders",
            "customer"
          ],
          "join_conditions": [
            "T1.o_custk"
          ]
        },
        {
          "question": "Please list the order comments of all the orders made by customers in the household segment.",
          "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'",
          "tables_involved": [
            "orders",
            "customer"
          ],
          "join_conditions": [
            "T1.o_custk"
          ]
        },
        {
          "question": "Please give the name of the customer who has made the single order with the highest total price.",
          "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1",
          "tables_involved": [
            "orders",
            "customer"
          ],
          "join_conditions": [
            "T1.o_custk"
          ]
        },
        {
          "question": "Please list the order keys of all the orders made by a customer whose account is in debt.",
          "sql": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0",
          "tables_involved": [
            "orders",
            "customer"
          ],
          "join_conditions": [
            "T1.o_custk"
          ]
        },
        {
          "question": "Among the orders made by customers in the household segment, how many of them are urgent?",
          "sql": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'",
          "tables_involved": [
            "orders",
            "customer"
          ],
          "join_conditions": [
            "T1.o_custk"
          ]
        },
        {
          "question": "How many customers are in Brazil?",
          "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'",
          "tables_involved": [
            "customer",
            "nation"
          ],
          "join_conditions": [
            "AS T2 ON T1.c_nationk"
          ]
        },
        {
          "question": "Please list the phone numbers of all the customers in the household segment and are in Brazil.",
          "sql": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'",
          "tables_involved": [
            "customer",
            "nation"
          ],
          "join_conditions": [
            "AS T2 ON T1.c_nationk"
          ]
        },
        {
          "question": "Among all the customers in Germany, how many of them have an account balance of over 1000?",
          "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.c_acctbal > 1000",
          "tables_involved": [
            "customer",
            "nation"
          ],
          "join_conditions": [
            "AS T2 ON T1.c_nationk"
          ]
        },
        {
          "question": "How many orders in total are made by customers in Germany?",
          "sql": "SELECT COUNT(T2.c_custkey) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'",
          "tables_involved": [
            "nation",
            "customer",
            "orders"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.n_nationk",
            "T2.c_custk"
          ]
        }
      ]
    },
    "ice_hockey_draft": {
      "unique_tables": [
        "(",
        "PlayerInfo",
        "SeasonStatus",
        "weight_info",
        "height_info"
      ],
      "table_frequency": {
        "PlayerInfo": 91,
        "height_info": 22,
        "weight_info": 22,
        "SeasonStatus": 50,
        "(": 5
      },
      "table_pairs": {
        "('PlayerInfo', 'height_info')": 27,
        "('PlayerInfo', 'weight_info')": 26,
        "('PlayerInfo', 'PlayerInfo')": 8,
        "('weight_info', 'weight_info')": 1,
        "('height_info', 'height_info')": 2,
        "('height_info', 'weight_info')": 1,
        "('PlayerInfo', 'SeasonStatus')": 54,
        "('SeasonStatus', 'weight_info')": 2,
        "('(', 'SeasonStatus')": 8,
        "('(', 'PlayerInfo')": 8,
        "('(', '(')": 1,
        "('SeasonStatus', 'SeasonStatus')": 4,
        "('SeasonStatus', 'height_info')": 7,
        "('(', 'height_info')": 2
      },
      "join_examples": [
        {
          "question": "What is the height of David Bornhammar in inches?",
          "sql": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'",
          "tables_involved": [
            "PlayerInfo",
            "height_info"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Please list the names of all the players with a height of over 6'2\" inches.",
          "sql": "SELECT DISTINCT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"'",
          "tables_involved": [
            "PlayerInfo",
            "height_info"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Among the players with a height of over 6'2\" inches, how many of them were born in Sweden?",
          "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"' AND T1.nation = 'Sweden'",
          "tables_involved": [
            "PlayerInfo",
            "height_info"
          ],
          "join_conditions": [
            "T1.",
            "= 'S"
          ]
        },
        {
          "question": "What is the name of the tallest player?",
          "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1",
          "tables_involved": [
            "PlayerInfo",
            "height_info"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How much does David Bornhammar weigh in kilograms?",
          "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'",
          "tables_involved": [
            "PlayerInfo",
            "weight_info"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How many players weigh more than 90 kg?",
          "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90",
          "tables_involved": [
            "PlayerInfo",
            "weight_info"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Among the players that weigh more than 90 kg, how many of them have a position of defense?",
          "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.position_info = 'D'",
          "tables_involved": [
            "PlayerInfo",
            "weight_info"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "Among the players that weigh more than 90 kg, what is the name of the player that has the most attendance in the player's first 7 years of NHL career?",
          "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.sum_7yr_GP = ( SELECT MAX(T1.sum_7yr_GP) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 )",
          "tables_involved": [
            "PlayerInfo",
            "weight_info",
            "PlayerInfo",
            "weight_info"
          ],
          "join_conditions": [
            "T1.",
            "T1."
          ]
        },
        {
          "question": "What is the weight of the player with the longest time on ice in the player\u2019s first 7 years of NHL career in kilograms?",
          "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.sum_7yr_TOI = ( SELECT MAX(t.sum_7yr_TOI) FROM PlayerInfo t )",
          "tables_involved": [
            "PlayerInfo",
            "weight_info",
            "PlayerInfo"
          ],
          "join_conditions": [
            "T1."
          ]
        },
        {
          "question": "How much taller is David Bornhammar than Pauli Levokari in centimeters?",
          "sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )",
          "tables_involved": [
            "PlayerInfo",
            "height_info",
            "PlayerInfo",
            "height_info"
          ],
          "join_conditions": [
            "T1.",
            "T1."
          ]
        }
      ]
    },
    "works_cycles": {
      "unique_tables": [
        "SalesPerson",
        "PhoneNumberType",
        "PersonCreditCard",
        "SalesOrderDetail",
        "SalesTaxRate",
        "PurchaseOrderDetail",
        "AddressType",
        "StateProvince",
        "ProductReview",
        "ProductCostHistory",
        "Person",
        "BusinessEntityAddress",
        "SpecialOfferProduct",
        "Store",
        "ProductListPriceHistory",
        "EmailAddress",
        "(",
        "WorkOrderRouting",
        "ContactType",
        "ProductInventory",
        "ProductModel",
        "Product",
        "CountryRegion",
        "ShipMethod",
        "SalesPersonQuotaHistory",
        "PersonPhone",
        "ScrapReason",
        "EmployeePayHistory",
        "Culture",
        "CreditCard",
        "ProductSubcategory",
        "Location",
        "Password",
        "Department",
        "TransactionHistory",
        "Customer",
        "SalesOrderHeaderSalesReason",
        "Employee",
        "SalesTerritory",
        "WorkOrder",
        "JobCandidate",
        "CurrencyRate",
        "ProductProductPhoto",
        "ProductDescription",
        "ProductPhoto",
        "Currency",
        "BusinessEntity",
        "ProductCategory",
        "ShoppingCartItem",
        "BusinessEntityContact",
        "PurchaseOrderHeader",
        "SalesOrderHeader",
        "Document",
        "TransactionHistoryArchive",
        "Address",
        "ProductVendor",
        "SpecialOffer",
        "ProductModelProductDescriptionCulture",
        "BillOfMaterials",
        "EmployeeDepartmentHistory",
        "Shift",
        "UnitMeasure",
        "SalesReason",
        "Vendor",
        "CountryRegionCurrency"
      ],
      "table_frequency": {
        "Product": 123,
        "ProductCostHistory": 14,
        "ShoppingCartItem": 5,
        "TransactionHistory": 13,
        "ProductReview": 31,
        "PurchaseOrderDetail": 10,
        "ProductVendor": 40,
        "CurrencyRate": 1,
        "SalesTerritory": 15,
        "Person": 106,
        "Employee": 104,
        "Document": 9,
        "SalesOrderHeader": 7,
        "SalesPerson": 25,
        "SpecialOffer": 13,
        "SalesOrderDetail": 7,
        "BillOfMaterials": 9,
        "Department": 29,
        "EmployeeDepartmentHistory": 33,
        "EmployeePayHistory": 39,
        "Vendor": 34,
        "Address": 16,
        "PersonCreditCard": 11,
        "TransactionHistoryArchive": 2,
        "PurchaseOrderHeader": 13,
        "BusinessEntityAddress": 11,
        "AddressType": 3,
        "Customer": 4,
        "CreditCard": 15,
        "Location": 6,
        "ProductInventory": 6,
        "ScrapReason": 3,
        "WorkOrder": 8,
        "SpecialOfferProduct": 7,
        "ProductSubcategory": 13,
        "ShipMethod": 4,
        "StateProvince": 7,
        "SalesTaxRate": 5,
        "ContactType": 4,
        "BusinessEntityContact": 4,
        "PhoneNumberType": 6,
        "PersonPhone": 10,
        "Currency": 2,
        "CountryRegionCurrency": 1,
        "CountryRegion": 2,
        "ProductModelProductDescriptionCulture": 4,
        "Culture": 5,
        "ProductDescription": 2,
        "EmailAddress": 8,
        "Shift": 8,
        "ProductModel": 1,
        "UnitMeasure": 3,
        "ProductListPriceHistory": 12,
        "ProductPhoto": 4,
        "ProductProductPhoto": 5,
        "Password": 2,
        "BusinessEntity": 2,
        "ProductCategory": 7,
        "WorkOrderRouting": 7,
        "SalesPersonQuotaHistory": 7,
        "(": 1,
        "JobCandidate": 1,
        "Store": 7,
        "SalesOrderHeaderSalesReason": 2,
        "SalesReason": 2
      },
      "table_pairs": {
        "('Product', 'ProductCostHistory')": 8,
        "('Product', 'ShoppingCartItem')": 5,
        "('Product', 'TransactionHistory')": 9,
        "('Product', 'ProductReview')": 28,
        "('Product', 'PurchaseOrderDetail')": 5,
        "('Product', 'ProductVendor')": 20,
        "('Employee', 'Person')": 62,
        "('Document', 'Person')": 2,
        "('Document', 'Employee')": 6,
        "('SalesOrderHeader', 'SalesPerson')": 1,
        "('SalesOrderDetail', 'SpecialOffer')": 2,
        "('BillOfMaterials', 'Product')": 1,
        "('SalesPerson', 'SalesTerritory')": 7,
        "('ProductReview', 'ProductReview')": 2,
        "('Department', 'EmployeeDepartmentHistory')": 27,
        "('Employee', 'EmployeePayHistory')": 34,
        "('EmployeePayHistory', 'Person')": 10,
        "('ProductVendor', 'Vendor')": 22,
        "('EmployeePayHistory', 'EmployeePayHistory')": 5,
        "('Person', 'PersonCreditCard')": 7,
        "('AddressType', 'BusinessEntityAddress')": 3,
        "('Customer', 'SalesOrderDetail')": 1,
        "('CreditCard', 'PersonCreditCard')": 10,
        "('Employee', 'EmployeeDepartmentHistory')": 9,
        "('Location', 'ProductInventory')": 3,
        "('ScrapReason', 'WorkOrder')": 3,
        "('PurchaseOrderDetail', 'PurchaseOrderHeader')": 4,
        "('SalesOrderDetail', 'SpecialOfferProduct')": 1,
        "('SpecialOffer', 'SpecialOfferProduct')": 6,
        "('Product', 'ProductSubcategory')": 9,
        "('PurchaseOrderHeader', 'ShipMethod')": 2,
        "('PurchaseOrderDetail', 'ShipMethod')": 1,
        "('SalesTerritory', 'StateProvince')": 2,
        "('SalesTaxRate', 'SalesTerritory')": 2,
        "('SalesTaxRate', 'StateProvince')": 3,
        "('BusinessEntityContact', 'ContactType')": 3,
        "('PersonPhone', 'PhoneNumberType')": 5,
        "('CountryRegionCurrency', 'Currency')": 1,
        "('CountryRegion', 'Currency')": 1,
        "('CountryRegion', 'CountryRegionCurrency')": 1,
        "('Address', 'StateProvince')": 3,
        "('Culture', 'ProductModelProductDescriptionCulture')": 4,
        "('ProductDescription', 'ProductModelProductDescriptionCulture')": 1,
        "('Culture', 'ProductDescription')": 1,
        "('EmailAddress', 'Person')": 7,
        "('Address', 'BusinessEntityAddress')": 8,
        "('Product', 'ProductModel')": 1,
        "('Product', 'UnitMeasure')": 1,
        "('BillOfMaterials', 'UnitMeasure')": 2,
        "('Product', 'ProductListPriceHistory')": 6,
        "('ProductPhoto', 'ProductProductPhoto')": 4,
        "('Password', 'Person')": 2,
        "('Person', 'SalesPerson')": 6,
        "('CountryRegion', 'StateProvince')": 1,
        "('Product', 'TransactionHistoryArchive')": 1,
        "('BusinessEntity', 'Vendor')": 2,
        "('BusinessEntityContact', 'Vendor')": 1,
        "('Person', 'PersonPhone')": 3,
        "('ProductCategory', 'ProductSubcategory')": 7,
        "('BillOfMaterials', 'WorkOrderRouting')": 1,
        "('WorkOrder', 'WorkOrderRouting')": 1,
        "('BillOfMaterials', 'WorkOrder')": 1,
        "('Product', 'Product')": 3,
        "('Product', 'WorkOrder')": 4,
        "('SalesPerson', 'SalesPersonQuotaHistory')": 5,
        "('(', 'Employee')": 1,
        "('(', 'Person')": 1,
        "('Employee', 'JobCandidate')": 1,
        "('JobCandidate', 'Person')": 1,
        "('EmailAddress', 'Employee')": 2,
        "('Department', 'Shift')": 3,
        "('EmployeeDepartmentHistory', 'Shift')": 6,
        "('PurchaseOrderHeader', 'Vendor')": 3,
        "('Person', 'SalesOrderHeader')": 1,
        "('Customer', 'SalesTerritory')": 2,
        "('Address', 'SalesOrderHeader')": 1,
        "('Employee', 'Employee')": 1,
        "('SalesOrderHeader', 'SalesTerritory')": 1,
        "('Address', 'AddressType')": 1,
        "('Product', 'SpecialOfferProduct')": 4,
        "('CreditCard', 'Person')": 6,
        "('SalesOrderHeaderSalesReason', 'SalesReason')": 2,
        "('CreditCard', 'SalesOrderHeader')": 1,
        "('EmployeeDepartmentHistory', 'Person')": 11,
        "('Department', 'Person')": 9,
        "('PurchaseOrderDetail', 'Vendor')": 1,
        "('Employee', 'PurchaseOrderHeader')": 1,
        "('Product', 'Vendor')": 10,
        "('ProductSubcategory', 'ProductVendor')": 1,
        "('ProductSubcategory', 'Vendor')": 1,
        "('BusinessEntityAddress', 'ProductVendor')": 1,
        "('Address', 'ProductVendor')": 1,
        "('BusinessEntityAddress', 'Vendor')": 1,
        "('Address', 'Vendor')": 1,
        "('Product', 'ProductDescription')": 1,
        "('Department', 'Employee')": 5,
        "('EmployeeDepartmentHistory', 'EmployeePayHistory')": 3,
        "('Department', 'EmployeePayHistory')": 5,
        "('Department', 'Department')": 1,
        "('Employee', 'PersonPhone')": 1,
        "('SalesPerson', 'Store')": 1,
        "('Person', 'Store')": 2,
        "('SalesTerritory', 'Store')": 2,
        "('Person', 'SalesTerritory')": 2,
        "('Customer', 'Store')": 1,
        "('Customer', 'Person')": 1,
        "('SalesOrderHeader', 'ShipMethod')": 1,
        "('Product', 'SalesOrderDetail')": 2,
        "('Product', 'ProductInventory')": 3,
        "('BusinessEntityAddress', 'Store')": 2,
        "('AddressType', 'Store')": 1,
        "('ContactType', 'Store')": 1,
        "('BusinessEntityContact', 'Store')": 1,
        "('Employee', 'Shift')": 1,
        "('Person', 'PurchaseOrderHeader')": 1,
        "('Address', 'Store')": 1,
        "('CreditCard', 'EmployeeDepartmentHistory')": 2,
        "('EmployeeDepartmentHistory', 'PersonCreditCard')": 2,
        "('CreditCard', 'Department')": 2,
        "('Department', 'PersonCreditCard')": 2,
        "('EmailAddress', 'EmployeeDepartmentHistory')": 1,
        "('Product', 'SpecialOffer')": 3,
        "('ProductSubcategory', 'SpecialOffer')": 1,
        "('ProductCategory', 'SpecialOffer')": 1,
        "('ProductSubcategory', 'SpecialOfferProduct')": 1,
        "('ProductCategory', 'SpecialOfferProduct')": 1,
        "('Product', 'ProductCategory')": 4,
        "('ProductCostHistory', 'ProductListPriceHistory')": 4,
        "('Location', 'WorkOrderRouting')": 2
      },
      "join_examples": [
        {
          "question": "What is the average standard cost of product number CA-1098?",
          "sql": "SELECT AVG(T2.StandardCost) FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductNumber = 'CA-1098'",
          "tables_involved": [
            "Product",
            "ProductCostHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "For all the products, list the product name and its corresponding start date for the current standard cost.",
          "sql": "SELECT T1.Name, T2.StartDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.EndDate IS NULL",
          "tables_involved": [
            "Product",
            "ProductCostHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "List the products whereby the standard cost is $80 more than previous standard cost in history.",
          "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost - T2.StandardCost > 80 GROUP BY T1.Name",
          "tables_involved": [
            "Product",
            "ProductCostHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "Name all products and total quantity for each item for shopping cart ID 14951.",
          "sql": "SELECT T1.Name, T2.Quantity FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 14951",
          "tables_involved": [
            "Product",
            "ShoppingCartItem"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "List the product name with more than 5 quantity in the shopping cart.",
          "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 5",
          "tables_involved": [
            "Product",
            "ShoppingCartItem"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "For all the purchase order transactions, name all the products with low quality.",
          "sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'L' AND T2.TransactionType = 'P' ORDER BY T1.Name",
          "tables_involved": [
            "Product",
            "TransactionHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "Provide all the transactions whereby the quantiy is more than 10,000 pieces. State the product name and the selling price.",
          "sql": "SELECT DISTINCT T1.Name, T1.ListPrice FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 10000",
          "tables_involved": [
            "Product",
            "TransactionHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "Which is a high quality product but with the lowest transacted quantity?",
          "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'H' ORDER BY T2.Quantity ASC LIMIT 1",
          "tables_involved": [
            "Product",
            "TransactionHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "How many transactions are there for product under the Mountain line?",
          "sql": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'",
          "tables_involved": [
            "Product",
            "TransactionHistory"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "How much would be the total sales profit for shopping cart ID 20621 ?",
          "sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 20621",
          "tables_involved": [
            "Product",
            "ShoppingCartItem"
          ],
          "join_conditions": [
            "T1.P"
          ]
        }
      ]
    },
    "image_and_language": {
      "unique_tables": [
        "IMG_OBJ_ATT",
        "(",
        "PRED_CLASSES",
        "OBJ_CLASSES",
        "IMG_OBJ_att",
        "IMG_REL",
        "pred_classes",
        "ATT_CLASSES",
        "IMG_OBJ"
      ],
      "table_frequency": {
        "IMG_OBJ": 90,
        "(": 5,
        "IMG_REL": 29,
        "OBJ_CLASSES": 66,
        "PRED_CLASSES": 23,
        "ATT_CLASSES": 29,
        "IMG_OBJ_ATT": 26,
        "IMG_OBJ_att": 7,
        "pred_classes": 1
      },
      "table_pairs": {
        "('IMG_OBJ', 'IMG_REL')": 9,
        "('IMG_OBJ', 'OBJ_CLASSES')": 61,
        "('(', 'OBJ_CLASSES')": 2,
        "('(', 'IMG_OBJ')": 2,
        "('IMG_REL', 'PRED_CLASSES')": 21,
        "('IMG_OBJ', 'PRED_CLASSES')": 5,
        "('ATT_CLASSES', 'IMG_OBJ_ATT')": 22,
        "('OBJ_CLASSES', 'PRED_CLASSES')": 3,
        "('IMG_REL', 'OBJ_CLASSES')": 3,
        "('ATT_CLASSES', 'IMG_OBJ_att')": 5,
        "('IMG_OBJ', 'IMG_OBJ_att')": 2,
        "('IMG_OBJ_att', 'OBJ_CLASSES')": 2,
        "('ATT_CLASSES', 'IMG_OBJ')": 13,
        "('ATT_CLASSES', 'OBJ_CLASSES')": 9,
        "('(', 'IMG_OBJ_att')": 1,
        "('(', 'ATT_CLASSES')": 1,
        "('IMG_REL', 'pred_classes')": 1,
        "('IMG_OBJ', 'IMG_OBJ_ATT')": 11,
        "('IMG_OBJ_ATT', 'OBJ_CLASSES')": 7,
        "('IMG_OBJ_ATT', 'IMG_REL')": 1,
        "('IMG_OBJ_ATT', 'PRED_CLASSES')": 1,
        "('ATT_CLASSES', 'IMG_REL')": 1,
        "('ATT_CLASSES', 'PRED_CLASSES')": 1
      },
      "join_examples": [
        {
          "question": "What is the bounding box of the object sample in image no.5 that has a self-relation?",
          "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID",
          "tables_involved": [
            "IMG_REL",
            "IMG_OBJ"
          ],
          "join_conditions": [
            "T1.IMG_ID = T2.IMG_ID "
          ]
        },
        {
          "question": "How many object samples in image no.1 are in the class of \"man\"?",
          "sql": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1",
          "tables_involved": [
            "OBJ_CLASSES",
            "IMG_OBJ"
          ],
          "join_conditions": [
            "T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID "
          ]
        },
        {
          "question": "How many images have at least one object sample in the class of \"man\"?",
          "sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T",
          "tables_involved": [
            "(",
            "OBJ_CLASSES",
            "IMG_OBJ"
          ],
          "join_conditions": [
            "T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID "
          ]
        },
        {
          "question": "Please list the classes of all the object samples in image no.1.",
          "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 GROUP BY T1.OBJ_CLASS",
          "tables_involved": [
            "OBJ_CLASSES",
            "IMG_OBJ"
          ],
          "join_conditions": [
            "T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID "
          ]
        },
        {
          "question": "What is the relation between object sample no.8 and object sample no.4 in image no.1?",
          "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4",
          "tables_involved": [
            "PRED_CLASSES",
            "IMG_REL"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "How many pairs of object samples in image no.1 have the relation of \"parked on\"?",
          "sql": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID",
          "tables_involved": [
            "PRED_CLASSES",
            "IMG_REL"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "Please list all the predicted relation classes of object sample no.14 in image no.1.",
          "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID = 14 AND T2.OBJ2_SAMPLE_ID = 14",
          "tables_involved": [
            "PRED_CLASSES",
            "IMG_REL"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "How many images have at least one pair of object samples with the relation \"parked on\"?",
          "sql": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID",
          "tables_involved": [
            "PRED_CLASSES",
            "IMG_REL"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "Please list the IDs of all the images with more than 2 pairs of object samples with the relation \"parked on\".",
          "sql": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2",
          "tables_involved": [
            "PRED_CLASSES",
            "IMG_REL"
          ],
          "join_conditions": [
            "T1.P"
          ]
        },
        {
          "question": "To which predicted relation class does the self-relation of the object sample in image no.5 belong?",
          "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 5 AND T2.OBJ1_SAMPLE_ID = T2.OBJ2_SAMPLE_ID",
          "tables_involved": [
            "PRED_CLASSES",
            "IMG_REL"
          ],
          "join_conditions": [
            "T1.P"
          ]
        }
      ]
    },
    "hockey": {
      "unique_tables": [
        "AwardsPlayers",
        "TeamsSC",
        "AwardsMisc",
        "Coaches",
        "Teams",
        "(",
        "AwardsCoaches",
        "Master",
        "TeamVsTeam",
        "GoaliesSC",
        "HOF",
        "Goalies",
        "TeamSplits",
        "TeamsHalf",
        "SeriesPost",
        "ScoringSC",
        "CombinedShutouts",
        "Scoring"
      ],
      "table_frequency": {
        "Master": 133,
        "Goalies": 56,
        "Teams": 73,
        "(": 6,
        "Coaches": 31,
        "AwardsMisc": 2,
        "AwardsPlayers": 13,
        "CombinedShutouts": 1,
        "HOF": 16,
        "AwardsCoaches": 12,
        "Scoring": 22,
        "ScoringSC": 6,
        "TeamSplits": 2,
        "SeriesPost": 1,
        "GoaliesSC": 1,
        "TeamVsTeam": 6,
        "TeamsHalf": 1,
        "TeamsSC": 13
      },
      "table_pairs": {
        "('Goalies', 'Master')": 40,
        "('Master', 'Teams')": 27,
        "('Goalies', 'Teams')": 14,
        "('Goalies', 'Goalies')": 1,
        "('(', 'Master')": 5,
        "('(', 'Goalies')": 1,
        "('Coaches', 'Master')": 23,
        "('Coaches', 'Teams')": 18,
        "('(', 'Coaches')": 3,
        "('Coaches', 'Coaches')": 1,
        "('HOF', 'Master')": 10,
        "('Master', 'Master')": 1,
        "('AwardsCoaches', 'Master')": 8,
        "('AwardsPlayers', 'Master')": 12,
        "('AwardsCoaches', 'Coaches')": 3,
        "('AwardsMisc', 'Master')": 1,
        "('Goalies', 'Scoring')": 1,
        "('Master', 'Scoring')": 17,
        "('Teams', 'Teams')": 7,
        "('AwardsCoaches', 'Teams')": 1,
        "('SeriesPost', 'Teams')": 1,
        "('Scoring', 'Teams')": 7,
        "('GoaliesSC', 'Master')": 1,
        "('(', 'AwardsCoaches')": 1,
        "('TeamVsTeam', 'Teams')": 11,
        "('Teams', 'TeamsHalf')": 1,
        "('Teams', 'TeamsSC')": 11,
        "('Coaches', 'TeamsSC')": 2,
        "('Master', 'TeamsSC')": 2,
        "('(', '(')": 1,
        "('(', 'Scoring')": 3,
        "('(', 'Teams')": 1
      },
      "join_examples": [
        {
          "question": "Name the goalies who played for more than two teams from Year 2000 to 2005.",
          "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year >= 2000 AND T2.year <= 2005 GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.tmID) > 2",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "Name the goalies who have played more than total of 5000 minutes in the all the season played. State given name of the player and from which country was he born.",
          "sql": "SELECT DISTINCT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.nameGiven, T1.birthCountry HAVING SUM(T2.Min) > 5000",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "Name the goaltenders who had played in both PCHA and NHL league.",
          "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "List all deceased goalies by last name. List the season where he had the most time played.",
          "sql": "SELECT T1.playerID, T2.year, Min FROM Master AS T1 INNER JOIN Goalies AS T2 ON T2.playerID = T1.playerID WHERE T1.deathYear IS NOT NULL ORDER BY T2.Min DESC LIMIT 1",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T2.play"
          ]
        },
        {
          "question": "List all goalies from year 2000 to 2010 for team COL. State their given name, height, weight and age of today.",
          "sql": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "Name all goalies with 10 or more empty net goals. Name the players and season where he played.",
          "sql": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "State the goalie who has the lowest percentage of goals against among all the shots against recorded. Name the players and season where he played.",
          "sql": "SELECT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE CAST(T2.GA AS REAL) / T2.SA IS NOT NULL ORDER BY CAST(T2.GA AS REAL) / T2.SA LIMIT 1",
          "tables_involved": [
            "Master",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        },
        {
          "question": "List all goalies who played in the year 2005 season and shorter than 72 inches. List all the team names he play for.",
          "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T2.year = 2005 AND T1.height < 72",
          "tables_involved": [
            "Master",
            "Goalies",
            "Teams"
          ],
          "join_conditions": [
            "T1.play",
            "T2.tmID = T3.tmID "
          ]
        },
        {
          "question": "State the nick name of player ID 'aubinje01'. List all the teams and season he played for.",
          "sql": "SELECT DISTINCT T1.nameNick, T3.year, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01'",
          "tables_involved": [
            "Master",
            "Goalies",
            "Teams"
          ],
          "join_conditions": [
            "T1.play",
            "T2.tmID = T3.tmID "
          ]
        },
        {
          "question": "Name the goalies with the most seasons played. State the average time he played for each season.",
          "sql": "SELECT T1.firstName, T1.lastName, T2.year, AVG(T2.Min) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = ( SELECT playerID FROM Goalies GROUP BY playerID ORDER BY COUNT(playerID) DESC LIMIT 1 ) GROUP BY T1.firstName, T1.lastName, T2.year",
          "tables_involved": [
            "Master",
            "Goalies",
            "Goalies"
          ],
          "join_conditions": [
            "T1.play"
          ]
        }
      ]
    },
    "world": {
      "unique_tables": [
        "(",
        "Country",
        "CountryLanguage",
        "City"
      ],
      "table_frequency": {
        "Country": 90,
        "CountryLanguage": 44,
        "City": 47,
        "(": 1
      },
      "table_pairs": {
        "('Country', 'CountryLanguage')": 39,
        "('City', 'Country')": 40,
        "('Country', 'Country')": 3,
        "('City', 'CountryLanguage')": 6,
        "('(', 'City')": 1,
        "('(', 'CountryLanguage')": 1
      },
      "join_examples": [
        {
          "question": "List any five countries which use English as an official language.",
          "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5",
          "tables_involved": [
            "Country",
            "CountryLanguage"
          ],
          "join_conditions": [
            "T1.Cod"
          ]
        },
        {
          "question": "How many cities are there in the country with the largest surface area?",
          "sql": "SELECT T2.ID FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM Country )",
          "tables_involved": [
            "Country",
            "City",
            "Country"
          ],
          "join_conditions": [
            "T1.Cod"
          ]
        },
        {
          "question": "What is the capital city and population of San Marino?",
          "sql": "SELECT T1.Capital, T2.Population FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'San Marino'",
          "tables_involved": [
            "Country",
            "City"
          ],
          "join_conditions": [
            "F",
            "T1.Cod"
          ]
        },
        {
          "question": "List the languages used in Turkmenistan.",
          "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Turkmenistan'",
          "tables_involved": [
            "Country",
            "CountryLanguage"
          ],
          "join_conditions": [
            "T1.Cod"
          ]
        },
        {
          "question": "Provide the name, capital city and its official language of the country with the highest life expectancy.",
          "sql": "SELECT T1.Name, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.LifeExpectancy DESC LIMIT 1",
          "tables_involved": [
            "Country",
            "CountryLanguage",
            "City"
          ],
          "join_conditions": [
            "T1.Cod",
            "T1.Cod"
          ]
        },
        {
          "question": "List the countries and their official languages in Antarctica.",
          "sql": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Antarctica' AND T2.IsOfficial = 'T'",
          "tables_involved": [
            "Country",
            "CountryLanguage"
          ],
          "join_conditions": [
            "T1.Cod"
          ]
        },
        {
          "question": "List any five countries which use English as an official language.",
          "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5",
          "tables_involved": [
            "Country",
            "CountryLanguage"
          ],
          "join_conditions": [
            "T1.Cod"
          ]
        },
        {
          "question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.\n\n",
          "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80",
          "tables_involved": [
            "Country",
            "CountryLanguage"
          ],
          "join_conditions": [
            "T1.Cod",
            "= 'Baltic Count"
          ]
        },
        {
          "question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.",
          "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80",
          "tables_involved": [
            "Country",
            "CountryLanguage"
          ],
          "join_conditions": [
            "T1.Cod",
            "= 'Baltic Count"
          ]
        },
        {
          "question": "Provide the name, located country, and life expectancy of the most populated city",
          "sql": "SELECT T2.Name, T1.Code, T1.LifeExpectancy FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1",
          "tables_involved": [
            "Country",
            "City"
          ],
          "join_conditions": [
            "T1.Cod",
            "D"
          ]
        }
      ]
    },
    "music_platform_2": {
      "unique_tables": [
        "(",
        "podcasts",
        "categories",
        "runs",
        "reviews"
      ],
      "table_frequency": {
        "categories": 37,
        "(": 1,
        "podcasts": 47,
        "reviews": 47,
        "runs": 2
      },
      "table_pairs": {
        "('categories', 'podcasts')": 15,
        "('categories', 'reviews')": 17,
        "('podcasts', 'reviews')": 26
      },
      "join_examples": [
        {
          "question": "Name all the categories for podcast titled 'I Heart My Life Show'.",
          "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'I Heart My Life Show'",
          "tables_involved": [
            "categories",
            "podcasts"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id "
          ]
        },
        {
          "question": "List all the podcast title and its itunes url under the 'society-culture' category.",
          "sql": "SELECT T2.title, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'society-culture'",
          "tables_involved": [
            "categories",
            "podcasts"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id "
          ]
        },
        {
          "question": "How many people rated 5 for the podcast which title contains the word 'spoiler' under the 'art' category '?",
          "sql": "SELECT COUNT(T3.podcast_id) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title LIKE '%spoilers%' AND T1.category = 'arts' AND T3.rating = 5",
          "tables_involved": [
            "categories",
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id INN",
            "T3.podcast_id = T2.podcast_id "
          ]
        },
        {
          "question": "List the authors who created review for podcast titled 'Pop Rocket' in 2016 with rating less than 5.",
          "sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5",
          "tables_involved": [
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id "
          ]
        },
        {
          "question": "Name all the podcast title and its category with average rating of more than 3.0.",
          "sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id GROUP BY T3.podcast_id HAVING AVG(T3.rating) > 3",
          "tables_involved": [
            "categories",
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id INN",
            "T3.podcast_id = T2.podcast_id G"
          ]
        },
        {
          "question": "List all content reviewed for podcast with the best rating under the 'fiction' category. State the podcast title.",
          "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.rating = 5 AND T1.category = 'fiction'",
          "tables_involved": [
            "categories",
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id INN",
            "T3.podcast_id = T2.podcast_id "
          ]
        },
        {
          "question": "State the podcast title, content review and rating for all reviews with titled 'Love it!'",
          "sql": "SELECT DISTINCT T1.title, T2.content, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Love it!'",
          "tables_involved": [
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id "
          ]
        },
        {
          "question": "Find the author, rating and review creation date of review for podcast title 'In The Thick'.",
          "sql": "SELECT T2.author_id, T2.rating, T2.created_at FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'In The Thick' GROUP BY T2.author_id, T2.rating, T2.created_at",
          "tables_involved": [
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id "
          ]
        },
        {
          "question": "Which podcast was reviewed the latest? State the date of creation, podcast tile and rating.",
          "sql": "SELECT T1.podcast_id, T2.created_at, T2.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id ORDER BY T2.created_at DESC LIMIT 1",
          "tables_involved": [
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id O"
          ]
        },
        {
          "question": "Name the podcast title, rating and review content created by '76A4C24B6038145'.",
          "sql": "SELECT T2.title, T2.rating, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = '76A4C24B6038145'",
          "tables_involved": [
            "podcasts",
            "reviews"
          ],
          "join_conditions": [
            "T2.podcast_id = T1.podcast_id "
          ]
        }
      ]
    },
    "university": {
      "unique_tables": [
        "university_ranking_year",
        "university",
        "ranking_criteria",
        "country",
        "ranking_system",
        "university_year"
      ],
      "table_frequency": {
        "university_year": 74,
        "ranking_criteria": 38,
        "university": 92,
        "country": 33,
        "university_ranking_year": 45,
        "ranking_system": 12
      },
      "table_pairs": {
        "('country', 'university')": 31,
        "('university', 'university_year')": 42,
        "('ranking_criteria', 'university_ranking_year')": 25,
        "('ranking_criteria', 'university')": 21,
        "('university', 'university_ranking_year')": 33,
        "('country', 'ranking_criteria')": 3,
        "('country', 'university_ranking_year')": 6,
        "('ranking_criteria', 'ranking_system')": 10,
        "('country', 'university_year')": 10,
        "('university_ranking_year', 'university_year')": 5,
        "('university_year', 'university_year')": 1,
        "('ranking_criteria', 'ranking_criteria')": 1,
        "('university_ranking_year', 'university_ranking_year')": 2,
        "('university', 'university')": 1
      },
      "join_examples": [
        {
          "question": "Give the name of the country that has the most universities.",
          "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1",
          "tables_involved": [
            "university",
            "country"
          ],
          "join_conditions": [
            "T1.count"
          ]
        },
        {
          "question": "What is the name of the university that had the highest number of international students for 6 consecutive years?",
          "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.pct_international_students DESC LIMIT 1",
          "tables_involved": [
            "university_year",
            "university"
          ],
          "join_conditions": [
            "T1.univ"
          ]
        },
        {
          "question": "In 2014, what is the name of the university which was considered a leader in the publications rank?",
          "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Publications Rank' AND T2.year = 2014 AND T1.id = 17 ORDER BY T2.score DESC LIMIT 1",
          "tables_involved": [
            "ranking_criteria",
            "university_ranking_year",
            "university"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T3.id = T2.univ"
          ]
        },
        {
          "question": "What is the name of the university that has the lowest number of students of all time?",
          "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1",
          "tables_involved": [
            "university_year",
            "university"
          ],
          "join_conditions": [
            "T1.univ"
          ]
        },
        {
          "question": "How many universities are there in the United States of America?",
          "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'United States of America'",
          "tables_involved": [
            "university",
            "country"
          ],
          "join_conditions": [
            "T1.count"
          ]
        },
        {
          "question": "In 2016, what is the name of the university in Australia with the highest score in Citations criteria?",
          "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Citations' AND T2.year = 2016 AND T1.id = 4 AND T4.country_name = 'Australia' ORDER BY T2.score DESC LIMIT 1",
          "tables_involved": [
            "ranking_criteria",
            "university_ranking_year",
            "university",
            "country"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T3.id = T2.univ",
            "T4.id = T3.count"
          ]
        },
        {
          "question": "How many universities scored 0 in Awards between 2005 to 2015?",
          "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0",
          "tables_involved": [
            "ranking_criteria",
            "university_ranking_year"
          ],
          "join_conditions": [
            "T1.id = T2."
          ]
        },
        {
          "question": "Which country is the University of Oxford located?",
          "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE university_name = 'University of Oxford'",
          "tables_involved": [
            "university",
            "country"
          ],
          "join_conditions": [
            "T1.count"
          ]
        },
        {
          "question": "How many times did the Yale University achieve a score of no less than 10 in the Quality of Education Rank?",
          "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'",
          "tables_involved": [
            "ranking_criteria",
            "university_ranking_year",
            "university"
          ],
          "join_conditions": [
            "T1.id = T2.",
            "T3.id = T2.univ"
          ]
        },
        {
          "question": "What are the names of the criteria under Center for World University Rankings?",
          "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'",
          "tables_involved": [
            "ranking_system",
            "ranking_criteria"
          ],
          "join_conditions": [
            "T1.id = T2."
          ]
        }
      ]
    },
    "sales_in_weather": {
      "unique_tables": [
        "(",
        "relation",
        "sales_in_weather",
        "weather"
      ],
      "table_frequency": {
        "sales_in_weather": 44,
        "weather": 66,
        "relation": 68,
        "(": 4
      },
      "table_pairs": {
        "('relation', 'sales_in_weather')": 47,
        "('sales_in_weather', 'weather')": 37,
        "('relation', 'weather')": 62,
        "('sales_in_weather', 'sales_in_weather')": 5,
        "('relation', 'relation')": 7,
        "('weather', 'weather')": 6,
        "('(', 'sales_in_weather')": 1,
        "('(', 'relation')": 3,
        "('(', 'weather')": 3
      },
      "join_examples": [
        {
          "question": "What is the total number of units of item no.5 sold in store no.3 in 2012 on days when the temperature was below the 30-year normal?",
          "sql": "SELECT SUM(CASE WHEN T3.depart < 0 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest?",
          "sql": "SELECT T1.units FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY tmax DESC LIMIT 1",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012?",
          "sql": "SELECT dewpoint FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY units DESC LIMIT 1",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "On how many days with the max temperature over 90 did the sale of item no.5 in store no.3 exceed 100?",
          "sql": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "How many units of item no.5 were sold in store no.3 on the day the temperature range was the biggest?",
          "sql": "SELECT t2.units FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 ORDER BY t3.tmax - t3.tmin DESC LIMIT 1",
          "tables_involved": [
            "relation",
            "sales_in_weather",
            "weather"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.sto",
            "T1.station_nb"
          ]
        },
        {
          "question": "Among the days on which over 100 units of item no.5 were sold in store no.3, on which date was the temperature range the biggest?",
          "sql": "SELECT T2.`date` FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 AND T2.units > 100 ORDER BY tmax - tmin DESC LIMIT 1",
          "tables_involved": [
            "relation",
            "sales_in_weather",
            "weather"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.sto",
            "T1.station_nb"
          ]
        },
        {
          "question": "How many units of item no.5 were sold in store no.3 in total on days with a total precipitation of over 0.05?",
          "sql": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "Please list the dates on which the sale of item no.5 in store no.3 exceeded 100 and the average wind speed exceeded 10.",
          "sql": "SELECT T1.`date` FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5 AND T1.units > 100 AND T3.avgspeed > 10",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "What is the total units of products sold on the day with the highest max temperature in store no.3 in 2012?",
          "sql": "SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.`date` LIKE '%2012%' GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        },
        {
          "question": "How many more units of item no.16 were sold on the day with the highest max temperature in 2012 in store no.5 than in store no.10?",
          "sql": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.`date` LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.`date` LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )",
          "tables_involved": [
            "sales_in_weather",
            "relation",
            "weather",
            "sales_in_weather",
            "relation",
            "weather"
          ],
          "join_conditions": [
            "AS T2 ON T1.sto",
            "T2.station_nb",
            "AS T2 ON T1.sto",
            "T2.station_nb"
          ]
        }
      ]
    },
    "mondial_geo": {
      "unique_tables": [
        "geo_river",
        "organization",
        "river",
        "lake",
        "encompasses",
        "language",
        "islandIn",
        "country",
        "mountainOnIsland",
        "ethnicGroup",
        "island",
        "(",
        "geo_source",
        "sea",
        "target",
        "located",
        "province",
        "geo_mountain",
        "city",
        "mountain",
        "desert",
        "geo_lake",
        "mergesWith",
        "locatedOn",
        "religion",
        "continent",
        "geo_desert",
        "isMember",
        "politics",
        "population",
        "economy",
        "borders"
      ],
      "table_frequency": {
        "ethnicGroup": 24,
        "country": 199,
        "politics": 39,
        "economy": 45,
        "population": 19,
        "located": 28,
        "lake": 10,
        "language": 18,
        "organization": 31,
        "religion": 7,
        "river": 24,
        "borders": 16,
        "geo_mountain": 26,
        "island": 15,
        "mountainOnIsland": 5,
        "mountain": 27,
        "encompasses": 23,
        "continent": 20,
        "city": 40,
        "locatedOn": 7,
        "sea": 11,
        "(": 3,
        "geo_desert": 10,
        "province": 25,
        "desert": 9,
        "geo_river": 4,
        "geo_source": 1,
        "geo_lake": 2,
        "islandIn": 2,
        "target": 1,
        "isMember": 7,
        "mergesWith": 2
      },
      "table_pairs": {
        "('country', 'ethnicGroup')": 25,
        "('economy', 'politics')": 6,
        "('country', 'economy')": 35,
        "('country', 'politics')": 25,
        "('country', 'population')": 14,
        "('country', 'country')": 10,
        "('ethnicGroup', 'ethnicGroup')": 2,
        "('ethnicGroup', 'population')": 1,
        "('politics', 'population')": 2,
        "('economy', 'population')": 3,
        "('lake', 'located')": 7,
        "('country', 'language')": 14,
        "('country', 'organization')": 16,
        "('economy', 'organization')": 3,
        "('organization', 'organization')": 1,
        "('ethnicGroup', 'organization')": 1,
        "('language', 'organization')": 2,
        "('country', 'located')": 10,
        "('country', 'lake')": 3,
        "('language', 'population')": 3,
        "('language', 'language')": 1,
        "('country', 'religion')": 7,
        "('located', 'river')": 14,
        "('country', 'river')": 5,
        "('borders', 'country')": 18,
        "('country', 'geo_mountain')": 15,
        "('island', 'mountainOnIsland')": 5,
        "('country', 'mountain')": 10,
        "('geo_mountain', 'mountain')": 18,
        "('country', 'encompasses')": 22,
        "('continent', 'country')": 20,
        "('continent', 'encompasses')": 19,
        "('city', 'country')": 20,
        "('island', 'locatedOn')": 7,
        "('country', 'locatedOn')": 1,
        "('country', 'island')": 1,
        "('(', 'economy')": 1,
        "('(', 'geo_mountain')": 1,
        "('economy', 'geo_mountain')": 2,
        "('country', 'geo_desert')": 6,
        "('geo_desert', 'politics')": 1,
        "('geo_desert', 'language')": 1,
        "('geo_mountain', 'politics')": 1,
        "('mountain', 'politics')": 1,
        "('economy', 'mountain')": 1,
        "('borders', 'politics')": 4,
        "('economy', 'encompasses')": 6,
        "('continent', 'economy')": 6,
        "('country', 'province')": 15,
        "('encompasses', 'province')": 2,
        "('encompasses', 'geo_mountain')": 1,
        "('continent', 'province')": 1,
        "('continent', 'geo_mountain')": 1,
        "('geo_mountain', 'province')": 9,
        "('country', 'desert')": 3,
        "('encompasses', 'geo_desert')": 1,
        "('desert', 'encompasses')": 1,
        "('continent', 'geo_desert')": 1,
        "('continent', 'desert')": 1,
        "('desert', 'geo_desert')": 6,
        "('encompasses', 'population')": 2,
        "('continent', 'population')": 2,
        "('continent', 'continent')": 1,
        "('city', 'locatedOn')": 5,
        "('city', 'island')": 6,
        "('island', 'island')": 1,
        "('city', 'province')": 12,
        "('city', 'located')": 12,
        "('city', 'sea')": 3,
        "('located', 'sea')": 5,
        "('city', 'river')": 10,
        "('mountain', 'province')": 9,
        "('located', 'mountain')": 1,
        "('geo_mountain', 'located')": 1,
        "('located', 'province')": 3,
        "('geo_river', 'river')": 3,
        "('geo_source', 'mountain')": 1,
        "('geo_mountain', 'geo_source')": 1,
        "('geo_source', 'province')": 1,
        "('desert', 'desert')": 1,
        "('country', 'sea')": 2,
        "('politics', 'politics')": 1,
        "('(', 'geo_lake')": 1,
        "('encompasses', 'geo_lake')": 1,
        "('country', 'geo_lake')": 2,
        "('geo_lake', 'politics')": 1,
        "('(', 'encompasses')": 2,
        "('(', 'country')": 2,
        "('(', 'politics')": 1,
        "('encompasses', 'politics')": 2,
        "('continent', 'religion')": 1,
        "('encompasses', 'religion')": 1,
        "('mountain', 'mountain')": 1,
        "('islandIn', 'sea')": 1,
        "('island', 'islandIn')": 2,
        "('island', 'sea')": 1,
        "('river', 'river')": 1,
        "('city', 'politics')": 1,
        "('continent', 'ethnicGroup')": 1,
        "('encompasses', 'ethnicGroup')": 1,
        "('ethnicGroup', 'politics')": 1,
        "('continent', 'politics')": 1,
        "('language', 'politics')": 1,
        "('economy', 'province')": 2,
        "('(', 'city')": 1,
        "('city', 'encompasses')": 1,
        "('mountain', 'mountainOnIsland')": 4,
        "('island', 'mountain')": 4,
        "('islandIn', 'mountain')": 1,
        "('islandIn', 'mountainOnIsland')": 1,
        "('river', 'sea')": 1,
        "('city', 'economy')": 1,
        "('country', 'isMember')": 6,
        "('isMember', 'organization')": 5,
        "('city', 'isMember')": 1,
        "('city', 'organization')": 2,
        "('country', 'geo_river')": 1,
        "('sea', 'sea')": 2,
        "('lake', 'province')": 3,
        "('city', 'lake')": 1,
        "('borders', 'continent')": 1,
        "('borders', 'encompasses')": 1,
        "('geo_lake', 'lake')": 1,
        "('geo_lake', 'province')": 1,
        "('mergesWith', 'sea')": 3,
        "('language', 'religion')": 1,
        "('organization', 'politics')": 2,
        "('continent', 'organization')": 1,
        "('encompasses', 'organization')": 1
      },
      "join_examples": [
        {
          "question": "In which country does Polish found least in?",
          "sql": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Polish' GROUP BY T2.Name, T1.Percentage ORDER BY T1.Percentage ASC LIMIT 1",
          "tables_involved": [
            "ethnicGroup",
            "country"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "Which countries have more than 90% of African? List the name of the country in full.",
          "sql": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'African' AND T1.Percentage > 90",
          "tables_involved": [
            "ethnicGroup",
            "country"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "State the different ethnic group and percentage of the language in Singapore.",
          "sql": "SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore' GROUP BY T1.Name, T1.Percentage",
          "tables_involved": [
            "ethnicGroup",
            "country"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "Find the GPD for Bosnia and Herzegovina and the type of government it belongs to.",
          "sql": "SELECT T1.GDP, T2.Government FROM economy AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Bosnia and Herzegovina'",
          "tables_involved": [
            "economy",
            "politics",
            "country"
          ],
          "join_conditions": [
            "T1.Count",
            "T3.Cod"
          ]
        },
        {
          "question": "State the country and its population with population growth greater than 2% but infant mortality rate less than 5%.",
          "sql": "SELECT T1.Name, T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth > 2 AND T2.Infant_Mortality < 5",
          "tables_involved": [
            "country",
            "population"
          ],
          "join_conditions": [
            "F",
            "AS T2 ON T1.Cod"
          ]
        },
        {
          "question": "Which is the majority of the ethnic group in country with great than 10,000,000 population",
          "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Population > 10000000 GROUP BY T2.Name, T2.Percentage ORDER BY T2.Percentage DESC LIMIT 2",
          "tables_involved": [
            "country",
            "ethnicGroup"
          ],
          "join_conditions": [
            "T1.Cod",
            "> 10000000 G"
          ]
        },
        {
          "question": "Provide the country with its full name which has the most ethnic group? List them all ethnic group together with its percentage.",
          "sql": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage",
          "tables_involved": [
            "country",
            "ethnicGroup",
            "country",
            "ethnicGroup"
          ],
          "join_conditions": [
            "T1.Cod",
            "T1.Cod"
          ]
        },
        {
          "question": "What is the full name of the country with 100% Africans?",
          "sql": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'",
          "tables_involved": [
            "ethnicGroup",
            "country"
          ],
          "join_conditions": [
            "T1.Count"
          ]
        },
        {
          "question": "List the infant mortality of country with the least Amerindian.",
          "sql": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1",
          "tables_involved": [
            "population",
            "ethnicGroup"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.Count"
          ]
        },
        {
          "question": "For country with area greater than 600000, what is agriculture percentage of GDP the country contributes?",
          "sql": "SELECT T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area > 600000 AND T2.Agriculture IS NOT NULL",
          "tables_involved": [
            "country",
            "economy"
          ],
          "join_conditions": [
            "T1.Cod"
          ]
        }
      ]
    },
    "software_company": {
      "unique_tables": [
        "Mailings1_2",
        "Customers",
        "Demog",
        "mailings3"
      ],
      "table_frequency": {
        "Customers": 63,
        "Mailings1_2": 23,
        "Demog": 48,
        "mailings3": 1
      },
      "table_pairs": {
        "('Customers', 'Mailings1_2')": 18,
        "('Customers', 'Demog')": 37,
        "('Demog', 'Mailings1_2')": 10,
        "('Mailings1_2', 'Mailings1_2')": 1,
        "('Customers', 'mailings3')": 1
      },
      "join_examples": [
        {
          "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are female?",
          "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Female' AND T2.RESPONSE = 'true'",
          "tables_involved": [
            "Customers",
            "Mailings1_2"
          ],
          "join_conditions": [
            "T1.ID = T2."
          ]
        },
        {
          "question": "Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department.",
          "sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age > 40 AND T2.RESPONSE = 'true'",
          "tables_involved": [
            "Customers",
            "Mailings1_2"
          ],
          "join_conditions": [
            "F",
            "T1.ID = T2."
          ]
        },
        {
          "question": "Among the male customers, how many of them come from a place with over 30,000 inhabitants?",
          "sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30",
          "tables_involved": [
            "Customers",
            "Demog"
          ],
          "join_conditions": [
            "T1.G"
          ]
        },
        {
          "question": "How many customers are from the place with the highest average income per month?",
          "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1",
          "tables_involved": [
            "Customers",
            "Demog"
          ],
          "join_conditions": [
            "T1.G"
          ]
        },
        {
          "question": "Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts?",
          "sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Machine-op-inspct' AND T2.INHABITANTS_K > 20 AND T2.INHABITANTS_K < 30",
          "tables_involved": [
            "Customers",
            "Demog"
          ],
          "join_conditions": [
            "T1.G",
            "= 'Mac"
          ]
        },
        {
          "question": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?",
          "sql": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1",
          "tables_involved": [
            "Customers",
            "Demog"
          ],
          "join_conditions": [
            "T1.G"
          ]
        },
        {
          "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?",
          "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'",
          "tables_involved": [
            "Customers",
            "Mailings1_2",
            "Demog"
          ],
          "join_conditions": [
            "T1.ID = T2.",
            "T1.G"
          ]
        },
        {
          "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males?",
          "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced' AND T2.RESPONSE = 'true'",
          "tables_involved": [
            "Customers",
            "Mailings1_2"
          ],
          "join_conditions": [
            "T1.ID = T2."
          ]
        },
        {
          "question": "How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?",
          "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T2.RESPONSE = 'true' ORDER BY T3.INCOME_K DESC LIMIT 1",
          "tables_involved": [
            "Customers",
            "Mailings1_2",
            "Demog"
          ],
          "join_conditions": [
            "T1.ID = T2.",
            "T1.G"
          ]
        },
        {
          "question": "What is the number of inhabitants of the place the most customers are from?",
          "sql": "SELECT DISTINCT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INHABITANTS_K DESC",
          "tables_involved": [
            "Customers",
            "Demog"
          ],
          "join_conditions": [
            "T1.G"
          ]
        }
      ]
    },
    "chicago_crime": {
      "unique_tables": [
        "(",
        "Community_Area",
        "District",
        "IUCR",
        "Crime",
        "Ward",
        "FBI_Code",
        "the",
        "Neighborhood"
      ],
      "table_frequency": {
        "Community_Area": 67,
        "District": 43,
        "Neighborhood": 16,
        "(": 1,
        "Crime": 136,
        "IUCR": 38,
        "Ward": 36,
        "FBI_Code": 39,
        "the": 1
      },
      "table_pairs": {
        "('Community_Area', 'Neighborhood')": 16,
        "('(', 'Community_Area')": 1,
        "('(', 'Neighborhood')": 1,
        "('Crime', 'District')": 35,
        "('Community_Area', 'Crime')": 41,
        "('Crime', 'IUCR')": 31,
        "('Community_Area', 'IUCR')": 9,
        "('Crime', 'Ward')": 33,
        "('Crime', 'FBI_Code')": 33,
        "('Community_Area', 'FBI_Code')": 11,
        "('District', 'FBI_Code')": 5,
        "('FBI_Code', 'Ward')": 1,
        "('District', 'Ward')": 2,
        "('IUCR', 'Ward')": 2,
        "('Community_Area', 'Ward')": 3,
        "('Crime', 'Crime')": 2,
        "('Ward', 'Ward')": 3,
        "('District', 'IUCR')": 5,
        "('FBI_Code', 'IUCR')": 1,
        "('IUCR', 'IUCR')": 3,
        "('IUCR', 'Neighborhood')": 1,
        "('Crime', 'Neighborhood')": 3,
        "('Community_Area', 'Community_Area')": 1,
        "('FBI_Code', 'the')": 1,
        "('Crime', 'the')": 1,
        "('Community_Area', 'the')": 1
      },
      "join_examples": [
        {
          "question": "To which community area does the neighborhood Albany Park belong?",
          "sql": "SELECT T2.community_area_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Albany Park'",
          "tables_involved": [
            "Neighborhood",
            "Community_Area"
          ],
          "join_conditions": [
            "T1.community_a"
          ]
        },
        {
          "question": "How many neighborhoods are there in the community area of Lincoln Square?",
          "sql": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3",
          "tables_involved": [
            "(",
            "Community_Area",
            "Neighborhood"
          ],
          "join_conditions": [
            "T1.community_a"
          ]
        },
        {
          "question": "Please list the names of all the neighborhoods in the community area with the most population.",
          "sql": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T2.community_area_no ORDER BY T2.population DESC LIMIT 1",
          "tables_involved": [
            "Neighborhood",
            "Community_Area"
          ],
          "join_conditions": [
            "T2.community_a",
            "D"
          ]
        },
        {
          "question": "Please list the names of all the neighborhoods in Central Chicago.",
          "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.side = 'Central'",
          "tables_involved": [
            "Community_Area",
            "Neighborhood"
          ],
          "join_conditions": [
            "T1.community_a"
          ]
        },
        {
          "question": "Please list the precise location coordinates of all the crimes in Central Chicago.",
          "sql": "SELECT T2.latitude, T2.longitude FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name = 'Central'",
          "tables_involved": [
            "District",
            "Crime"
          ],
          "join_conditions": [
            "T1.dist"
          ]
        },
        {
          "question": "How many crimes had happened in Central Chicago?",
          "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'",
          "tables_involved": [
            "Crime",
            "District"
          ],
          "join_conditions": [
            "T1.dist"
          ]
        },
        {
          "question": "Among all the crimes that had happened in Central Chicago, how many of them were cases of domestic violence?",
          "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.domestic = 'TRUE'",
          "tables_involved": [
            "Crime",
            "District"
          ],
          "join_conditions": [
            "T1.dist"
          ]
        },
        {
          "question": "Please list the case numbers of all the crimes with no arrest made in Central Chicago.",
          "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.arrest = 'FALSE'",
          "tables_involved": [
            "Crime",
            "District"
          ],
          "join_conditions": [
            "T1.dist"
          ]
        },
        {
          "question": "How many crimes had happened in the community area with the most population?",
          "sql": "SELECT COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no GROUP BY T1.community_area_name ORDER BY T1.population DESC LIMIT 1",
          "tables_involved": [
            "Community_Area",
            "Crime"
          ],
          "join_conditions": [
            "T1.community_a",
            "D"
          ]
        },
        {
          "question": "Among the crimes in Woodlawn, how many of them happened in January, 2018?",
          "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'",
          "tables_involved": [
            "Community_Area",
            "Crime"
          ],
          "join_conditions": [
            "T1.community_a"
          ]
        }
      ]
    },
    "food_inspection": {
      "unique_tables": [
        "violations",
        "inspections",
        "businesses",
        "("
      ],
      "table_frequency": {
        "businesses": 71,
        "inspections": 47,
        "violations": 44,
        "(": 5
      },
      "table_pairs": {
        "('businesses', 'inspections')": 37,
        "('businesses', 'violations')": 40,
        "('inspections', 'inspections')": 3,
        "('violations', 'violations')": 2,
        "('inspections', 'violations')": 10,
        "('(', 'inspections')": 3,
        "('(', 'businesses')": 5,
        "('(', '(')": 1,
        "('(', 'violations')": 2,
        "('businesses', 'businesses')": 1
      },
      "join_examples": [
        {
          "question": "Please list the names of all the restaurants that have met all requirements in one inspection.",
          "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100",
          "tables_involved": [
            "inspections",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "Among the restaurants being inspected in 2016, how many of them are in San Francisco?",
          "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')",
          "tables_involved": [
            "inspections",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "What was the type of inspection Tiramisu Kitchen had on 2014/1/14?",
          "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2014-01-14' AND T2.name = 'Tiramisu Kitchen'",
          "tables_involved": [
            "inspections",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "How many low risk violations were found in the inspection on 2014/1/14 for Tiramisu Kitchen?",
          "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'",
          "tables_involved": [
            "violations",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "Please list the names of the restaurants that had a low risk violation in inspections in 2014.",
          "sql": "SELECT DISTINCT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2014' AND T1.risk_category = 'Low Risk'",
          "tables_involved": [
            "violations",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "What is the description of the low risk violation of Tiramisu Kitchen on 2014/1/14?",
          "sql": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.`date` = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'",
          "tables_involved": [
            "violations",
            "businesses"
          ],
          "join_conditions": [
            "F",
            "T1.busin"
          ]
        },
        {
          "question": "Please list the descriptions of all the high risk violations of Tiramisu Kitchen.",
          "sql": "SELECT DISTINCT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T2.name = 'Tiramisu Kitchen'",
          "tables_involved": [
            "violations",
            "businesses"
          ],
          "join_conditions": [
            "F",
            "T1.busin"
          ]
        },
        {
          "question": "How many routine inspections did Tiramisu Kitchen have?",
          "sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Routine - Unscheduled' AND T2.name = 'Tiramisu Kitchen'",
          "tables_involved": [
            "inspections",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "Among the routine inspections of Tiramisu Kitchen, how many of them have a score of over 70?",
          "sql": "SELECT COUNT(T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.type = 'Routine - Unscheduled' AND T1.score > 70",
          "tables_involved": [
            "inspections",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        },
        {
          "question": "Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry?",
          "sql": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'",
          "tables_involved": [
            "violations",
            "businesses"
          ],
          "join_conditions": [
            "T1.busin"
          ]
        }
      ]
    },
    "craftbeer": {
      "unique_tables": [
        "beers",
        "breweries"
      ],
      "table_frequency": {
        "beers": 7,
        "breweries": 6
      },
      "table_pairs": {
        "('beers', 'breweries')": 7,
        "('beers', 'beers')": 1
      },
      "join_examples": [
        {
          "question": "Which distinct state makes beer that has the least amount of bitterness?",
          "sql": "SELECT DISTINCT T2.state, T1.ibu FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.ibu IS NOT NULL AND T1.ibu = ( SELECT MIN(ibu) FROM beers )",
          "tables_involved": [
            "beers",
            "breweries",
            "beers"
          ],
          "join_conditions": [
            "T1.b"
          ]
        },
        {
          "question": "Where in New York can you locate the brewery that makes the bitterest beer? List both the brewery's name and the name of the city.",
          "sql": "SELECT T2.name, T2.city FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.state = 'NY' ORDER BY T1.ibu DESC LIMIT 1",
          "tables_involved": [
            "beers",
            "breweries"
          ],
          "join_conditions": [
            "T1.b"
          ]
        },
        {
          "question": "What is the average alcohol content per 12-ounce beer bottle produced by Boston Beer Company?",
          "sql": "SELECT AVG(T1.abv) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Boston Beer Company' AND T1.ounces = 12",
          "tables_involved": [
            "beers",
            "breweries"
          ],
          "join_conditions": [
            "T1.b",
            "B"
          ]
        },
        {
          "question": "Of all the beer styles produced by Stevens Point Brewery, how many percent do they allot for American Adjunct Lager?",
          "sql": "SELECT CAST(SUM(IIF(T1.style = 'American Adjunct Lager', 1, 0)) AS REAL) * 100 / COUNT(T1.brewery_id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Stevens Point Brewery'",
          "tables_involved": [
            "beers",
            "breweries"
          ],
          "join_conditions": [
            "T1.b"
          ]
        },
        {
          "question": "Which city and state produces the most and least bitter beer, and what is the difference in bitterness between the two? List also the names of the beer.",
          "sql": "SELECT T1.state, T1.city, T2.name, T2.ibu FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.id = T2.brewery_id GROUP BY T1.state, T1.city, T2.name, T2.ibu HAVING MAX(ibu) AND MIN(ibu) LIMIT 2",
          "tables_involved": [
            "breweries",
            "beers"
          ],
          "join_conditions": [
            "T1.id = T2.b"
          ]
        },
        {
          "question": "When compared to the total number of breweries in the US producing American Blonde Ale, how many in the state of Wisconsin produces American Blonde Ale? Indicate your answer in percentage (%).",
          "sql": "SELECT CAST(SUM(IIF(T2.state = 'WI', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.style = 'American Blonde Ale'",
          "tables_involved": [
            "beers",
            "breweries"
          ],
          "join_conditions": [
            "T1.b"
          ]
        }
      ]
    },
    "cookbook": {
      "unique_tables": [
        "Quantity",
        "Ingredient",
        "Recipe",
        "Nutrition"
      ],
      "table_frequency": {
        "Recipe": 54,
        "Nutrition": 35,
        "Quantity": 41,
        "Ingredient": 34
      },
      "table_pairs": {
        "('Nutrition', 'Recipe')": 30,
        "('Quantity', 'Recipe')": 25,
        "('Ingredient', 'Recipe')": 19,
        "('Ingredient', 'Quantity')": 36,
        "('Ingredient', 'Nutrition')": 5,
        "('Nutrition', 'Quantity')": 6,
        "('Ingredient', 'Ingredient')": 1,
        "('Quantity', 'Quantity')": 1
      },
      "join_examples": [
        {
          "question": "What is the title of the recipe that is most likely to gain weight?",
          "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1",
          "tables_involved": [
            "Recipe",
            "Nutrition"
          ],
          "join_conditions": [
            "AS T2 ON T1."
          ]
        },
        {
          "question": "What is the unsaturated fat content in the recipe \"Raspberry Chiffon Pie\"?",
          "sql": "SELECT T2.total_fat - T2.sat_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'",
          "tables_involved": [
            "Recipe",
            "Nutrition"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "Pi"
          ]
        },
        {
          "question": "Please list the titles of all the recipes that are salt/sodium-free.",
          "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.sodium < 5",
          "tables_involved": [
            "Recipe",
            "Nutrition"
          ],
          "join_conditions": [
            "AS T2 ON T1."
          ]
        },
        {
          "question": "Please list the titles of all the recipes that may lead to constipation, feeling sick or stomach pain.",
          "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20",
          "tables_involved": [
            "Recipe",
            "Nutrition"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "> 20"
          ]
        },
        {
          "question": "Which recipe is more beneficial in wound healing, \"Raspberry Chiffon Pie\" or \"Fresh Apricot Bavarian\"?",
          "sql": "SELECT DISTINCT CASE WHEN CASE WHEN T2.title = 'Raspberry Chiffon Pie' THEN T1.vitamin_c END > CASE WHEN T2.title = 'Fresh Apricot Bavarian' THEN T1.vitamin_c END THEN 'Raspberry Chiffon Pie' ELSE 'Fresh Apricot Bavarian' END AS \"vitamin_c is higher\" FROM Nutrition T1 INNER JOIN Recipe T2 ON T2.recipe_id = T1.recipe_id",
          "tables_involved": [
            "Nutrition",
            "Recipe"
          ],
          "join_conditions": [
            "Pi",
            "Pi",
            "T1 INN",
            "T2."
          ]
        },
        {
          "question": "Among the recipes that take more than 10 minutes to prepare, what is the title of the one with the most calories?",
          "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.prep_min > 10 ORDER BY T2.calories DESC LIMIT 1",
          "tables_involved": [
            "Recipe",
            "Nutrition"
          ],
          "join_conditions": [
            "AS T2 ON T1."
          ]
        },
        {
          "question": "How many calories does the recipe \"Raspberry Chiffon Pie\" contain?",
          "sql": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'",
          "tables_involved": [
            "Recipe",
            "Nutrition"
          ],
          "join_conditions": [
            "AS T2 ON T1.",
            "Pi"
          ]
        },
        {
          "question": "Is the ingredient \"graham cracker crumbs\" optional in the recipe \"Raspberry Chiffon Pie\"?",
          "sql": "SELECT T2.optional FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'",
          "tables_involved": [
            "Recipe",
            "Quantity",
            "Ingredient"
          ],
          "join_conditions": [
            "T1.",
            "T3.ing",
            "Pi"
          ]
        },
        {
          "question": "How many ingredients must be rationed in the recipe \"Raspberry Chiffon Pie\"?",
          "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.max_qty = T2.min_qty",
          "tables_involved": [
            "Recipe",
            "Quantity"
          ],
          "join_conditions": [
            "T1.",
            "Pi"
          ]
        },
        {
          "question": "Please list the names of all the ingredients needed for the recipe \"Raspberry Chiffon Pie\" that do not need preprocessing.",
          "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.preparation IS NULL",
          "tables_involved": [
            "Recipe",
            "Quantity",
            "Ingredient"
          ],
          "join_conditions": [
            "T1.",
            "T3.ing",
            "Pi",
            "IS NULL"
          ]
        }
      ]
    },
    "human_resources": {
      "unique_tables": [
        "position",
        "location",
        "employee"
      ],
      "table_frequency": {
        "employee": 53,
        "position": 36,
        "location": 26
      },
      "table_pairs": {
        "('employee', 'location')": 26,
        "('employee', 'position')": 32,
        "('location', 'position')": 12,
        "('employee', 'employee')": 1,
        "('position', 'position')": 1,
        "('location', 'location')": 1
      },
      "join_examples": [
        {
          "question": "In which city's office does Sandy Adams work at?",
          "sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'",
          "tables_involved": [
            "employee",
            "location"
          ],
          "join_conditions": [
            "AS T2  ON T1.locationID = T2.locationID "
          ]
        },
        {
          "question": "Among the employees working at the office in New York, how many of them have a good job performance?",
          "sql": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'",
          "tables_involved": [
            "employee",
            "location"
          ],
          "join_conditions": [
            "AS T2  ON T1.locationID = T2.locationID "
          ]
        },
        {
          "question": "What is the office phone number of the location at which Sandy Adams works?",
          "sql": "SELECT T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'",
          "tables_involved": [
            "employee",
            "location"
          ],
          "join_conditions": [
            "AS T2  ON T1.locationID = T2.locationID "
          ]
        },
        {
          "question": "How many male employees work at the address 450 Peachtree Rd?",
          "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'",
          "tables_involved": [
            "employee",
            "location"
          ],
          "join_conditions": [
            "AS T2  ON T1.locationID = T2.locationID "
          ]
        },
        {
          "question": "How many employees work as an Account Representative?",
          "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Account Representative'",
          "tables_involved": [
            "employee",
            "position"
          ],
          "join_conditions": [
            "AS T2  ON T1.positionID = T2.positionID "
          ]
        },
        {
          "question": "How much higher is James Johnson's salary from the minimum salary of his title?",
          "sql": "SELECT CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS diff FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.lastname = 'Johnson' AND T1.firstname = 'James'",
          "tables_involved": [
            "employee",
            "position"
          ],
          "join_conditions": [
            "AS T2  ON T1.positionID = T2.positionID "
          ]
        },
        {
          "question": "Among the employees who are Trainees, how many of them work in New York?",
          "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Trainee' AND T2.state = 'NY'",
          "tables_involved": [
            "employee",
            "location",
            "position"
          ],
          "join_conditions": [
            "AS T2  ON T1.locationID = T2.locationID INN",
            "AS T3  ON T3.positionID = T1.positionID "
          ]
        },
        {
          "question": "Please list the full names of the employees who are working as a Trainee.",
          "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
          "tables_involved": [
            "employee",
            "position"
          ],
          "join_conditions": [
            "AS T2  ON T1.positionID = T2.positionID "
          ]
        },
        {
          "question": "Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?",
          "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1",
          "tables_involved": [
            "employee",
            "position"
          ],
          "join_conditions": [
            "AS T2  ON T1.positionID = T2.positionID "
          ]
        },
        {
          "question": "Please list the zip codes of the offices where all the male employees with a good job performance work at.",
          "sql": "SELECT T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'",
          "tables_involved": [
            "employee",
            "location"
          ],
          "join_conditions": [
            "AS T2  ON T1.locationID = T2.locationID "
          ]
        }
      ]
    },
    "bike_share_1": {
      "unique_tables": [
        "station",
        "trip",
        "status",
        "weather"
      ],
      "table_frequency": {
        "trip": 99,
        "station": 64,
        "status": 10,
        "weather": 45
      },
      "table_pairs": {
        "('station', 'trip')": 57,
        "('station', 'status')": 10,
        "('trip', 'weather')": 38,
        "('station', 'station')": 7,
        "('status', 'status')": 1,
        "('trip', 'trip')": 6,
        "('status', 'trip')": 2,
        "('station', 'weather')": 2,
        "('weather', 'weather')": 2
      },
      "join_examples": [
        {
          "question": "State the final station of bike id 13. Which city was it at?",
          "sql": "SELECT T2.end_station_id, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.end_station_name WHERE T2.bike_id = 13 ORDER BY T2.end_date DESC LIMIT 1",
          "tables_involved": [
            "station",
            "trip"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T1.nam"
          ]
        },
        {
          "question": "Name all the trips where the bike was borrowed and returned on a different day. State the city where the bike was returned.",
          "sql": "SELECT DISTINCT T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, '/') + 1) - SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, ' ') - 5) <> SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, '/') + 1) - SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, ' ') - 5)",
          "tables_involved": [
            "station",
            "trip"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T2.sta"
          ]
        },
        {
          "question": "Which is the station where no bike could not be borrowed form on the 2013/11/03 02:01:01? State the location of the station.",
          "sql": "SELECT T1.name, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/11/03 02:01:01' AND T2.bikes_available = 0",
          "tables_involved": [
            "station",
            "status"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T2.station_id = T1.id "
          ]
        },
        {
          "question": "Name the station and city with the most borrowed bike.",
          "sql": "SELECT T2.start_station_name, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name GROUP BY T2.start_station_name ORDER BY COUNT(T2.start_station_name) DESC LIMIT 1",
          "tables_involved": [
            "station",
            "trip"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T2.sta"
          ]
        },
        {
          "question": "What was the hottest temperature on the day of trip ID 4080?",
          "sql": "SELECT MAX(T2.max_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.id = 4080",
          "tables_involved": [
            "trip",
            "weather"
          ],
          "join_conditions": [
            "T2.zip_cod"
          ]
        },
        {
          "question": "At what date and time did San Jose Diridon Caltrain Station have most bikes available.",
          "sql": "SELECT T2.time FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.bikes_available = ( SELECT MAX(T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' )",
          "tables_involved": [
            "station",
            "status",
            "station",
            "status"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T2.station_id = T1.id ",
            "Calt",
            "AS T1 INN",
            "T2.station_id = T1.id ",
            "Calt"
          ]
        },
        {
          "question": "Name all the trip on the days when it rained. State the duration of the trip",
          "sql": "SELECT T1.id, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'",
          "tables_involved": [
            "trip",
            "weather"
          ],
          "join_conditions": [
            "F",
            "T2.zip_cod"
          ]
        },
        {
          "question": "List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed.",
          "sql": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932",
          "tables_involved": [
            "station",
            "trip"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T2."
          ]
        },
        {
          "question": "Among the trips in August 2013, how many bikes were borrowed from Redwood City.",
          "sql": "SELECT COUNT(T2.start_date) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '8/%/2013%' AND T1.city = 'Redwood City'",
          "tables_involved": [
            "station",
            "trip"
          ],
          "join_conditions": [
            "AS T1 INN",
            "T2.sta"
          ]
        },
        {
          "question": "For all trips which took less 5 minutes, state the station name where the bike were borrowed and returned. Indicate mean temperature of the day.",
          "sql": "SELECT T1.start_station_name, T1.end_station_name, T2.mean_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.duration < 300",
          "tables_involved": [
            "trip",
            "weather"
          ],
          "join_conditions": [
            "T2.zip_cod",
            "< 300"
          ]
        }
      ]
    },
    "movie_3": {
      "unique_tables": [
        "film",
        "category",
        "city",
        "payment",
        "`language`",
        "(",
        "inventory",
        "film_actor",
        "actor",
        "address",
        "language",
        "film_category",
        "film_text",
        "store",
        "staff",
        "rental",
        "country",
        "customer"
      ],
      "table_frequency": {
        "film": 180,
        "(": 30,
        "staff": 12,
        "language": 9,
        "film_actor": 67,
        "actor": 69,
        "film_category": 56,
        "category": 55,
        "customer": 92,
        "rental": 52,
        "inventory": 40,
        "address": 44,
        "store": 13,
        "country": 18,
        "city": 26,
        "payment": 33,
        "film_text": 2,
        "`language`": 3
      },
      "table_pairs": {
        "('film', 'language')": 9,
        "('film', 'film_actor')": 54,
        "('actor', 'film_actor')": 63,
        "('actor', 'film')": 51,
        "('actor', 'language')": 1,
        "('film_actor', 'language')": 1,
        "('film', 'film_category')": 40,
        "('category', 'film')": 39,
        "('category', 'film_category')": 53,
        "('customer', 'rental')": 34,
        "('customer', 'inventory')": 14,
        "('customer', 'film')": 13,
        "('inventory', 'rental')": 24,
        "('film', 'rental')": 22,
        "('film', 'inventory')": 38,
        "('(', 'customer')": 13,
        "('(', 'rental')": 15,
        "('(', 'film')": 10,
        "('(', 'inventory')": 8,
        "('film_category', 'inventory')": 6,
        "('customer', 'film_category')": 5,
        "('film_category', 'rental')": 6,
        "('category', 'inventory')": 5,
        "('category', 'customer')": 4,
        "('category', 'rental')": 5,
        "('address', 'store')": 7,
        "('city', 'country')": 18,
        "('staff', 'store')": 4,
        "('address', 'staff')": 3,
        "('address', 'city')": 19,
        "('address', 'customer')": 26,
        "('payment', 'rental')": 5,
        "('(', 'film_category')": 6,
        "('(', 'category')": 4,
        "('customer', 'payment')": 25,
        "('payment', 'store')": 1,
        "('customer', 'store')": 4,
        "('(', '(')": 6,
        "('(', 'film_actor')": 7,
        "('(', 'actor')": 7,
        "('(', 'store')": 2,
        "('(', 'staff')": 2,
        "('customer', 'staff')": 3,
        "('address', 'country')": 11,
        "('country', 'store')": 2,
        "('city', 'store')": 2,
        "('city', 'customer')": 15,
        "('country', 'customer')": 9,
        "('actor', 'film_category')": 6,
        "('actor', 'category')": 5,
        "('film_actor', 'film_category')": 6,
        "('category', 'film_actor')": 5,
        "('actor', 'inventory')": 5,
        "('film_actor', 'inventory')": 5,
        "('address', 'film')": 2,
        "('city', 'film')": 1,
        "('address', 'inventory')": 2,
        "('city', 'inventory')": 1,
        "('address', 'rental')": 1,
        "('city', 'rental')": 1,
        "('address', 'payment')": 5,
        "('payment', 'payment')": 2,
        "('film', 'film')": 1,
        "('inventory', 'payment')": 2,
        "('film', 'payment')": 1,
        "('customer', 'customer')": 1,
        "('(', 'language')": 1,
        "('rental', 'staff')": 1,
        "('category', 'payment')": 1,
        "('film_category', 'payment')": 1,
        "('inventory', 'store')": 2,
        "('inventory', 'staff')": 1,
        "('(', 'payment')": 1,
        "('(', 'city')": 1,
        "('(', 'address')": 1,
        "('`language`', 'film')": 3,
        "('film_category', 'language')": 1,
        "('category', 'language')": 1,
        "('film', 'store')": 1,
        "('city', 'payment')": 2,
        "('country', 'payment')": 2
      },
      "join_examples": [
        {
          "question": "What is the language of the film ACADEMY DINOSAUR?",
          "sql": "SELECT T2.name FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'ACADEMY DINOSAUR'",
          "tables_involved": [
            "film",
            "language"
          ],
          "join_conditions": [
            "T1.languag"
          ]
        },
        {
          "question": "How many films are in English?",
          "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'",
          "tables_involved": [
            "film",
            "language"
          ],
          "join_conditions": [
            "T1.languag"
          ]
        },
        {
          "question": "Please list the titles of all the films starring the actor PENELOPE GUINESS.",
          "sql": "SELECT T2.title FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = 'PENELOPE' AND T3.last_name = 'GUINESS'",
          "tables_involved": [
            "film_actor",
            "film",
            "actor"
          ],
          "join_conditions": [
            "T1.film_id = T2.film_id INN",
            "T1.acto"
          ]
        },
        {
          "question": "How many actors have starred in the film ACADEMY DINOSAUR?",
          "sql": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = 'ACADEMY DINOSAUR'",
          "tables_involved": [
            "film_actor",
            "film"
          ],
          "join_conditions": [
            "T1.film_id = T2.film_id "
          ]
        },
        {
          "question": "Please list the full names of all the actors that have starred in the film ACADEMY DINOSAUR.",
          "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'",
          "tables_involved": [
            "actor",
            "film_actor",
            "film"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.film_id = T3.film_id "
          ]
        },
        {
          "question": "Among the films starring PENELOPE GUINESS, how many of them are released in 2006?",
          "sql": "SELECT COUNT(T2.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.release_year = 2006 AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'",
          "tables_involved": [
            "actor",
            "film_actor",
            "film"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.film_id = T3.film_id "
          ]
        },
        {
          "question": "Please give the title of the film starring PENELOPE GUINESS and has the highest replacement cost.",
          "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.replacement_cost DESC LIMIT 1",
          "tables_involved": [
            "actor",
            "film_actor",
            "film"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.film_id = T3.film_id "
          ]
        },
        {
          "question": "Please list the full names of all the actors that have starred in the film with the highest replacement cost.",
          "sql": "SELECT first_name, last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id ORDER BY T3.replacement_cost DESC LIMIT 1",
          "tables_involved": [
            "actor",
            "film_actor",
            "film"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.film_id = T3.film_id O"
          ]
        },
        {
          "question": "Among the films starring PENELOPE GUINESS, how many of them are in English?",
          "sql": "SELECT COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN language AS T4 ON T3.language_id = T4.language_id WHERE T4.name = 'English' AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'",
          "tables_involved": [
            "actor",
            "film_actor",
            "film",
            "language"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.film_id = T3.film_id INN",
            "T3.languag"
          ]
        },
        {
          "question": "What is the title of the film with the longest duration time and stars PENELOPE GUINESS?",
          "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1",
          "tables_involved": [
            "actor",
            "film_actor",
            "film"
          ],
          "join_conditions": [
            "T1.acto",
            "T2.film_id = T3.film_id "
          ]
        }
      ]
    }
  }
}